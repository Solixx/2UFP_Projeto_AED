{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Documentacao Projeto LP AED Manuel  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.1 \par
}}Documentacao Projeto LP AED Manuel}
{\comment Gerado por doxygen 1.9.6.}
{\creatim \yr2023\mo1\dy8\hr14\min7\sec25}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Documentacao Projeto LP AED Manuel}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o 1.1\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Domingo, 8 de Janeiro de 2023 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice das estruturas de dados\par \pard\plain 
{\tc \v \'CDndice das estruturas de dados}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Estruturas de dados\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista das estruturas de dados com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b KEY_HOLDER} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b matrixInts} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b matrixString} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b UTILIZADORES} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b UTILIZADORES_QUEUE} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos ficheiros\par \pard\plain 
{\tc \v \'CDndice dos ficheiros}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de ficheiros\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de todos os ficheiros com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b lib_projeto/{\b aed1_lp1_2223_proj_part1_chars.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib_projeto/{\b aed1_lp1_2223_proj_part1_ints.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib_projeto/{\b projeto.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib_projeto/{\b projeto.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib_projeto/{\b testes.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b lib_projeto/{\b testes.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o da estruturas de dados{\tc \v Documenta\'E7\'E3o da estruturas de dados}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 estrutura KEY_HOLDER\par \pard\plain 
{\tc\tcl2 \v KEY_HOLDER}
{\xe \v KEY_HOLDER}
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
\par
{
{\f2 #include <projeto.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b matrixString} {\b khString}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b matrixInts} {\b khInts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b data_criacao}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b data_modificacao}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sizeStrings}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sieInts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b KEY_HOLDER} * {\b next}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos campos e atributos\par
\pard\plain 
{\xe \v data_criacao\:KEY_HOLDER}
{\xe \v KEY_HOLDER\:data_criacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* data_criacao}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v data_modificacao\:KEY_HOLDER}
{\xe \v KEY_HOLDER\:data_modificacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* data_modificacao}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v khInts\:KEY_HOLDER}
{\xe \v KEY_HOLDER\:khInts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b matrixInts} khInts}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v khString\:KEY_HOLDER}
{\xe \v KEY_HOLDER\:khString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b matrixString} khString}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v next\:KEY_HOLDER}
{\xe \v KEY_HOLDER\:next}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b KEY_HOLDER}* next}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sieInts\:KEY_HOLDER}
{\xe \v KEY_HOLDER\:sieInts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int sieInts}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sizeStrings\:KEY_HOLDER}
{\xe \v KEY_HOLDER\:sizeStrings}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int sizeStrings}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta estrutura foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib_projeto/{\b projeto.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 estrutura matrixInts\par \pard\plain 
{\tc\tcl2 \v matrixInts}
{\xe \v matrixInts}
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
\par
{
{\f2 #include <projeto.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short ** {\b matrixPub}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short ** {\b matrixPriv}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short ** {\b matrixCod}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b lines}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos campos e atributos\par
\pard\plain 
{\xe \v lines\:matrixInts}
{\xe \v matrixInts\:lines}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int lines}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v matrixCod\:matrixInts}
{\xe \v matrixInts\:matrixCod}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short** matrixCod}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v matrixPriv\:matrixInts}
{\xe \v matrixInts\:matrixPriv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short** matrixPriv}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v matrixPub\:matrixInts}
{\xe \v matrixInts\:matrixPub}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short** matrixPub}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta estrutura foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib_projeto/{\b projeto.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 estrutura matrixString\par \pard\plain 
{\tc\tcl2 \v matrixString}
{\xe \v matrixString}
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
\par
{
{\f2 #include <projeto.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b matrixPub}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b matrixPriv}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b matrixCod}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b lines}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos campos e atributos\par
\pard\plain 
{\xe \v lines\:matrixString}
{\xe \v matrixString\:lines}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int lines}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v matrixCod\:matrixString}
{\xe \v matrixString\:matrixCod}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char** matrixCod}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v matrixPriv\:matrixString}
{\xe \v matrixString\:matrixPriv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char** matrixPriv}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v matrixPub\:matrixString}
{\xe \v matrixString\:matrixPub}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char** matrixPub}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta estrutura foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib_projeto/{\b projeto.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 estrutura UTILIZADORES\par \pard\plain 
{\tc\tcl2 \v UTILIZADORES}
{\xe \v UTILIZADORES}
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
\par
{
{\f2 #include <projeto.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b email}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b KEY_HOLDER} * {\b key_holder_list}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b UTILIZADORES} * {\b next}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos campos e atributos\par
\pard\plain 
{\xe \v email\:UTILIZADORES}
{\xe \v UTILIZADORES\:email}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* email}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v key_holder_list\:UTILIZADORES}
{\xe \v UTILIZADORES\:key_holder_list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b KEY_HOLDER}* key_holder_list}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v name\:UTILIZADORES}
{\xe \v UTILIZADORES\:name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* name}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v next\:UTILIZADORES}
{\xe \v UTILIZADORES\:next}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b UTILIZADORES}* next}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta estrutura foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib_projeto/{\b projeto.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 estrutura UTILIZADORES_QUEUE\par \pard\plain 
{\tc\tcl2 \v UTILIZADORES_QUEUE}
{\xe \v UTILIZADORES_QUEUE}
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
\par
{
{\f2 #include <projeto.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b UTILIZADORES} * {\b head}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b UTILIZADORES} * {\b tail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b size}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos campos e atributos\par
\pard\plain 
{\xe \v head\:UTILIZADORES_QUEUE}
{\xe \v UTILIZADORES_QUEUE\:head}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b UTILIZADORES}* head}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size\:UTILIZADORES_QUEUE}
{\xe \v UTILIZADORES_QUEUE\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int size}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tail\:UTILIZADORES_QUEUE}
{\xe \v UTILIZADORES_QUEUE\:tail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b UTILIZADORES}* tail}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta estrutura foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lib_projeto/{\b projeto.h}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o do ficheiro{\tc \v Documenta\'E7\'E3o do ficheiro}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro lib_projeto/aed1_lp1_2223_proj_part1_chars.h\par \pard\plain 
{\tc\tcl2 \v lib_projeto/aed1_lp1_2223_proj_part1_chars.h}
{\xe \v lib_projeto/aed1_lp1_2223_proj_part1_chars.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b key_long_2_digits_char} (unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b key_digits_2_long_char} (char *keydigits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b calc_private_key_char} (unsigned long long pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b calc_runlength_char} (unsigned long long privkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b private_key_from_runlength_char} (unsigned long long runlengthkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b alloc_matrix_char} (int nlines, int ncolumns)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b store_key_char} (char **matrix, int lines, unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b exists_key_char} (char **matrix, int lines, unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b get_private_key_char} (char **matrix_kpub, char **matrix_kpriv, int lines, unsigned long long pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b get_runlength_char} (char **matrix_kpriv, char **matrix_kcod, int lines, unsigned long long privkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b delete_key_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char *pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_populate_public_keys_char} (char **matrix_kpub, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_compute_private_keys_char} (char **matrix_kpub, char **matrix_kpriv, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_compute_runlengths_char} (char **matrix_kpriv, char **matrix_kcod, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b search_private_keys_char} (char **matrix_kpub, char **matrix_kpriv, int lines, unsigned long long partialpubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sort_matrix_char} (char **matrix, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sort_all_matrices_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b list_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_txt_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_txt_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_bin_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_bin_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char filename[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v alloc_matrix_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:alloc_matrix_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char ** alloc_matrix_char (int  {\i nlines}, int  {\i ncolumns})}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Memory allocation for a char matrix with nlines and ncolumns {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nlines} \cell }{- number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ncolumns} \cell }{- number of columns \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
pointer to the allocated memory of the matrix \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 167                                                   \{\par
168     {\cf18 char} **matrix;\par
169     matrix = ({\cf18 char} **) calloc((nlines+1) * {\cf17 sizeof} ({\cf18 char} *), {\cf17 sizeof} ({\cf18 char} *));\par
170     {\cf19 for} ({\cf18 int} i = 0; i < nlines; ++i) \{\par
171         matrix[i] = ({\cf18 char} *) calloc(ncolumns * {\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));\par
172     \}\par
173     matrix[nlines] = ({\cf18 char} *) calloc(3 * {\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));   {\cf20 // Linha que vai ser usada para saber o fim da matriz}\par
174     strcpy(matrix[nlines], {\cf22 "-1"});\par
175     {\cf19 return} matrix;\par
176 \}\par
}
}
{\xe \v bulk_compute_private_keys_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:bulk_compute_private_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_compute_private_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically calculate, generate and store all private keys for the existing public keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 299                                                                                        \{\par
300     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
301     matrix_kpriv = ({\cf18 char} **) realloc(matrix_kpriv, (lines+1) * {\cf17 sizeof} ({\cf18 char}*));\par
302     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
303         {\cf19 if}(strcmp(matrix_kpriv[i], {\cf22 "\\0"}) == 0)\{     {\cf20 // se o valor for vazio}\par
304             val = calc_private_key_char(atoll(matrix_kpub[i]));     {\cf20 // calcula a privKey}\par
305             matrix_kpriv[i] = ({\cf18 char} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (char));\par
306             store_key_char(matrix_kpriv, lines, val);           {\cf20 // guarda na matriz privada}\par
307         \}\par
308         {\cf19 if}(strcmp(matrix_kpriv[i], {\cf22 "-1"}) == 0)\{     {\cf20 // se estivermos na ultima linha da matriz}\par
309             val = calc_private_key_char(atoll(matrix_kpub[i]));     {\cf20 // calcula a privKey}\par
310             matrix_kpriv[i] = ({\cf18 char} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (char));\par
311             store_key_char(matrix_kpriv, lines, val);           {\cf20 // guarda ana matriz de privadas}\par
312             matrix_kpriv[i+1] = ({\cf18 char} *) calloc(3 * {\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));\par
313             strcpy(matrix_kpriv[i+1], {\cf22 "-1"});                    {\cf20 // atualizamos a posi\'E7\'E3o do -1}\par
314         \}\par
315     \}\par
316 \}\par
}
}
{\xe \v bulk_compute_runlengths_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:bulk_compute_runlengths_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_compute_runlengths_char (char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically calculate and store all run-lengths for the existing private keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 318                                                                                      \{\par
319     {\cf18 unsigned} {\cf18 long} {\cf18 long} val;\par
320     matrix_kcod = ({\cf18 char} **) realloc(matrix_kcod, (lines+1) * {\cf17 sizeof} ({\cf18 char}*));\par
321     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
322         {\cf19 if}(strcmp(matrix_kcod[i], {\cf22 "\\0"}) == 0)\{      {\cf20 // se a posi\'E7\'E3o estiver vazia}\par
323             val = calc_runlength_char(atoll(matrix_kpriv[i]));  {\cf20 // calcula a runLength}\par
324             matrix_kcod[i] = ({\cf18 char} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (char));\par
325             store_key_char(matrix_kcod, lines, val);        {\cf20 // guarda na matriz}\par
326         \}\par
327         {\cf19 if}(strcmp(matrix_kcod[i], {\cf22 "-1"}) == 0)\{     {\cf20 // se estiver na ultima linha da matriz}\par
328             val = calc_runlength_char(atoll(matrix_kpriv[i]));  {\cf20 // calcula o runLength}\par
329             matrix_kcod[i] = ({\cf18 char} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (char));\par
330             store_key_char(matrix_kcod, lines, val);        {\cf20 // guarda na matriz}\par
331             matrix_kcod[i+1] = ({\cf18 char} *) calloc(3 * {\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));\par
332             strcpy(matrix_kcod[i+1], {\cf22 "-1"});                 {\cf20 // atualiza a pos do -1}\par
333         \}\par
334     \}\par
335 \}\par
}
}
{\xe \v bulk_populate_public_keys_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:bulk_populate_public_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_populate_public_keys_char (char **  {\i matrix_kpub}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically generate and save a given amount (<lines>) of public keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 272                                                                   \{\par
273     {\cf18 unsigned} {\cf18 long} {\cf18 long} r;\par
274     matrix_kpub = ({\cf18 char} **) realloc(matrix_kpub, (lines+1) * {\cf17 sizeof} ({\cf18 char}*));\par
275     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
276         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "\\0"}) == 0)\{      {\cf20 // Se a linha estiver vazia}\par
277             r = new_public_key_int();               {\cf20 // gerar numero aleatorio}\par
278             {\cf18 char}* rString = malloc(numDigitsLong(r)+1 * {\cf17 sizeof} ({\cf18 char}));\par
279             sprintf(rString, {\cf22 "%llu"}, r);\par
280             matrix_kpub[i] = ({\cf18 char} *) calloc(strlen(rString)+1, {\cf17 sizeof} (char));\par
281             store_key_char(matrix_kpub, lines, r);  {\cf20 // meter o valor aleatorio na matriz}\par
282             rString=NULL;\par
283             free(rString);\par
284         \}\par
285         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) == 0)\{      {\cf20 // Se estivermos na ultima linha da matriz}\par
286             r = new_public_key_int();               {\cf20 // geramos o numero aleatorio}\par
287             {\cf18 char}* rString = malloc(numDigitsLong(r)+1 * {\cf17 sizeof} ({\cf18 char}));\par
288             sprintf(rString, {\cf22 "%llu"}, r);\par
289             matrix_kpub[i] = ({\cf18 char} *) calloc(strlen(rString)+1, {\cf17 sizeof} (char));\par
290             store_key_char(matrix_kpub, lines, r);  {\cf20 // colocamos o numero aleatorio na matriz}\par
291             matrix_kpub[i+1] = ({\cf18 char} *) calloc(3*{\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));\par
292             strcpy(matrix_kpub[i+1], {\cf22 "-1"});         {\cf20 // atualizamos a posi\'E7\'E3o do -1 para a prox}\par
293             rString=NULL;\par
294             free(rString);\par
295         \}\par
296     \}\par
297 \}\par
}
}
{\xe \v calc_private_key_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:calc_private_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long calc_private_key_char (unsigned long long  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the bipolar private key from a given public key (returns the bipolar private key). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which to calculate the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bipolar number representing the private key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 23                                                                    \{\par
24     {\cf18 char} *n;                                                                    {\cf20 //Apontador que vai receber cada digito para formar um n\'FAmero}\par
25     {\cf18 int} digitos = numDigitsLong(pubkey*2), j = 0, changePos = 0, numDigits = 2;                       {\cf20 //digitos = 2 pois o primeiro n\'FAmnero a ser criado vai ter 2 digitos / j = 0 vai ser usado para comparar o n\'FAmero de digitos atual}\par
26                                                                                 {\cf20 //changePos = 0 vai ser a vari\'E1vel usada para sabermos quando parar de converter n\'FAmeros \'E0 direita}\par
27     {\cf18 short} *allD = key_long_2_digits_int(pubkey*2);\par
28     {\cf18 char} rightNum = allD[1]+{\cf23 '0'}, leftNum = allD[0]+{\cf23 '0'};                     {\cf20 //rightNum -> n\'FAmero a inserir \'E0 direita come\'E7a em 0 -> ++ / leftNum -> n\'FAmero a inserir \'E0 esquerda come\'E7a em 1 -> ++}\par
29 \par
30     {\cf19 if}(bipolar_numberInt(allD) ==  0) {\cf19 return} key_digits_2_long_int(allD);\par
31     {\cf19 if}(pubkey <= 5)\{\par
32         rightNum = {\cf23 '0'};\par
33         leftNum = {\cf23 '1'};\par
34     \}\par
35     {\cf19 if}(digitos < 2) digitos = 2;\par
36     {\cf19 if}(pubkey == 0) {\cf19 return} 0;\par
37     n = ({\cf18 char} *) calloc(digitos, {\cf17 sizeof} ({\cf18 char}));    {\cf20 //Alocar mem\'F3ria para n}\par
38 \par
39     {\cf18 unsigned} {\cf18 long} {\cf18 long} max_iterations = ({\cf18 unsigned} {\cf18 long} long) 18446744073709551615;\par
40     {\cf19 for} ({\cf18 int} i = 0; atoll(n) < max_iterations; i++) \{\par
41         {\cf19 if}(leftNum == {\cf23 '9'} && changePos == digitos -1 && rightNum == {\cf23 '8'})\{       {\cf20 //Se o leftNum = 9 e a changePos = limite de digitos e rightNum = 8 temos (98, 988, 9888) ent\'E3o}\par
42             digitos++;                                                          {\cf20 //Chegamos ao ultimo n\'FAmero gerado bipolar com este n\'FAemro de digito ent\'E3o incrementamos o n\'FAmero de digitos}\par
43             n = NULL;\par
44             n = ({\cf18 char} *) realloc(n, digitos);                  {\cf20 //realocar mem\'F3ria para n com o novo n\'FAmero de digitos}\par
45             changePos = 0;                                                        {\cf20 //diminuir a changePos}\par
46             leftNum = {\cf23 '1'};                                                      {\cf20 //Resetar o valor de leftNum e de rigthNum}\par
47             rightNum = {\cf23 '0'};\par
48         \}\par
49         {\cf19 if}(rightNum == {\cf23 '9'} && changePos == digitos -1)\{                         {\cf20 //Se rigthNum = 9 e changePos = limite de digitos do n\'FAmero menos o primeiro digito ent\'E3o}\par
50             leftNum++;                                                          {\cf20 //aumentamos o valor de leftNum pois chegamos ao maior valor para este leftNum (19 -> 20, 1999 -> 2000, 19999 -> 20000)}\par
51         \}\par
52         {\cf19 if}(changePos == digitos -1)\{                                            {\cf20 //Se changePos = limite de digitos do n\'FAmero ent\'E3o}\par
53             changePos = 0;                                                      {\cf20 //Resetar a changePos pois chegamos \'E0 ultima posi\'E7\'E3o para este valor de rightNum (1112 -> 1122 -> 1222 -> 1113)}\par
54             {\cf19 if}(rightNum != {\cf23 '9'})\{                                                {\cf20 //Se rightNum != 9 incrementamos o rightNum}\par
55                 rightNum++;\par
56             \} {\cf19 else}\{                                                             {\cf20 //Se rigthNum = 9 ent\'E3o resetamos o valor de rigthNum}\par
57                 rightNum = {\cf23 '0'};\par
58             \}\par
59         \}\par
60         {\cf19 if}(leftNum == rightNum)\{                                                {\cf20 //Se leftNum = rigthNum ent\'E3o podemos dar skip a estes valores pois (1111, 2222, 3333) n\'E3o s\'E3o bipolares}\par
61             rightNum++;\par
62         \}\par
63         {\cf19 if}(j > changePos)\{                                                      {\cf20 //Se a posi\'E7\'E3o do digito a ser mudado atualmente for maior que changePos ent\'E3o}\par
64             n[j] = rightNum;                                                    {\cf20 //este valor vai ser igual a rigthNum ex: rigthNum=2 (1112), rigthNum=3 (2333), rigthNum=6 (8866)}\par
65         \} {\cf19 else}\{                                                                 {\cf20 //Se n\'E3o ent\'E3o igualamos ao valor de leftNum}\par
66             n[j] = leftNum;\par
67         \}\par
68         {\cf19 if}(j == digitos-1)\{                                                             {\cf20 //Se j = ao n\'FAmero de digitos ent\'E3o}\par
69                 numDigits = digitos;\par
70                 n[strlen(n)] = {\cf23 '\\0'};                                                {\cf20 //Inserir o \\0 no final da string}\par
71                 {\cf20 //printf("PivKey = %llu\\n", atoll(n));}\par
72                 {\cf19 if}(atoll(n) > 1000000000000 || atoll(n) < 0)\{\par
73                     n=NULL;\par
74                     free(allD);\par
75                     free(n);\par
76                     {\cf19 return} 0;  {\cf20 //Se o valor for maior que o suportado para (unsigned long long) ou for menor que 0 ou se a pubkey for igual a 0 returna 0}\par
77                 \}\par
78                 {\cf19 if}(atoll(n) > pubkey && atoll(n)%pubkey == 0)\{                          {\cf20 //Se (unsigned long long) de n for maior que pubkey(pq a pubkey \'E9 multipla dela mesma) e (unsigned long long) de n for multiplo de pubkey}\par
79                     {\cf18 unsigned} {\cf18 long} {\cf18 long} valorFinal = atoll(n);                           {\cf20 //valorFinal vai ser igual a (unsigned long long) de n}\par
80                     n=NULL;                                                             {\cf20 //Limpa n e d\'E1 free \'E0 mem\'F3ria}\par
81                     free(allD);\par
82                     free(n);\par
83                     {\cf19 return} valorFinal;                                                  {\cf20 //retorna o valorFinal}\par
84                 \}\par
85                 changePos++;                                                            {\cf20 //Se n\'E3o changePos++ e resetamos o j}\par
86                 j = 0;\par
87         \} {\cf19 else}\{                                                                         {\cf20 //Se n\'E3o incrementamos o j}\par
88             j++;\par
89         \}\par
90     \}\par
91     {\cf19 return} 0;\par
92 \}\par
}
}
{\xe \v calc_runlength_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:calc_runlength_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long calc_runlength_char (unsigned long long  {\i privkey})}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the run-length from a given private key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i privkey} \cell }{- private key for which to calculate the run-length \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
run-length number representing the private key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 94                                                                   \{\par
95     {\cf18 unsigned} {\cf18 long} {\cf18 long} codKey = 0;\par
96     {\cf18 int} runLessPos = 0, digits, pow = 1;\par
97     digits = numDigitsLong(privkey);\par
98     {\cf18 int} allD[digits], runLess[4];\par
99 \par
100     {\cf20 //Ciclo para zerar runLess}\par
101     {\cf19 for} ({\cf18 int} i = 0; i < 6; ++i) \{\par
102         runLess[i] = 0;\par
103     \}\par
104     {\cf20 //Se privKey maior ou igual que 10 vai calcular a sua run Length}\par
105     {\cf19 if}(privkey >= 10)\{\par
106         allDigitsLong(privkey, allD);          {\cf20 // Insere no array allD todos os digitos da privKey}\par
107         runLess[runLessPos+1] = 1;                  {\cf20 // iguala a segunda posi\'E7\'E3o do runLength a 1(count de frequencia de um numero)}\par
108         runLess[runLessPos] = allD[digits-1];       {\cf20 // iguala a primeira posi\'E7\'E3o do runLength ao ultimo digito de allD (ultimode allD \'E9 o primeiro da privKey pois o allD fica invertido)}\par
109         {\cf19 for} ({\cf18 int} i = digits-1; i > 0; i--) \{\par
110             {\cf19 if}(allD[i] != allD[i-1])\{               {\cf20 // compara se o valor atual de allD \'E9 igual ao proximo valor (i-1 \'E9 o proximo porque o array est\'E1 a andar de tras para a frente)}\par
111                 runLessPos += 2;                    {\cf20 // se os 2 valores forem iguais ent\'E3o mudamos de digito e subimos ent\'E3o a runLessPos+2 pois a pos 0 e 2 do runLength s\'E3o os digitos}\par
112                 runLess[runLessPos] = allD[i-1];    {\cf20 // igualo runLess[2] ao valor valor de allD[i-1] (i-1 pois o array est\'E1 a ir de tras para a frente ent\'E3o o i-1 \'E9 que \'E9 o prox valor)}\par
113             \}\par
114             runLess[runLessPos+1]++;                {\cf20 // frequencia do digitos++}\par
115         \}\par
116         {\cf19 for} ({\cf18 int} i = 1; i <= 4; i++) \{             {\cf20 // array que vai concatenar todo o array runLess num numero}\par
117             {\cf19 if} ( i == 1)\{\par
118                 codKey = runLess[i-1];              {\cf20 // codKey = ao primeiro digito}\par
119             \} {\cf19 else}\{\par
120                 {\cf19 if}(i%2 == 0)\{                       {\cf20 // se estivermos numa posi\'E7\'E3o multipla de 2 ent\'E3o estamos em posi\'E7\'F5es de frequencias de digitos}\par
121                     codKey *= 100;                  {\cf20 // mutiplicamos o valor de codKey por 100 pois cada frequencia vai ocupar 2 espa\'E7os exemplo (101 isto \'E9 o numero 1 aparece 1 vez / 1 \'E9 o numero e 01 \'E9 a frequencia)}\par
122                     codKey += runLess[i-1];         {\cf20 // soma de codKey com o valor de runLess}\par
123                     pow = 1;\par
124                 \} {\cf19 else}\{\par
125                     {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(runLess[i-1]); ++j) \{ {\cf20 // Ciclo para saber quanto se tem de multiplicar codKey para poder fazer a soma e juntar runLess sabemos isso pelo numero de digitos}\par
126                         pow *= 10;\par
127                     \}\par
128                     codKey *= pow;              {\cf20 // multiplicamos codKey pelo pow}\par
129                     codKey += runLess[i-1];     {\cf20 // soamos codKey e runLess}\par
130                     pow = 1;                    {\cf20 // voltamos o pow a 1}\par
131                 \}\par
132             \}\par
133         \}\par
134         {\cf19 return} codKey;\par
135     \}\par
136     {\cf19 else}\{\par
137         {\cf19 return} 0;\par
138     \}\par
139 \}\par
}
}
{\xe \v delete_key_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:delete_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long delete_key_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char *  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Delete a given public key (and corresponding priv and runlength keys) from all matrices. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key to delete \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
pubkey that was deleted \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 237                                                                                                                         \{\par
238     {\cf18 int} exist = 0;\par
239     {\cf19 for} ({\cf18 int} i = 0; i < lines+1; ++i) \{\par
240         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) == 0) {\cf19 break};\par
241         {\cf19 if}(strcmp(matrix_kpub[i], pubkey) == 0)\{\par
242             exist = 1;\par
243             {\cf19 for} ({\cf18 int} j = i; j < lines; ++j) \{\par
244                 {\cf19 if}(j == lines-1)\{\par
245                     matrix_kpub[j] = matrix_kpub[j+1];\par
246                     matrix_kpriv[j] = matrix_kpriv[j+1];\par
247                     matrix_kcod[j] = matrix_kcod[j+1];\par
248                     matrix_kpub[j+1] = NULL;\par
249                     matrix_kpriv[j+1] = NULL;\par
250                     matrix_kcod[j+1] = NULL;\par
251                     free(matrix_kpub[j+1]);\par
252                     free(matrix_kpriv[j+1]);\par
253                     free(matrix_kcod[j+1]);\par
254                 \}\par
255                 {\cf19 else}\{\par
256                     matrix_kpub[j] = matrix_kpub[j+1];\par
257                     matrix_kpriv[j] = matrix_kpriv[j+1];\par
258                     matrix_kcod[j] = matrix_kcod[j+1];\par
259                 \}\par
260             \}\par
261             lines--;\par
262         \}\par
263     \}\par
264     {\cf19 if}(exist == 0)\{\par
265         printf({\cf22 "Chave Nao Encontrada\\n"});\par
266         {\cf19 return} 0;\par
267     \}\par
268 \par
269     {\cf19 return} atoll(pubkey);\par
270 \}\par
}
}
{\xe \v exists_key_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:exists_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int exists_key_char (char **  {\i matrix}, int  {\i lines}, unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verify if a given key exists in the matrix. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix with keys \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- key to check if it exists \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
1 if it exists, 0 if it doesn't \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 192                                                                      \{\par
193     {\cf18 char} *keyChar = malloc(numDigitsLong(key) * {\cf17 sizeof} ({\cf18 char}));\par
194     sprintf(keyChar, {\cf22 "%llu"}, key);\par
195     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
196         {\cf19 if}(strcmp(matrix[i], keyChar) == 0)\{\par
197             keyChar=NULL;\par
198             free(keyChar);\par
199             {\cf19 return} 1;\par
200         \}\par
201     \}\par
202     keyChar=NULL;\par
203     free(keyChar);\par
204     {\cf19 return} 0;\par
205 \}\par
}
}
{\xe \v get_private_key_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:get_private_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long get_private_key_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, int  {\i lines}, unsigned long long  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the private key corresponding to the given public key {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which we want the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key of the given pubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 207                                                                                                                       \{\par
208     {\cf18 char} *keyChar = malloc(numDigitsLong(pubkey) * {\cf17 sizeof} ({\cf18 char}));\par
209     sprintf(keyChar, {\cf22 "%llu"}, pubkey);\par
210     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
211         {\cf19 if}(strcmp(matrix_kpub[i], keyChar) == 0)\{\par
212             keyChar=NULL;\par
213             free(keyChar);\par
214             {\cf19 return} atoll(matrix_kpriv[i]);\par
215         \}\par
216     \}\par
217     keyChar=NULL;\par
218     free(keyChar);\par
219     {\cf19 return} 0;\par
220 \}\par
}
}
{\xe \v get_runlength_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:get_runlength_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long get_runlength_char (char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, unsigned long long  {\i privkey})}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the run-length key of a given private key {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which we want the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key runlength of the given pubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 222                                                                                                                      \{\par
223     {\cf18 char} *keyChar = malloc(numDigitsLong(privkey) * {\cf17 sizeof} ({\cf18 char}));\par
224     sprintf(keyChar, {\cf22 "%llu"}, privkey);\par
225     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
226         {\cf19 if}(strcmp(matrix_kpriv[i], keyChar) == 0)\{\par
227             keyChar=NULL;\par
228             free(keyChar);\par
229             {\cf19 return} atoll(matrix_kcod[i]);\par
230         \}\par
231     \}\par
232     keyChar=NULL;\par
233     free(keyChar);\par
234     {\cf19 return} 0;\par
235 \}\par
}
}
{\xe \v key_digits_2_long_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:key_digits_2_long_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long key_digits_2_long_char (char *  {\i keydigits})}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Receives an array of digits in ascii i.e. chars and returns the long key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keydigits} \cell }{- array of digits of key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
address of array of digits for a given key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 19                                                           \{\par
20     {\cf19 return} atoll(keydigits);    {\cf20 //converter de (char*) para (unsigned long long) e returnar o valor}\par
21 \}\par
}
}
{\xe \v key_long_2_digits_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:key_long_2_digits_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * key_long_2_digits_char (unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create an array of digits in ascii i.e. chars for a given key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- long key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
address of array of digits in ascii for a given key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 12                                                     \{\par
13     {\cf18 int} digits = numDigits(key);                        {\cf20 //variavel com o numero de digitos de (key)}\par
14     {\cf18 char} *keydigits = malloc(digits * {\cf17 sizeof} ({\cf18 char}));   {\cf20 //alocar mem\'F3ria para *keydigits com o valor de (digits)}\par
15     sprintf(keydigits, {\cf22 "%llu"}, key);           {\cf20 //converter o valor de (unsigned long long) para (char*)}\par
16     {\cf19 return} keydigits;                                         {\cf20 //returnar o valor de (keydigits)}\par
17 \}\par
}
}
{\xe \v list_keys_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:list_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void list_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print all keys on the console, sorted by pubkeys sizes (i.e. number of digits). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 0 ? current order : order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 390                                                                                                       \{\par
391     {\cf20 //shellSortCharDigits(matrix_kpub, matrix_kpriv, matrix_kcod, lines, order);}\par
392     mergeDigits_char_sort_base(matrix_kpub, matrix_kpriv, matrix_kcod, lines, order);\par
393 \}\par
}
}
{\xe \v load_bin_keys_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:load_bin_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void load_bin_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loads data into the matrices from a binary file. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{-name of the binary file to load data from \cell }
{\row }
}
}}
{\xe \v load_txt_keys_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:load_txt_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void load_txt_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loads data into the matrices from a text file. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the text file to load data from \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 421                                                                                                                 \{\par
422     FILE *fileChavesPubRead;\par
423     fileChavesPubRead = fopen(filename, {\cf22 "r"});\par
424     {\cf18 int} i = 0, j = 0;\par
425     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0, codKey = 0, t = 0, count = 1;\par
426     {\cf18 char} **value = ({\cf18 char} **) calloc(count, {\cf17 sizeof} ({\cf18 char}*));\par
427     value[0] = malloc(1 * {\cf17 sizeof} ({\cf18 char}));\par
428     {\cf18 char} str[lines][200];\par
429 \par
430     {\cf19 if}(fileChavesPubRead == NULL)\{\par
431         printf({\cf22 "Ficheiro nao existe\\n"});\par
432         {\cf19 return};\par
433     \}\par
434 \par
435     {\cf19 while} (fscanf (fileChavesPubRead, {\cf22 "%s"}, value[count-1]) == 1)\{\par
436         count++;\par
437         value = ({\cf18 char} **) realloc(value, count * {\cf17 sizeof} ({\cf18 char}*));\par
438         value[count-1] = ({\cf18 char} *) calloc(1, {\cf17 sizeof} ({\cf18 char}));\par
439     \}\par
440 \par
441     j = 0;\par
442     {\cf19 while} (i < lines && i < count)\{\par
443         strcpy(matrix_kpub[j], value[i]);\par
444         strcpy(matrix_kpriv[j], value[i+1]);\par
445         strcpy(matrix_kcod[j], value[i+2]);\par
446         i += 3;\par
447         j++;\par
448     \}\par
449 \par
450     fclose(fileChavesPubRead);\par
451 \}\par
}
}
{\xe \v private_key_from_runlength_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:private_key_from_runlength_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long private_key_from_runlength_char (unsigned long long  {\i runlengthkey})}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the private key from a run-length. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i runlengthkey} \cell }{- run-length for which to calculate the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key that corresponds to the runlengthkey arg \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 141                                                                                    \{\par
142 \par
143     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0;\par
144     {\cf18 short} *allDigits, freq = 0, pow = 1;\par
145     allDigits = key_long_2_digits_int(runlengthkey);\par
146 \par
147     privKey = allDigits[0];         {\cf20 // privKey = ao primeiro digito do allDigits}\par
148     freq = allDigits[1] * 10;       {\cf20 // frequecia = ao segundp digito de allDigits * 10}\par
149     freq += allDigits[2];           {\cf20 // frequencia + o terceiro digito de allDigits = frequencia do primeiro digito da privKey}\par
150     {\cf19 for} ({\cf18 int} i = 1; i < freq; ++i) \{    {\cf20 // ciclo para coclocar o digito da privkey com o seu n\'BA de frequencias}\par
151         privKey *= 10;\par
152         privKey += allDigits[0];\par
153     \}\par
154 \par
155     privKey *= 10;                  {\cf20 // multiplicamos a privKey * 10 para juntar os restantes valores}\par
156     privKey += allDigits[3];\par
157     freq = allDigits[4] * 10;\par
158     freq += allDigits[5];\par
159     {\cf19 for} ({\cf18 int} i = 1; i < freq; ++i) \{\par
160         privKey *= 10;\par
161         privKey += allDigits[3];\par
162     \}\par
163 \par
164     {\cf19 return} privKey;\par
165 \}\par
}
}
{\xe \v save_bin_keys_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:save_bin_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_bin_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save all matrix data to a binary file {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the binary file where to store the data \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 453                                                                                                                 \{\par
454     FILE *fileChavesPubWrite;\par
455     fileChavesPubWrite = fopen(filename, {\cf22 "a+b"});\par
456 \par
457     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
458         printf({\cf22 "Ficheiro nao existe\\n"});\par
459         {\cf19 return};\par
460     \}\par
461     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
462         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) != 0)\{\par
463             fwrite(matrix_kpub[i], {\cf17 sizeof} ({\cf18 char}), strlen(matrix_kpub[i]), fileChavesPubWrite);\par
464             fwrite({\cf22 "\\n"}, {\cf17 sizeof} ({\cf18 char}), 1, fileChavesPubWrite);\par
465         \} {\cf19 else} {\cf19 break};\par
466         {\cf19 if}(strcmp(matrix_kpriv[i], {\cf22 "-1"}) != 0)\{\par
467             fwrite(matrix_kpriv[i], {\cf17 sizeof} ({\cf18 char}), strlen(matrix_kpriv[i]), fileChavesPubWrite);\par
468             fwrite({\cf22 "\\n"}, {\cf17 sizeof} ({\cf18 char}), 1, fileChavesPubWrite);\par
469         \} {\cf19 else} {\cf19 break};\par
470         {\cf19 if}(strcmp(matrix_kcod[i], {\cf22 "-1"}) != 0)\{\par
471             fwrite(matrix_kcod[i], {\cf17 sizeof} ({\cf18 char}), strlen(matrix_kcod[i]), fileChavesPubWrite);\par
472             fwrite({\cf22 "\\n"}, {\cf17 sizeof} ({\cf18 char}), 1, fileChavesPubWrite);\par
473         \} {\cf19 else} {\cf19 break};\par
474     \}\par
475 \par
476     fclose(fileChavesPubWrite);\par
477 \}\par
}
}
{\xe \v save_txt_keys_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:save_txt_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_txt_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save all matrix data to a text file {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the text file where to store the data \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 395                                                                                                                 \{\par
396     FILE *fileChavesPubWrite;\par
397     fileChavesPubWrite = fopen(filename, {\cf22 "a+"});\par
398 \par
399     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
400         printf({\cf22 "Ficheiro nao existe\\n"});\par
401         {\cf19 return};\par
402     \}\par
403     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
404         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) != 0)\{\par
405             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , atoll(matrix_kpub[i]));\par
406             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
407         \} {\cf19 else} {\cf19 break};\par
408         {\cf19 if}(strcmp(matrix_kpriv[i], {\cf22 "-1"}) != 0)\{\par
409             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , atoll(matrix_kpriv[i]));\par
410             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
411         \} {\cf19 else} {\cf19 break};\par
412         {\cf19 if}(strcmp(matrix_kcod[i], {\cf22 "-1"}) != 0)\{\par
413             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , atoll(matrix_kcod[i]));\par
414             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
415         \} {\cf19 else} {\cf19 break};\par
416     \}\par
417 \par
418     fclose(fileChavesPubWrite);\par
419 \}\par
}
}
{\xe \v search_private_keys_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:search_private_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char ** search_private_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, int  {\i lines}, unsigned long long  {\i partialpubkey})}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a list of all private keys matching a given partial public key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i partialpubkey} \cell }{- part of public key to filter the private keys \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
array of private keys matching the partialpubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 337                                                                                                                      \{\par
338 \par
339     {\cf18 char} **result = malloc({\cf17 sizeof} ({\cf18 char} *));\par
340     {\cf18 char} *partialPubKeyChar = ({\cf18 char} *) malloc(numDigitsLong(partialpubkey) * {\cf17 sizeof} (char));\par
341     sprintf(partialPubKeyChar, {\cf22 "%llu"}, partialpubkey);\par
342     {\cf18 int} partialPubKeySize = strlen(partialPubKeyChar);\par
343     {\cf18 int} sizeResult = 0, posResult = 0;\par
344     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
345 \par
346     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
347         {\cf18 int} k = 0;\par
348         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) == 0) {\cf19 break};        {\cf20 // se for -1 estamos no fim da matriz ent\'E3o j\'E1 podemos sair}\par
349         {\cf19 for} ({\cf18 int} j = 0; j < strlen(matrix_kpub[i]); ++j) \{\par
350             {\cf19 if}(matrix_kpub[i][j] == partialPubKeyChar[k])\{\par
351                 k++;\par
352             \} {\cf19 else}\{\par
353                 k = 0;\par
354             \}\par
355             {\cf19 if}(k == strlen(partialPubKeyChar))\{\par
356                 sizeResult++;\par
357                 result = ({\cf18 char} **) realloc(result, (sizeResult+1) * {\cf17 sizeof} ({\cf18 char} *));\par
358                 val = get_private_key_char(matrix_kpub, matrix_kpriv, lines, atoll(matrix_kpub[i]));\par
359                 result[posResult] = ({\cf18 char} *) malloc(numDigitsLong(val) * {\cf17 sizeof} (char));\par
360                 sprintf(result[posResult], {\cf22 "%llu"}, val);\par
361                 posResult++;\par
362             \}\par
363         \}\par
364     \}\par
365 \par
366     result[posResult] = ({\cf18 char} *) malloc(2 * {\cf17 sizeof} ({\cf18 char}));\par
367     result[posResult] = {\cf22 "-1"};\par
368 \par
369     partialPubKeyChar = NULL;\par
370     free(partialPubKeyChar);\par
371 \par
372     {\cf19 return} result;\par
373 \par
374 \}\par
}
}
{\xe \v sort_all_matrices_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:sort_all_matrices_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sort_all_matrices_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sort all matrices keys in ascending or descending order {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 381                                                                                                               \{\par
382     {\cf20 //shellSortChar(matrix_kpub, lines, order);}\par
383     {\cf20 //shellSortChar(matrix_kpriv, lines, order);}\par
384     {\cf20 //shellSortChar(matrix_kcod, lines, order);}\par
385     merge_char_sort_base(matrix_kpub, lines, order);\par
386     merge_char_sort_base(matrix_kpriv, lines, order);\par
387     merge_char_sort_base(matrix_kcod, lines, order);\par
388 \}\par
}
}
{\xe \v sort_matrix_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:sort_matrix_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sort_matrix_char (char **  {\i matrix}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sort a matrix keys in ascending or descending order {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix to be sorted \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 376                                                           \{\par
377     {\cf20 //shellSortChar(matrix, lines, order);}\par
378     merge_char_sort_base(matrix, lines, order);\par
379 \}\par
}
}
{\xe \v store_key_char\:aed1_lp1_2223_proj_part1_chars.h}
{\xe \v aed1_lp1_2223_proj_part1_chars.h\:store_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void store_key_char (char **  {\i matrix}, int  {\i lines}, unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Store a key (pub, priv or run-length) into the first available position of given matrix. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix to store the key \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- key to be stored \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 178                                                                      \{\par
179     {\cf18 char} *keyChar = ({\cf18 char} *) calloc((numDigitsLong(key)+1) * {\cf17 sizeof} (char), {\cf17 sizeof} ({\cf18 char}));\par
180     sprintf(keyChar, {\cf22 "%llu"}, key);\par
181     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
182         {\cf19 if}(!matrix[i][0])\{      {\cf20 // Se o valor for vazio}\par
183             matrix[i] = ({\cf18 char} *) calloc(strlen(keyChar)+1, {\cf17 sizeof} (char));\par
184             matrix[i] = keyChar;\par
185             {\cf19 break};\par
186         \}\par
187     \}\par
188     keyChar=NULL;\par
189     free(keyChar);\par
190 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aed1_lp1_2223_proj_part1_chars.h\par \pard\plain 
{\tc\tcl2 \v lib_projeto/aed1_lp1_2223_proj_part1_chars.h}
{\xe \v lib_projeto/aed1_lp1_2223_proj_part1_chars.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Ir para a documenta\'E7\'E3o deste ficheiro.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //}\par
2 {\cf20 // AED1 & LP1 2022-2023 (PART 1)}\par
3 {\cf20 //}\par
4 \par
5 {\cf21 #ifndef AED1_LP1_2223_PROJ_TESTS_AED1_LP1_2223_PROJ_PART1_CH_H}\par
6 {\cf21 #define AED1_LP1_2223_PROJ_TESTS_AED1_LP1_2223_PROJ_PART1_CH_H}\par
7 \par
13 {\cf18 char}* key_long_2_digits_char({\cf18 unsigned} {\cf18 long} {\cf18 long} key);\par
14 \par
20 {\cf18 unsigned} {\cf18 long} {\cf18 long} key_digits_2_long_char({\cf18 char}* keydigits);\par
21 \par
27 {\cf18 unsigned} {\cf18 long} {\cf18 long} calc_private_key_char({\cf18 unsigned} {\cf18 long} {\cf18 long} pubkey);\par
28 \par
34 {\cf18 unsigned} {\cf18 long} {\cf18 long} calc_runlength_char({\cf18 unsigned} {\cf18 long} {\cf18 long} privkey);\par
35 \par
41 {\cf18 unsigned} {\cf18 long} {\cf18 long} private_key_from_runlength_char({\cf18 unsigned} {\cf18 long} {\cf18 long} runlengthkey);\par
42 \par
49 {\cf18 char}** alloc_matrix_char({\cf18 int} nlines, {\cf18 int} ncolumns);\par
50 \par
57 {\cf18 void} store_key_char({\cf18 char} **matrix, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} key);\par
58 \par
66 {\cf18 int} exists_key_char({\cf18 char} **matrix, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} key);\par
67 \par
76 {\cf18 unsigned} {\cf18 long} {\cf18 long} get_private_key_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} pubkey);\par
77 \par
86 {\cf18 unsigned} {\cf18 long} {\cf18 long} get_runlength_char({\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} privkey);\par
87 \par
97 {\cf18 unsigned} {\cf18 long} {\cf18 long} delete_key_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines, {\cf18 char}* pubkey);\par
98 \par
104 {\cf18 void} bulk_populate_public_keys_char({\cf18 char} **matrix_kpub, {\cf18 int} lines);\par
105 \par
112 {\cf18 void} bulk_compute_private_keys_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 int} lines);\par
113 \par
120 {\cf18 void} bulk_compute_runlengths_char({\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines);\par
121 \par
130 {\cf18 char}** search_private_keys_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} partialpubkey);\par
131 \par
138 {\cf18 void} sort_matrix_char({\cf18 char} **matrix, {\cf18 int} lines, {\cf18 int} order);\par
139 \par
148 {\cf18 void} sort_all_matrices_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines, {\cf18 int} order);\par
149 \par
158 {\cf18 void} list_keys_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines, {\cf18 int} order);\par
159 \par
168 {\cf18 void} save_txt_keys_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines, {\cf18 char} filename[]);\par
169 \par
178 {\cf18 void} load_txt_keys_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines, {\cf18 char} filename[]);\par
179 \par
188 {\cf18 void} save_bin_keys_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines, {\cf18 char} filename[]);\par
189 \par
198 {\cf18 void} load_bin_keys_char({\cf18 char} **matrix_kpub, {\cf18 char} **matrix_kpriv, {\cf18 char} **matrix_kcod, {\cf18 int} lines, {\cf18 char} filename[]);\par
199 \par
200 {\cf21 #endif }{\cf20 //AED1_LP1_2223_PROJ_TESTS_AED1_LP1_2223_PROJ_PART1_CH_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro lib_projeto/aed1_lp1_2223_proj_part1_ints.h\par \pard\plain 
{\tc\tcl2 \v lib_projeto/aed1_lp1_2223_proj_part1_ints.h}
{\xe \v lib_projeto/aed1_lp1_2223_proj_part1_ints.h}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b new_public_key_int} (void)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short * {\b key_long_2_digits_int} (unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b key_digits_2_long_int} (short *keydigits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b calc_private_key_int} (unsigned long long pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b calc_runlength_int} (unsigned long long privkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b private_key_from_runlength_int} (unsigned long long runlengthkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short ** {\b alloc_matrix_int} (int nlines, int ncolumns)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b store_key_int} (short **matrix, int lines, unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b exists_key_int} (short **matrix, int lines, unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b get_private_key_int} (short **matrix_kpub, short **matrix_kpriv, int lines, unsigned long long pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b get_runlength_int} (short **matrix_kpriv, short **matrix_kcod, int lines, unsigned long long privkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b delete_key_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, short pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_populate_public_keys_int} (short **matrix_kpub, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_compute_private_keys_int} (short **matrix_kpub, short **matrix_kpriv, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_compute_runlengths_int} (short **matrix_kpriv, short **matrix_kcod, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short ** {\b search_private_keys_int} (short **matrix_kpub, short **matrix_kpriv, int lines, unsigned long long partialpubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sort_matrix_int} (short **matrix, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sort_all_matrices_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b list_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_txt_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_txt_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_bin_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_bin_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, char filename[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v alloc_matrix_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:alloc_matrix_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short ** alloc_matrix_int (int  {\i nlines}, int  {\i ncolumns})}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Memory allocation for a int matrix with nlines and ncolumns {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nlines} \cell }{- number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ncolumns} \cell }{- number of columns \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
pointer to the allocated memory of the matrix \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 683                                                   \{\par
684     {\cf18 short} **matrix;\par
685     matrix = ({\cf18 short} **) calloc((nlines+1) * {\cf17 sizeof} ({\cf18 short} *), {\cf17 sizeof} ({\cf18 short} *));\par
686     {\cf19 for} ({\cf18 int} i = 0; i < nlines; ++i) \{\par
687         matrix[i] = ({\cf18 short} *) calloc(ncolumns * {\cf17 sizeof} ({\cf18 short}), {\cf17 sizeof} (short));\par
688         matrix[i][0] = 0;\par
689     \}\par
690     matrix[nlines] = ({\cf18 short} *) calloc(2 * {\cf17 sizeof} ({\cf18 short}), {\cf17 sizeof} (short));\par
691     matrix[nlines][0] = -1;\par
692     {\cf19 return} matrix;\par
693 \}\par
}
}
{\xe \v bulk_compute_private_keys_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:bulk_compute_private_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_compute_private_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically calculate, generate and store all private keys for the existing public keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 811                                                                                         \{\par
812     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
813     matrix_kpriv = ({\cf18 short} **) realloc(matrix_kpriv, lines * {\cf17 sizeof} ({\cf18 short} *));\par
814     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
815         {\cf20 //if(!matrix_kpriv[i] || matrix_kpriv[i][0] == 0)\{}\par
816         {\cf19 if}(matrix_kpriv[i][0] == 0 && matrix_kpriv[i][1] != -1)\{\par
817             val = calc_private_key_int(key_digits_2_long_int(matrix_kpub[i]));\par
818             matrix_kpriv[i] = ({\cf18 short} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (short ));\par
819             store_key_int(matrix_kpriv, lines, val);\par
820         \}\par
821         {\cf19 if}(matrix_kpriv[i][0] == -1)\{\par
822             val = calc_private_key_int(key_digits_2_long_int(matrix_kpub[i]));\par
823             matrix_kpriv[i] = ({\cf18 short} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (short ));\par
824             store_key_int(matrix_kpriv, lines, val);\par
825             matrix_kpriv[i+1] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
826             matrix_kpriv[i+1][0] = -1;\par
827         \}\par
828     \}\par
829 \}\par
}
}
{\xe \v bulk_compute_runlengths_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:bulk_compute_runlengths_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_compute_runlengths_int (short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically calculate and store all run-lengths for the existing private keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 831                                                                                       \{\par
832     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
833     matrix_kcod = ({\cf18 short} **) realloc(matrix_kcod, lines * {\cf17 sizeof} ({\cf18 short} *));\par
834     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
835         {\cf20 //if(!matrix_kcod[i] || matrix_kcod[i][0] == 0)\{}\par
836         {\cf19 if}(matrix_kcod[i][0] == 0 && matrix_kcod[i][1] != -1)\{\par
837             val = calc_runlength_int(key_digits_2_long_int(matrix_kpriv[i]));\par
838             matrix_kcod[i] = ({\cf18 short} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (short ));\par
839             store_key_int(matrix_kcod, lines, val);\par
840         \}\par
841         {\cf19 if}(matrix_kcod[i][0] == -1)\{\par
842             val = calc_runlength_int(key_digits_2_long_int(matrix_kpriv[i]));\par
843             matrix_kcod[i] = ({\cf18 short} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (short ));\par
844             store_key_int(matrix_kcod, lines, val);\par
845             matrix_kcod[i+1] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
846             matrix_kcod[i+1][0] = -1;\par
847         \}\par
848     \}\par
849 \}\par
}
}
{\xe \v bulk_populate_public_keys_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:bulk_populate_public_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_populate_public_keys_int (short **  {\i matrix_kpub}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically generate and save a given amount (<lines>) of public keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 792                                                                   \{\par
793     {\cf18 unsigned} {\cf18 long} {\cf18 long} r;\par
794     matrix_kpub = ({\cf18 short} **) realloc(matrix_kpub, (lines+1) * {\cf17 sizeof} ({\cf18 short} *));\par
795     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
796         {\cf19 if}(matrix_kpub[i][0] == 0 && matrix_kpub[i][1] != -1)\{\par
797             r = new_public_key_int();\par
798             matrix_kpub[i] = ({\cf18 short} *) calloc(numDigitsLong(r)+1, {\cf17 sizeof} (short ));\par
799             store_key_int(matrix_kpub, lines, r);\par
800         \}\par
801         {\cf19 if}(matrix_kpub[i][0] == -1)\{\par
802             r = new_public_key_int();\par
803             matrix_kpub[i] = ({\cf18 short} *) calloc(numDigitsLong(r)+1, {\cf17 sizeof} (short ));\par
804             store_key_int(matrix_kpub, lines, r);\par
805             matrix_kpub[i+1] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short}));\par
806             matrix_kpub[i][0] = -1;\par
807         \}\par
808     \}\par
809 \}\par
}
}
{\xe \v calc_private_key_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:calc_private_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long calc_private_key_int (unsigned long long  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the bipolar private key from a given public key (returns the bipolar private key). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which to calculate the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bipolar number representing the private key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 543                                                                   \{\par
544     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0;\par
545     {\cf18 short} *n;\par
546     {\cf18 int} digitos = numDigitsLong(pubkey*2), j = 0, changePos = 0;\par
547     {\cf18 short} *allD = key_long_2_digits_int(pubkey*2);\par
548     {\cf18 short} rightNum = allD[1], leftNum = allD[0];\par
549 \par
550     {\cf19 if}(bipolar_numberInt(allD) ==  0) {\cf19 return} key_digits_2_long_int(allD);\par
551     {\cf19 if}(pubkey <= 5)\{\par
552         rightNum = 0;\par
553         leftNum = 1;\par
554     \}\par
555     {\cf19 if}(digitos < 2) digitos = 2;\par
556     {\cf19 if} (pubkey == 0) {\cf19 return} 0;\par
557     n = ({\cf18 short} *) calloc(digitos, {\cf17 sizeof} ({\cf18 short}));\par
558 \par
559     {\cf18 unsigned} {\cf18 long} {\cf18 long} max_iterations = ({\cf18 unsigned} {\cf18 long} long) 18446744073709551615;\par
560     {\cf19 for} ({\cf18 int} i = 0; privKey < max_iterations; i++) \{\par
561         {\cf19 if} (leftNum == 9 && changePos == digitos - 1 && rightNum == 8) \{\par
562             digitos++;\par
563             n = NULL;\par
564             n = realloc(n, digitos * {\cf17 sizeof}({\cf18 int}));\par
565             changePos = 0;\par
566             leftNum = 1;\par
567             rightNum = 0;\par
568         \}\par
569         {\cf19 if} (rightNum == 9 && changePos == digitos - 1) \{\par
570             leftNum++;\par
571         \}\par
572         {\cf19 if} (changePos == digitos - 1) \{\par
573             changePos = 0;\par
574             {\cf19 if} (rightNum != 9) \{\par
575                 rightNum++;\par
576             \} {\cf19 else} \{\par
577                 rightNum = 0;\par
578             \}\par
579         \}\par
580         {\cf19 if} (leftNum == rightNum) \{\par
581             rightNum++;\par
582         \}\par
583         {\cf19 if} (j > changePos) \{\par
584             n[j] = rightNum;\par
585         \} {\cf19 else} \{\par
586             n[j] = leftNum;\par
587         \}\par
588         {\cf19 if}(j == digitos-1)\{\par
589             n[digitos] = -1;\par
590             privKey = key_digits_2_long_int(n);\par
591             {\cf20 //printf("PivKey = %llu\\n", privKey);}\par
592             {\cf19 if}(privKey > 1000000000000 || privKey < 0)\{\par
593                 n=NULL;\par
594                 free(n);\par
595                 {\cf19 return} 0;\par
596             \}\par
597             {\cf19 if}(privKey > pubkey && privKey%pubkey == 0)\{\par
598                 n=NULL;\par
599                 free(n);\par
600                 {\cf19 return} privKey;\par
601             \}\par
602             changePos++;\par
603             j = 0;\par
604 \par
605         \} {\cf19 else}\{\par
606             j++;\par
607         \}\par
608     \}\par
609     {\cf19 return} 0;\par
610 \}\par
}
}
{\xe \v calc_runlength_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:calc_runlength_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long calc_runlength_int (unsigned long long  {\i privkey})}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the run-length from a given private key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i privkey} \cell }{- private key for which to calculate the run-length \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
run-length number representing the private key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 612                                                                  \{\par
613     {\cf18 unsigned} {\cf18 long} {\cf18 long} codKey = 0;\par
614     {\cf18 int} runLessPos = 0, digits, pow = 1;\par
615     digits = numDigitsLong(privkey);\par
616     {\cf18 int} allD[digits], runLess[4];\par
617 \par
618     {\cf19 for} ({\cf18 int} i = 0; i < 6; ++i) \{\par
619         runLess[i] = 0;\par
620     \}\par
621     {\cf19 if}(privkey >= 10)\{\par
622         allDigitsLong(privkey, allD);\par
623         runLess[runLessPos+1] = 1;\par
624         runLess[runLessPos] = allD[digits-1];\par
625         {\cf19 for} ({\cf18 int} i = digits-1; i > 0; i--) \{\par
626             {\cf19 if}(allD[i] != allD[i-1])\{\par
627                 runLessPos += 2;\par
628                 runLess[runLessPos] = allD[i-1];\par
629             \}\par
630             runLess[runLessPos+1]++;\par
631         \}\par
632         {\cf19 for} ({\cf18 int} i = 1; i <= 4; i++) \{\par
633             {\cf19 if} ( i == 1)\{\par
634                 codKey = runLess[i-1];\par
635             \} {\cf19 else}\{\par
636                 {\cf19 if}(i%2 == 0)\{\par
637                     codKey *= 100;\par
638                     codKey += runLess[i-1];\par
639                     pow = 1;\par
640                 \} {\cf19 else} \{\par
641                     {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(runLess[i-1]); ++j) \{\par
642                         pow *= 10;\par
643                     \}\par
644                     codKey *= pow;\par
645                     codKey += runLess[i-1];\par
646                     pow = 1;\par
647                 \}\par
648             \}\par
649         \}\par
650         {\cf19 return} codKey;\par
651     \}\par
652     {\cf19 else}\{\par
653         {\cf19 return} 0;\par
654     \}\par
655 \}\par
}
}
{\xe \v delete_key_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:delete_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long delete_key_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, short  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Delete a given public key (and corresponding priv and runlength keys) from all matrices. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key to delete \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
pubkey that was deleted \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 758                                                                                                                           \{\par
759     {\cf18 int} exist = 0;\par
760     {\cf19 for} ({\cf18 int} i = 0; i < lines+1; ++i) \{\par
761         {\cf20 //if(!matrix_kpub[i] || matrix_kpub[i][0] == 0) continue;}\par
762         {\cf19 if}(matrix_kpub[i][0] == -1) {\cf19 break};\par
763         {\cf19 if}(key_digits_2_long_int(matrix_kpub[i]) == pubkey)\{\par
764             exist = 1;\par
765             {\cf19 for} ({\cf18 int} j = i; j < lines; ++j) \{\par
766                 {\cf19 if}(j == lines-1)\{\par
767                     matrix_kpub[j] = matrix_kpub[j+1];\par
768                     matrix_kpriv[j] = matrix_kpriv[j+1];\par
769                     matrix_kcod[j] = matrix_kcod[j+1];\par
770                     matrix_kpub[j+1] = NULL;\par
771                     matrix_kpriv[j+1] = NULL;\par
772                     matrix_kcod[j+1] = NULL;\par
773                     free(matrix_kpub[j+1]);\par
774                     free(matrix_kpriv[j+1]);\par
775                     free(matrix_kcod[j+1]);\par
776                     {\cf19 break};\par
777                 \}\par
778                 matrix_kpub[j] = matrix_kpub[j+1];\par
779                 matrix_kpriv[j] = matrix_kpriv[j+1];\par
780                 matrix_kcod[j] = matrix_kcod[j+1];\par
781             \}\par
782             lines--;\par
783         \}\par
784     \}\par
785     {\cf19 if}(exist == 0)\{\par
786         printf({\cf22 "Chave Nao Encontrada\\n"});\par
787         {\cf19 return} 0;\par
788     \}\par
789     {\cf19 return} pubkey;\par
790 \}\par
}
}
{\xe \v exists_key_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:exists_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int exists_key_int (short **  {\i matrix}, int  {\i lines}, unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verify if a given key exists in the matrix. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix with keys \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- key to check if it exists \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
1 if it exists, 0 if it doesn't \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 709                                                                      \{\par
710     {\cf18 short} *allD = key_long_2_digits_int(key);\par
711     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
712         {\cf20 /*if(!matrix[i][0])\{}\par
713 {\cf20             break;}\par
714 {\cf20         \}*/}\par
715         {\cf19 if}(key_digits_2_long_int(matrix[i]) == key_digits_2_long_int(allD))\{\par
716             allD = NULL;\par
717             free(allD);\par
718             {\cf19 return} 1;\par
719         \}\par
720         {\cf20 /*}\par
721 {\cf20         int j = 0;}\par
722 {\cf20         while (matrix[i][j] != -1)\{}\par
723 {\cf20             if(matrix[i][j] != allD[j])\{}\par
724 {\cf20                 break;}\par
725 {\cf20             \} else\{}\par
726 {\cf20                 if(matrix[i][j+1] == -1 && allD[j+1] == -1)\{}\par
727 {\cf20                     return 1;}\par
728 {\cf20                 \}}\par
729 {\cf20             \}}\par
730 {\cf20             j++;}\par
731 {\cf20         \}}\par
732 {\cf20         */}\par
733     \}\par
734     allD = NULL;\par
735     free(allD);\par
736     {\cf19 return} 0;\par
737 \}\par
}
}
{\xe \v get_private_key_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:get_private_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long get_private_key_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, int  {\i lines}, unsigned long long  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the private key corresponding to the given public key {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which we want the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key of the given pubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 739                                                                                                                        \{\par
740     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
741         {\cf19 if}(key_digits_2_long_int(matrix_kpub[i]) == pubkey)\{\par
742             {\cf19 return} key_digits_2_long_int(matrix_kpriv[i]);\par
743         \}\par
744     \}\par
745     {\cf19 return} 0;\par
746 \}\par
}
}
{\xe \v get_runlength_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:get_runlength_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long get_runlength_int (short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, unsigned long long  {\i privkey})}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the run-length key of a given private key {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which we want the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key runlength of the given pubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 748                                                                                                                       \{\par
749     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
750         {\cf19 if}(key_digits_2_long_int(matrix_kpriv[i]) == privkey)\{\par
751             {\cf19 return} key_digits_2_long_int(matrix_kcod[i]);\par
752         \}\par
753     \}\par
754     printf({\cf22 "Chave Nao Encontrada\\n"});\par
755     {\cf19 return} 0;\par
756 \}\par
}
}
{\xe \v key_digits_2_long_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:key_digits_2_long_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long key_digits_2_long_int (short *  {\i keydigits})}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Receives an array of digits and returns the long key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keydigits} \cell }{- array of digits of key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
address of array of digits for a given key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 516                                                           \{\par
517     {\cf18 int} i = 0, size = 0, pow = 10;\par
518     {\cf18 unsigned} {\cf18 long} {\cf18 long} pubKey = 0;\par
519 \par
520     {\cf19 while} (1)\{\par
521         {\cf19 if}(keydigits[i] < 0) {\cf19 break};\par
522         i++;\par
523         size++;\par
524     \}\par
525     {\cf19 if}(size == 0) {\cf19 return} 0;\par
526 \par
527     {\cf19 for} ({\cf18 int} j = 0; j < size; j++) \{\par
528         {\cf19 if}(j == 0)\{\par
529             pubKey = keydigits[j];\par
530         \} {\cf19 else}\{\par
531             {\cf19 if}(keydigits[j] == 0)\{\par
532                 pubKey *= pow;\par
533             \} {\cf19 else}\{\par
534                 pubKey *= pow;\par
535                 pubKey += keydigits[j];\par
536             \}\par
537         \}\par
538     \}\par
539 \par
540     {\cf19 return} pubKey;\par
541 \}\par
}
}
{\xe \v key_long_2_digits_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:key_long_2_digits_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short * key_long_2_digits_int (unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create an array of digits for a given key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- long key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
address of array of digits for a given key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 491                                                     \{\par
492     {\cf18 int} i = 0, s=0, hi = numDigitsLong(key)-1, size = (numDigitsLong(key)+1);\par
493     {\cf18 short} *keyDigits = ({\cf18 short} *) calloc(size * {\cf17 sizeof} ({\cf18 short}), {\cf17 sizeof} (short ));\par
494     {\cf18 short} temp = 0;\par
495     {\cf18 unsigned} {\cf18 long} {\cf18 long} tempKey = key;\par
496     {\cf19 if} (keyDigits == NULL) \{\par
497         printf({\cf22 "Erro no malloc\\n"});\par
498         {\cf19 return} 0;\par
499     \}\par
500     {\cf19 while} (tempKey)\{\par
501         keyDigits[i] = tempKey%10;\par
502         tempKey /= 10;\par
503         i++;\par
504     \}\par
505     {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(key); ++j) \{      {\cf20 // inverter o array (para guardar com a ordem normal da key)}\par
506         {\cf19 if}(hi <= j) {\cf19 break};\par
507         temp = keyDigits[j];\par
508         keyDigits[j] = keyDigits[hi];\par
509         keyDigits[hi] = temp;\par
510         hi--;\par
511     \}\par
512     keyDigits[size-1] = -1;\par
513     {\cf19 return} keyDigits;\par
514 \}\par
}
}
{\xe \v list_keys_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:list_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void list_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print all keys on the console, sorted by pubkeys sizes (i.e. number of digits). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 0 ? current order : order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 906                                                                                                         \{\par
907     {\cf20 //shellSortIntDigits(matrix_kpub, matrix_kpriv, matrix_kcod, lines, order);}\par
908     mergeDigits_int_sort_base(matrix_kpub, matrix_kpriv, matrix_kcod, lines, order);\par
909 \}\par
}
}
{\xe \v load_bin_keys_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:load_bin_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void load_bin_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loads data into the matrices from a binary file. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{-name of the binary file to load data from \cell }
{\row }
}
}}
{\xe \v load_txt_keys_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:load_txt_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void load_txt_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loads data into the matrices from a text file. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the text file to load data from \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 938                                                                                                                   \{\par
939 \par
940     FILE *fileChavesPubRead;\par
941     fileChavesPubRead = fopen(filename, {\cf22 "r"});\par
942     {\cf18 int} i = 0;\par
943     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0, codKey = 0, count = 1;\par
944     {\cf18 unsigned} {\cf18 long} {\cf18 long} *value = ({\cf18 unsigned} {\cf18 long} {\cf18 long} *) calloc(count, {\cf17 sizeof} ({\cf18 unsigned} {\cf18 long} {\cf18 long}));\par
945 \par
946     {\cf19 if}(fileChavesPubRead == NULL)\{\par
947         printf({\cf22 "Ficheiro nao existe\\n"});\par
948         {\cf19 return};\par
949     \}\par
950 \par
951     {\cf19 while} (fscanf (fileChavesPubRead, {\cf22 "%llu"}, &value[count-1]) == 1)\{\par
952         count++;\par
953         value = ({\cf18 unsigned} {\cf18 long} {\cf18 long} *) realloc(value, count * {\cf17 sizeof} ({\cf18 unsigned} {\cf18 long} {\cf18 long}));\par
954     \}\par
955 \par
956     {\cf19 while} (i <= lines && i < count/3)\{\par
957         privKey = calc_private_key_int(value[i]);\par
958         codKey = calc_runlength_int(privKey);\par
959         store_key_int(matrix_kpub, lines, value[i]);\par
960         store_key_int(matrix_kpriv, lines, privKey);\par
961         store_key_int(matrix_kcod, lines, codKey);\par
962         i++;\par
963     \}\par
964 \par
965     free(value);\par
966     fclose(fileChavesPubRead);\par
967 \}\par
}
}
{\xe \v new_public_key_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:new_public_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long new_public_key_int (void )}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generate a random integer to be used as the public key. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
random number representing a public key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 483                                            \{\par
484     {\cf18 unsigned} {\cf18 long} {\cf18 long} r = 0;\par
485     {\cf19 for} ({\cf18 int} i = 0; i < 1; ++i) \{\par
486         r = rand()%250;\par
487     \}\par
488     {\cf19 return} r;\par
489 \}\par
}
}
{\xe \v private_key_from_runlength_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:private_key_from_runlength_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long private_key_from_runlength_int (unsigned long long  {\i runlengthkey})}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the private key from a run-length. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i runlengthkey} \cell }{- run-length for which to calculate the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key that corresponds to the runlengthkey arg \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 657                                                                                   \{\par
658 \par
659     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0;\par
660     {\cf18 short} *allDigits, freq = 0, pow = 1;\par
661     allDigits = key_long_2_digits_int(runlengthkey);\par
662 \par
663     privKey = allDigits[0];\par
664     freq = allDigits[1] * 10;\par
665     freq += allDigits[2];\par
666     {\cf19 for} ({\cf18 int} i = 1; i < freq; ++i) \{\par
667         privKey *= 10;\par
668         privKey += allDigits[0];\par
669     \}\par
670 \par
671     privKey *= 10;\par
672     privKey += allDigits[3];\par
673     freq = allDigits[4] * 10;\par
674     freq += allDigits[5];\par
675     {\cf19 for} ({\cf18 int} i = 1; i < freq; ++i) \{\par
676         privKey *= 10;\par
677         privKey += allDigits[3];\par
678     \}\par
679 \par
680     {\cf19 return} privKey;\par
681 \}\par
}
}
{\xe \v save_bin_keys_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:save_bin_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_bin_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save all matrix data to a binary file {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the binary file where to store the data \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 969                                                                                                                   \{\par
970 \par
971     FILE *fileChavesPubWrite;\par
972     fileChavesPubWrite = fopen(filename, {\cf22 "a+b"});\par
973 \par
974     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
975         printf({\cf22 "Ficheiro nao existe\\n"});\par
976         {\cf19 return};\par
977     \}\par
978     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
979         {\cf19 if}(matrix_kpub[i][0] != -1)\{\par
980             {\cf18 char} *temp = malloc(numDigitsLong(key_digits_2_long_int(matrix_kpub[i])) * {\cf17 sizeof} ({\cf18 char}));\par
981             sprintf(temp, {\cf22 "%llu"}, key_digits_2_long_int(matrix_kpub[i]));\par
982             fwrite(temp, {\cf17 sizeof}({\cf18 char}), strlen(temp), fileChavesPubWrite);\par
983             fwrite({\cf22 "\\n"}, {\cf17 sizeof}({\cf18 char}), 1, fileChavesPubWrite);\par
984         \} {\cf19 else} {\cf19 break};\par
985         {\cf19 if}(matrix_kpriv[i][0] != -1)\{\par
986             {\cf18 char} *temp = malloc(numDigitsLong(key_digits_2_long_int(matrix_kpriv[i])) * {\cf17 sizeof} ({\cf18 char}));\par
987             sprintf(temp, {\cf22 "%llu"}, key_digits_2_long_int(matrix_kpriv[i]));\par
988             fwrite(temp, {\cf17 sizeof}({\cf18 char}), strlen(temp), fileChavesPubWrite);\par
989             fwrite({\cf22 "\\n"}, {\cf17 sizeof}({\cf18 char}), 1, fileChavesPubWrite);\par
990         \} {\cf19 else} {\cf19 break};\par
991         {\cf19 if}(matrix_kcod[i][0] != -1)\{\par
992             {\cf18 char} *temp = malloc(numDigitsLong(key_digits_2_long_int(matrix_kcod[i])) * {\cf17 sizeof} ({\cf18 char}));\par
993             sprintf(temp, {\cf22 "%llu"}, key_digits_2_long_int(matrix_kcod[i]));\par
994             fwrite(temp, {\cf17 sizeof}({\cf18 char}), strlen(temp),fileChavesPubWrite);\par
995             fwrite({\cf22 "\\n"}, {\cf17 sizeof}({\cf18 char}), 1, fileChavesPubWrite);\par
996         \} {\cf19 else} {\cf19 break};\par
997     \}\par
998 \par
999     fclose(fileChavesPubWrite);\par
1000 \}\par
}
}
{\xe \v save_txt_keys_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:save_txt_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_txt_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save all matrix data to a text file {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the text file where to store the data \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 911                                                                                                                   \{\par
912 \par
913     FILE *fileChavesPubWrite;\par
914     fileChavesPubWrite = fopen(filename, {\cf22 "a+"});\par
915 \par
916     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
917         printf({\cf22 "Ficheiro nao existe\\n"});\par
918         {\cf19 return};\par
919     \}\par
920     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
921         {\cf19 if}(matrix_kpub[i][0] != -1)\{\par
922             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(matrix_kpub[i]));\par
923             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
924         \} {\cf19 else} {\cf19 break};\par
925         {\cf19 if}(matrix_kpriv[i][0] != -1)\{\par
926             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(matrix_kpriv[i]));\par
927             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
928         \} {\cf19 else} {\cf19 break};\par
929         {\cf19 if}(matrix_kcod[i][0] != -1)\{\par
930             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(matrix_kcod[i]));\par
931             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
932         \} {\cf19 else} {\cf19 break};\par
933     \}\par
934 \par
935     fclose(fileChavesPubWrite);\par
936 \}\par
}
}
{\xe \v search_private_keys_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:search_private_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short ** search_private_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, int  {\i lines}, unsigned long long  {\i partialpubkey})}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a list of all private keys matching a given partial public key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i partialpubkey} \cell }{- part of public key to filter the private keys \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
array of private keys matching the partialpubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 851                                                                                                                        \{\par
852     {\cf18 short} **result = malloc({\cf17 sizeof} ({\cf18 short} *));\par
853     {\cf18 int} sizeResult = 0, posResult = 0;\par
854     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
855     {\cf18 short} * valArray = NULL, *partialKeyArray = ({\cf18 short} *) malloc(numDigitsLong(partialpubkey));\par
856     partialKeyArray = key_long_2_digits_int(partialpubkey);\par
857 \par
858     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
859         {\cf18 int} k = 0;\par
860         {\cf19 if}(matrix_kpub[i][0] == -1) {\cf19 break};\par
861         {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(key_digits_2_long_int(matrix_kpub[i])); ++j) \{\par
862             {\cf19 if}(matrix_kpub[i][j] == partialKeyArray[k])\{\par
863                 k++;\par
864             \} {\cf19 else}\{\par
865                 k = 0;\par
866             \}\par
867             {\cf19 if}(k == numDigitsLong(partialpubkey))\{\par
868                 sizeResult++;\par
869                 result = ({\cf18 short} **) realloc(result, (sizeResult+1) * {\cf17 sizeof} ({\cf18 short} *));\par
870                 val = get_private_key_int(matrix_kpub, matrix_kpriv, lines, key_digits_2_long_int(matrix_kpub[i]));\par
871                 valArray = ({\cf18 short} *) malloc(numDigitsLong(val) * {\cf17 sizeof} (short));\par
872                 valArray = key_long_2_digits_int(val);\par
873                 result[posResult] = ({\cf18 short} *) malloc(numDigitsLong(val) * {\cf17 sizeof} (short));\par
874                 {\cf19 for} ({\cf18 int} l = 0; l <= numDigitsLong(val); ++l) \{\par
875                     result[posResult][l] = valArray[l];\par
876                 \}\par
877                 posResult++;\par
878             \}\par
879         \}\par
880     \}\par
881 \par
882     result[posResult] = ({\cf18 short} *) malloc(1 * {\cf17 sizeof} ({\cf18 short}));\par
883     result[posResult][0] = -1;\par
884 \par
885     valArray = NULL;\par
886     free(valArray);\par
887     partialKeyArray = NULL;\par
888     free(partialKeyArray);\par
889     {\cf19 return} result;\par
890 \}\par
}
}
{\xe \v sort_all_matrices_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:sort_all_matrices_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sort_all_matrices_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sort all matrices keys in ascending or descending order {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 897                                                                                                                 \{\par
898     {\cf20 //shellSortInt(matrix_kpub, lines, order);}\par
899     {\cf20 //shellSortInt(matrix_kpriv, lines, order);}\par
900     {\cf20 //shellSortInt(matrix_kcod, lines, order);}\par
901     merge_int_sort_base(matrix_kpub, lines, order);\par
902     merge_int_sort_base(matrix_kpriv, lines, order);\par
903     merge_int_sort_base(matrix_kcod, lines, order);\par
904 \}\par
}
}
{\xe \v sort_matrix_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:sort_matrix_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sort_matrix_int (short **  {\i matrix}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sort a matrix keys in ascending or descending order {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix to be sorted \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 892                                                           \{\par
893     {\cf20 //shellSortInt(matrix, lines, order);}\par
894     merge_int_sort_base(matrix, lines, order);\par
895 \}\par
}
}
{\xe \v store_key_int\:aed1_lp1_2223_proj_part1_ints.h}
{\xe \v aed1_lp1_2223_proj_part1_ints.h\:store_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void store_key_int (short **  {\i matrix}, int  {\i lines}, unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Store a key (pub, priv or run-length) into the first available position of given matrix. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix to store the key \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- key to be stored \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 695                                                                      \{\par
696     {\cf18 short} *allD = key_long_2_digits_int(key);\par
697     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
698         {\cf19 if}(!matrix[i][0] && matrix[i][1] == -1) {\cf19 continue};   {\cf20 //Caso tenha um 0 mas seja mesmo um 0 e n\'E3o um valor NULL eu sei que \'E9 mesmo um 0 porque eu vejo se na pos 1 do array tem um -1 se tiver \'E9 mesmo um 0 se n\'E3o \'E9 uma pos vazia}\par
699         {\cf19 if}(!matrix[i][0] || matrix[i][0] == -1)\{\par
700             matrix[i] = ({\cf18 short} *) calloc(numDigitsLong(key)+1, {\cf17 sizeof} (short));\par
701             matrix[i] = allD;\par
702             {\cf19 break};\par
703         \}\par
704     \}\par
705     allD = NULL;\par
706     free(allD);\par
707 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aed1_lp1_2223_proj_part1_ints.h\par \pard\plain 
{\tc\tcl2 \v lib_projeto/aed1_lp1_2223_proj_part1_ints.h}
{\xe \v lib_projeto/aed1_lp1_2223_proj_part1_ints.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Ir para a documenta\'E7\'E3o deste ficheiro.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //}\par
2 {\cf20 // AED1 & LP1 2022-2023 (PART 1)}\par
3 {\cf20 //}\par
4 \par
5 {\cf21 #ifndef AED1_LP1_2223_PROJ_TESTS_AED1_LP1_2223_PROJ_PART1_H}\par
6 {\cf21 #define AED1_LP1_2223_PROJ_TESTS_AED1_LP1_2223_PROJ_PART1_H}\par
7 \par
12 {\cf18 unsigned} {\cf18 long} {\cf18 long} new_public_key_int({\cf18 void});\par
13 \par
19 {\cf18 short}* key_long_2_digits_int({\cf18 unsigned} {\cf18 long} {\cf18 long} key);\par
20 \par
26 {\cf18 unsigned} {\cf18 long} {\cf18 long} key_digits_2_long_int({\cf18 short}* keydigits);\par
27 \par
33 {\cf18 unsigned} {\cf18 long} {\cf18 long} calc_private_key_int({\cf18 unsigned} {\cf18 long} {\cf18 long} pubkey);\par
34 \par
40 {\cf18 unsigned} {\cf18 long} {\cf18 long} calc_runlength_int({\cf18 unsigned} {\cf18 long} {\cf18 long} privkey);\par
41 \par
47 {\cf18 unsigned} {\cf18 long} {\cf18 long} private_key_from_runlength_int({\cf18 unsigned} {\cf18 long} {\cf18 long} runlengthkey);\par
48 \par
55 {\cf18 short}** alloc_matrix_int({\cf18 int} nlines, {\cf18 int} ncolumns);\par
56 \par
63 {\cf18 void} store_key_int({\cf18 short} **matrix, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} key);\par
64 \par
72 {\cf18 int} exists_key_int({\cf18 short} **matrix, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} key);\par
73 \par
82 {\cf18 unsigned} {\cf18 long} {\cf18 long} get_private_key_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} pubkey);\par
83 \par
92 {\cf18 unsigned} {\cf18 long} {\cf18 long} get_runlength_int({\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} privkey);\par
93 \par
103 {\cf18 unsigned} {\cf18 long} {\cf18 long} delete_key_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines, {\cf18 short} pubkey);\par
104 \par
110 {\cf18 void} bulk_populate_public_keys_int({\cf18 short} **matrix_kpub, {\cf18 int} lines);\par
111 \par
118 {\cf18 void} bulk_compute_private_keys_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 int} lines);\par
119 \par
126 {\cf18 void} bulk_compute_runlengths_int({\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines);\par
127 \par
136 {\cf18 short}** search_private_keys_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 int} lines, {\cf18 unsigned} {\cf18 long} {\cf18 long} partialpubkey);\par
137 \par
144 {\cf18 void} sort_matrix_int({\cf18 short} **matrix, {\cf18 int} lines, {\cf18 int} order);\par
145 \par
154 {\cf18 void} sort_all_matrices_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines, {\cf18 int} order);\par
155 \par
164 {\cf18 void} list_keys_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines, {\cf18 int} order);\par
165 \par
174 {\cf18 void} save_txt_keys_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines, {\cf18 char} filename[]);\par
175 \par
184 {\cf18 void} load_txt_keys_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines, {\cf18 char} filename[]);\par
185 \par
194 {\cf18 void} save_bin_keys_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines, {\cf18 char} filename[]);\par
195 \par
204 {\cf18 void} load_bin_keys_int({\cf18 short} **matrix_kpub, {\cf18 short} **matrix_kpriv, {\cf18 short} **matrix_kcod, {\cf18 int} lines, {\cf18 char} filename[]);\par
205 \par
206 {\cf21 #endif }{\cf20 //AED1_LP1_2223_PROJ_TESTS_AED1_LP1_2223_PROJ_PART1_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro lib_projeto/projeto.c\par \pard\plain 
{\tc\tcl2 \v lib_projeto/projeto.c}
{\xe \v lib_projeto/projeto.c}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "projeto.h"}\par
{\f2 #include "aed1_lp1_2223_proj_part1_chars.h"}\par
{\f2 #include "aed1_lp1_2223_proj_part1_ints.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b key_long_2_digits_char} (unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b key_digits_2_long_char} (char *keydigits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b calc_private_key_char} (unsigned long long pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b calc_runlength_char} (unsigned long long privkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b private_key_from_runlength_char} (unsigned long long runlengthkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b alloc_matrix_char} (int nlines, int ncolumns)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b store_key_char} (char **matrix, int lines, unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b exists_key_char} (char **matrix, int lines, unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b get_private_key_char} (char **matrix_kpub, char **matrix_kpriv, int lines, unsigned long long pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b get_runlength_char} (char **matrix_kpriv, char **matrix_kcod, int lines, unsigned long long privkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b delete_key_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char *pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_populate_public_keys_char} (char **matrix_kpub, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_compute_private_keys_char} (char **matrix_kpub, char **matrix_kpriv, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_compute_runlengths_char} (char **matrix_kpriv, char **matrix_kcod, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b search_private_keys_char} (char **matrix_kpub, char **matrix_kpriv, int lines, unsigned long long partialpubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sort_matrix_char} (char **matrix, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sort_all_matrices_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b list_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_txt_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_txt_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_bin_keys_char} (char **matrix_kpub, char **matrix_kpriv, char **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b new_public_key_int} (void)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short * {\b key_long_2_digits_int} (unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b key_digits_2_long_int} (short *keydigits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b calc_private_key_int} (unsigned long long pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b calc_runlength_int} (unsigned long long privkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b private_key_from_runlength_int} (unsigned long long runlengthkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short ** {\b alloc_matrix_int} (int nlines, int ncolumns)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b store_key_int} (short **matrix, int lines, unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b exists_key_int} (short **matrix, int lines, unsigned long long key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b get_private_key_int} (short **matrix_kpub, short **matrix_kpriv, int lines, unsigned long long pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b get_runlength_int} (short **matrix_kpriv, short **matrix_kcod, int lines, unsigned long long privkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long long {\b delete_key_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, short pubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_populate_public_keys_int} (short **matrix_kpub, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_compute_private_keys_int} (short **matrix_kpub, short **matrix_kpriv, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b bulk_compute_runlengths_int} (short **matrix_kpriv, short **matrix_kcod, int lines)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short ** {\b search_private_keys_int} (short **matrix_kpub, short **matrix_kpriv, int lines, unsigned long long partialpubkey)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sort_matrix_int} (short **matrix, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sort_all_matrices_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b list_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_txt_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_txt_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_bin_keys_int} (short **matrix_kpub, short **matrix_kpriv, short **matrix_kcod, int lines, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insert_keyHolder} ({\b KEY_HOLDER} **portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b edit_keyHolder} ({\b KEY_HOLDER} **portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts, int keyHolderPos, int keyPosChange, int newKeyPos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remove_keyHolder} ({\b KEY_HOLDER} **portaChaves, int keyHolderPos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b searchSingleKey_inKeyHolder} ({\b KEY_HOLDER} *portaChaves, int keyHolderPos, unsigned long long keyToSeach, int type, char *filename)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_txt_keyHolder} ({\b KEY_HOLDER} **portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts, int keyHolderPos, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_txt_keyHolder} ({\b KEY_HOLDER} **portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts, int keyHolderPos, int newKeysPos, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print_keyHolders} ({\b KEY_HOLDER} **portaChaves)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b create_utilizador_ordenado} ({\b UTILIZADORES_QUEUE} *queue, {\b UTILIZADORES} **utilizadores, char *name, char *email, {\b KEY_HOLDER} *key_holder_list, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b create_utilizador_cauda} ({\b UTILIZADORES_QUEUE} *queue, {\b UTILIZADORES} **utilizadores, char *name, char *email, {\b KEY_HOLDER} *key_holder_list, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b create_utilizador_cabeca} ({\b UTILIZADORES_QUEUE} *queue, {\b UTILIZADORES} **utilizadores, char *name, char *email, {\b KEY_HOLDER} *key_holder_list, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b enqueue} ({\b UTILIZADORES_QUEUE} *queue, {\b UTILIZADORES} *utilizador)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b dequeue} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print_utilizadores} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remover_nome_utilizador} ({\b UTILIZADORES_QUEUE} *queue, char *name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remover_cabeca_utilizador} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remover_cauda_utilizador} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b search_utilizador_by_name} ({\b UTILIZADORES_QUEUE} *queue, char *name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ordenar_utilizadores} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freeMatrixChar} (char **matrix, int N)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freeMatrixShort} (short **matrix, int N)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bipolar_numberInt} (short text[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b find_mul_bipolar_number} (char *k)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b find_mul_bipolar_number_Int} (int k)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numDigits} (int num)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numDigitsLong} (unsigned long long num)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b allDigits} (int num, int allD[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b allDigitsLong} (unsigned long long num, int allD[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b randomKeyFile} (FILE *fileChavesPubWrite, char *fileName, int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b randomKeyMatrix} (char **r, int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b randomKeyValue} (char *r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
short {\b randomKeyValueShort} (short r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b charPos} (char *a, int d)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shellSortChar} (char **a, int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shellSortCharDigits} (char **a, char **priv, char **cod, int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b swapCharDigits} (char **a, char **priv, char **cod, int i, int min)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b swapChar} (char **a, int i, int min)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shellSortInt} (short **a, int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shellSortIntDigits} (short **a, short **priv, short **cod, int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b swapIntDigits} (short **a, short **priv, short **cod, int i, int min)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b swapInt} (short **a, int i, int min)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_char_sort_base} (char *a[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_char} (char *a[], char *aux[], int lo, int mid, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_char_sort_recursive_basic} (char *a[], char *aux[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_char_sort_recursive_cutoff} (char *a[], char *aux[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertionSort_char} (char *a[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_char_sort_base} (char *a[], char *priv[], char *cod[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_char} (char *a[], char *aux[], char *priv[], char *cod[], char *auxPriv[], char *auxCod[], int lo, int mid, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_char_sort_recursive_basic} (char *a[], char *aux[], char *priv[], char *cod[], char *auxPriv[], char *auxCod[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_char_sort_recursive_cutoff} (char *a[], char *aux[], char *priv[], char *cod[], char *auxPriv[], char *auxCod[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertionSortDigits_char} (char *a[], char *priv[], char *cod[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_int_sort_base} (short *a[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_int} (short *a[], short *aux[], int lo, int mid, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_int_sort_recursive_basic} (short *a[], short *aux[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_int_sort_recursive_cutoff} (short *a[], short *aux[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertionSort_int} (short *a[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_int_sort_base} (short *a[], short *priv[], short *cod[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_int} (short *a[], short *aux[], short *priv[], short *cod[], short *auxPriv[], short *auxCod[], int lo, int mid, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_int_sort_recursive_basic} (short *a[], short *aux[], short *priv[], short *cod[], short *auxPriv[], short *auxCod[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_int_sort_recursive_cutoff} (short *a[], short *aux[], short *priv[], short *cod[], short *auxPriv[], short *auxCod[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertionSortDigits_int} (short *a[], short *priv[], short *cod[], int N, int order)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v allDigits\:projeto.c}
{\xe \v projeto.c\:allDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void allDigits (int  {\i num}, int  {\i allD}[])}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai dividir um n\'FAmero (int) por digitos e armazenar os mesmos num array {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{n\'FAmero a ser dividido em digitos \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i allD} \cell }{aray com todos os digitos de num \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2184                                    \{\par
2185     {\cf18 int} i = 0;\par
2186     {\cf19 while} (num)\{\par
2187         allD[i] = num%10;\par
2188         num /= 10;\par
2189         i++;\par
2190     \}\par
2191 \}\par
}
}
{\xe \v allDigitsLong\:projeto.c}
{\xe \v projeto.c\:allDigitsLong}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void allDigitsLong (unsigned long long  {\i num}, int  {\i allD}[])}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai dividir um n\'FAmero (unsigned long long) por digitos e armazenar os mesmos num array {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{n\'FAmero a ser dividido em digitos \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i allD} \cell }{aray com todos os digitos de num \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2198                                                       \{\par
2199     {\cf18 int} i = 0;\par
2200     {\cf19 while} (num)\{\par
2201         allD[i] = num%10;\par
2202         num /= 10;\par
2203         i++;\par
2204     \}\par
2205 \}\par
}
}
{\xe \v alloc_matrix_char\:projeto.c}
{\xe \v projeto.c\:alloc_matrix_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char ** alloc_matrix_char (int  {\i nlines}, int  {\i ncolumns})}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Memory allocation for a char matrix with nlines and ncolumns {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nlines} \cell }{- number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ncolumns} \cell }{- number of columns \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
pointer to the allocated memory of the matrix \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 167                                                   \{\par
168     {\cf18 char} **matrix;\par
169     matrix = ({\cf18 char} **) calloc((nlines+1) * {\cf17 sizeof} ({\cf18 char} *), {\cf17 sizeof} ({\cf18 char} *));\par
170     {\cf19 for} ({\cf18 int} i = 0; i < nlines; ++i) \{\par
171         matrix[i] = ({\cf18 char} *) calloc(ncolumns * {\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));\par
172     \}\par
173     matrix[nlines] = ({\cf18 char} *) calloc(3 * {\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));   {\cf20 // Linha que vai ser usada para saber o fim da matriz}\par
174     strcpy(matrix[nlines], {\cf22 "-1"});\par
175     {\cf19 return} matrix;\par
176 \}\par
}
}
{\xe \v alloc_matrix_int\:projeto.c}
{\xe \v projeto.c\:alloc_matrix_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short ** alloc_matrix_int (int  {\i nlines}, int  {\i ncolumns})}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Memory allocation for a int matrix with nlines and ncolumns {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nlines} \cell }{- number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ncolumns} \cell }{- number of columns \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
pointer to the allocated memory of the matrix \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 683                                                   \{\par
684     {\cf18 short} **matrix;\par
685     matrix = ({\cf18 short} **) calloc((nlines+1) * {\cf17 sizeof} ({\cf18 short} *), {\cf17 sizeof} ({\cf18 short} *));\par
686     {\cf19 for} ({\cf18 int} i = 0; i < nlines; ++i) \{\par
687         matrix[i] = ({\cf18 short} *) calloc(ncolumns * {\cf17 sizeof} ({\cf18 short}), {\cf17 sizeof} (short));\par
688         matrix[i][0] = 0;\par
689     \}\par
690     matrix[nlines] = ({\cf18 short} *) calloc(2 * {\cf17 sizeof} ({\cf18 short}), {\cf17 sizeof} (short));\par
691     matrix[nlines][0] = -1;\par
692     {\cf19 return} matrix;\par
693 \}\par
}
}
{\xe \v bipolar_numberInt\:projeto.c}
{\xe \v projeto.c\:bipolar_numberInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int bipolar_numberInt (short  {\i text}[])}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai verificar se um dado numero \'E9 bipolar {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i text} \cell }{array com os v\'E1rios digitos do numero \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 se for bipolar / -1 se n\'E3o for bipolar \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2019                                    \{\par
2020 \par
2021     {\cf18 int} bipolar = 0, changes = 0, exits = 0;\par
2022     {\cf18 int} number, pow, digits = 0;\par
2023 \par
2024     {\cf19 for} ({\cf18 int} i = 0; text[i+1] != -1; ++i) \{\par
2025         {\cf19 if}(text[i] != text[i+1])\{\par
2026             changes++;\par
2027         \}\par
2028     \}\par
2029     {\cf20 //changes--;}\par
2030     {\cf19 if}(changes == 1)\{\par
2031         {\cf19 return} 0;\par
2032     \}\par
2033     {\cf19 else}\{\par
2034         {\cf19 return} -1;\par
2035     \}\par
2036 \}\par
}
}
{\xe \v bulk_compute_private_keys_char\:projeto.c}
{\xe \v projeto.c\:bulk_compute_private_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_compute_private_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically calculate, generate and store all private keys for the existing public keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 299                                                                                        \{\par
300     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
301     matrix_kpriv = ({\cf18 char} **) realloc(matrix_kpriv, (lines+1) * {\cf17 sizeof} ({\cf18 char}*));\par
302     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
303         {\cf19 if}(strcmp(matrix_kpriv[i], {\cf22 "\\0"}) == 0)\{     {\cf20 // se o valor for vazio}\par
304             val = calc_private_key_char(atoll(matrix_kpub[i]));     {\cf20 // calcula a privKey}\par
305             matrix_kpriv[i] = ({\cf18 char} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (char));\par
306             store_key_char(matrix_kpriv, lines, val);           {\cf20 // guarda na matriz privada}\par
307         \}\par
308         {\cf19 if}(strcmp(matrix_kpriv[i], {\cf22 "-1"}) == 0)\{     {\cf20 // se estivermos na ultima linha da matriz}\par
309             val = calc_private_key_char(atoll(matrix_kpub[i]));     {\cf20 // calcula a privKey}\par
310             matrix_kpriv[i] = ({\cf18 char} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (char));\par
311             store_key_char(matrix_kpriv, lines, val);           {\cf20 // guarda ana matriz de privadas}\par
312             matrix_kpriv[i+1] = ({\cf18 char} *) calloc(3 * {\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));\par
313             strcpy(matrix_kpriv[i+1], {\cf22 "-1"});                    {\cf20 // atualizamos a posi\'E7\'E3o do -1}\par
314         \}\par
315     \}\par
316 \}\par
}
}
{\xe \v bulk_compute_private_keys_int\:projeto.c}
{\xe \v projeto.c\:bulk_compute_private_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_compute_private_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically calculate, generate and store all private keys for the existing public keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 811                                                                                         \{\par
812     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
813     matrix_kpriv = ({\cf18 short} **) realloc(matrix_kpriv, lines * {\cf17 sizeof} ({\cf18 short} *));\par
814     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
815         {\cf20 //if(!matrix_kpriv[i] || matrix_kpriv[i][0] == 0)\{}\par
816         {\cf19 if}(matrix_kpriv[i][0] == 0 && matrix_kpriv[i][1] != -1)\{\par
817             val = calc_private_key_int(key_digits_2_long_int(matrix_kpub[i]));\par
818             matrix_kpriv[i] = ({\cf18 short} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (short ));\par
819             store_key_int(matrix_kpriv, lines, val);\par
820         \}\par
821         {\cf19 if}(matrix_kpriv[i][0] == -1)\{\par
822             val = calc_private_key_int(key_digits_2_long_int(matrix_kpub[i]));\par
823             matrix_kpriv[i] = ({\cf18 short} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (short ));\par
824             store_key_int(matrix_kpriv, lines, val);\par
825             matrix_kpriv[i+1] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
826             matrix_kpriv[i+1][0] = -1;\par
827         \}\par
828     \}\par
829 \}\par
}
}
{\xe \v bulk_compute_runlengths_char\:projeto.c}
{\xe \v projeto.c\:bulk_compute_runlengths_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_compute_runlengths_char (char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically calculate and store all run-lengths for the existing private keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 318                                                                                      \{\par
319     {\cf18 unsigned} {\cf18 long} {\cf18 long} val;\par
320     matrix_kcod = ({\cf18 char} **) realloc(matrix_kcod, (lines+1) * {\cf17 sizeof} ({\cf18 char}*));\par
321     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
322         {\cf19 if}(strcmp(matrix_kcod[i], {\cf22 "\\0"}) == 0)\{      {\cf20 // se a posi\'E7\'E3o estiver vazia}\par
323             val = calc_runlength_char(atoll(matrix_kpriv[i]));  {\cf20 // calcula a runLength}\par
324             matrix_kcod[i] = ({\cf18 char} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (char));\par
325             store_key_char(matrix_kcod, lines, val);        {\cf20 // guarda na matriz}\par
326         \}\par
327         {\cf19 if}(strcmp(matrix_kcod[i], {\cf22 "-1"}) == 0)\{     {\cf20 // se estiver na ultima linha da matriz}\par
328             val = calc_runlength_char(atoll(matrix_kpriv[i]));  {\cf20 // calcula o runLength}\par
329             matrix_kcod[i] = ({\cf18 char} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (char));\par
330             store_key_char(matrix_kcod, lines, val);        {\cf20 // guarda na matriz}\par
331             matrix_kcod[i+1] = ({\cf18 char} *) calloc(3 * {\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));\par
332             strcpy(matrix_kcod[i+1], {\cf22 "-1"});                 {\cf20 // atualiza a pos do -1}\par
333         \}\par
334     \}\par
335 \}\par
}
}
{\xe \v bulk_compute_runlengths_int\:projeto.c}
{\xe \v projeto.c\:bulk_compute_runlengths_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_compute_runlengths_int (short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically calculate and store all run-lengths for the existing private keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 831                                                                                       \{\par
832     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
833     matrix_kcod = ({\cf18 short} **) realloc(matrix_kcod, lines * {\cf17 sizeof} ({\cf18 short} *));\par
834     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
835         {\cf20 //if(!matrix_kcod[i] || matrix_kcod[i][0] == 0)\{}\par
836         {\cf19 if}(matrix_kcod[i][0] == 0 && matrix_kcod[i][1] != -1)\{\par
837             val = calc_runlength_int(key_digits_2_long_int(matrix_kpriv[i]));\par
838             matrix_kcod[i] = ({\cf18 short} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (short ));\par
839             store_key_int(matrix_kcod, lines, val);\par
840         \}\par
841         {\cf19 if}(matrix_kcod[i][0] == -1)\{\par
842             val = calc_runlength_int(key_digits_2_long_int(matrix_kpriv[i]));\par
843             matrix_kcod[i] = ({\cf18 short} *) calloc(numDigitsLong(val)+1, {\cf17 sizeof} (short ));\par
844             store_key_int(matrix_kcod, lines, val);\par
845             matrix_kcod[i+1] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
846             matrix_kcod[i+1][0] = -1;\par
847         \}\par
848     \}\par
849 \}\par
}
}
{\xe \v bulk_populate_public_keys_char\:projeto.c}
{\xe \v projeto.c\:bulk_populate_public_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_populate_public_keys_char (char **  {\i matrix_kpub}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically generate and save a given amount (<lines>) of public keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 272                                                                   \{\par
273     {\cf18 unsigned} {\cf18 long} {\cf18 long} r;\par
274     matrix_kpub = ({\cf18 char} **) realloc(matrix_kpub, (lines+1) * {\cf17 sizeof} ({\cf18 char}*));\par
275     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
276         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "\\0"}) == 0)\{      {\cf20 // Se a linha estiver vazia}\par
277             r = new_public_key_int();               {\cf20 // gerar numero aleatorio}\par
278             {\cf18 char}* rString = malloc(numDigitsLong(r)+1 * {\cf17 sizeof} ({\cf18 char}));\par
279             sprintf(rString, {\cf22 "%llu"}, r);\par
280             matrix_kpub[i] = ({\cf18 char} *) calloc(strlen(rString)+1, {\cf17 sizeof} (char));\par
281             store_key_char(matrix_kpub, lines, r);  {\cf20 // meter o valor aleatorio na matriz}\par
282             rString=NULL;\par
283             free(rString);\par
284         \}\par
285         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) == 0)\{      {\cf20 // Se estivermos na ultima linha da matriz}\par
286             r = new_public_key_int();               {\cf20 // geramos o numero aleatorio}\par
287             {\cf18 char}* rString = malloc(numDigitsLong(r)+1 * {\cf17 sizeof} ({\cf18 char}));\par
288             sprintf(rString, {\cf22 "%llu"}, r);\par
289             matrix_kpub[i] = ({\cf18 char} *) calloc(strlen(rString)+1, {\cf17 sizeof} (char));\par
290             store_key_char(matrix_kpub, lines, r);  {\cf20 // colocamos o numero aleatorio na matriz}\par
291             matrix_kpub[i+1] = ({\cf18 char} *) calloc(3*{\cf17 sizeof} ({\cf18 char}), {\cf17 sizeof} (char));\par
292             strcpy(matrix_kpub[i+1], {\cf22 "-1"});         {\cf20 // atualizamos a posi\'E7\'E3o do -1 para a prox}\par
293             rString=NULL;\par
294             free(rString);\par
295         \}\par
296     \}\par
297 \}\par
}
}
{\xe \v bulk_populate_public_keys_int\:projeto.c}
{\xe \v projeto.c\:bulk_populate_public_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void bulk_populate_public_keys_int (short **  {\i matrix_kpub}, int  {\i lines})}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Automatically generate and save a given amount (<lines>) of public keys. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 792                                                                   \{\par
793     {\cf18 unsigned} {\cf18 long} {\cf18 long} r;\par
794     matrix_kpub = ({\cf18 short} **) realloc(matrix_kpub, (lines+1) * {\cf17 sizeof} ({\cf18 short} *));\par
795     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
796         {\cf19 if}(matrix_kpub[i][0] == 0 && matrix_kpub[i][1] != -1)\{\par
797             r = new_public_key_int();\par
798             matrix_kpub[i] = ({\cf18 short} *) calloc(numDigitsLong(r)+1, {\cf17 sizeof} (short ));\par
799             store_key_int(matrix_kpub, lines, r);\par
800         \}\par
801         {\cf19 if}(matrix_kpub[i][0] == -1)\{\par
802             r = new_public_key_int();\par
803             matrix_kpub[i] = ({\cf18 short} *) calloc(numDigitsLong(r)+1, {\cf17 sizeof} (short ));\par
804             store_key_int(matrix_kpub, lines, r);\par
805             matrix_kpub[i+1] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short}));\par
806             matrix_kpub[i][0] = -1;\par
807         \}\par
808     \}\par
809 \}\par
}
}
{\xe \v calc_private_key_char\:projeto.c}
{\xe \v projeto.c\:calc_private_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long calc_private_key_char (unsigned long long  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the bipolar private key from a given public key (returns the bipolar private key). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which to calculate the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bipolar number representing the private key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 23                                                                    \{\par
24     {\cf18 char} *n;                                                                    {\cf20 //Apontador que vai receber cada digito para formar um n\'FAmero}\par
25     {\cf18 int} digitos = numDigitsLong(pubkey*2), j = 0, changePos = 0, numDigits = 2;                       {\cf20 //digitos = 2 pois o primeiro n\'FAmnero a ser criado vai ter 2 digitos / j = 0 vai ser usado para comparar o n\'FAmero de digitos atual}\par
26                                                                                 {\cf20 //changePos = 0 vai ser a vari\'E1vel usada para sabermos quando parar de converter n\'FAmeros \'E0 direita}\par
27     {\cf18 short} *allD = key_long_2_digits_int(pubkey*2);\par
28     {\cf18 char} rightNum = allD[1]+{\cf23 '0'}, leftNum = allD[0]+{\cf23 '0'};                     {\cf20 //rightNum -> n\'FAmero a inserir \'E0 direita come\'E7a em 0 -> ++ / leftNum -> n\'FAmero a inserir \'E0 esquerda come\'E7a em 1 -> ++}\par
29 \par
30     {\cf19 if}(bipolar_numberInt(allD) ==  0) {\cf19 return} key_digits_2_long_int(allD);\par
31     {\cf19 if}(pubkey <= 5)\{\par
32         rightNum = {\cf23 '0'};\par
33         leftNum = {\cf23 '1'};\par
34     \}\par
35     {\cf19 if}(digitos < 2) digitos = 2;\par
36     {\cf19 if}(pubkey == 0) {\cf19 return} 0;\par
37     n = ({\cf18 char} *) calloc(digitos, {\cf17 sizeof} ({\cf18 char}));    {\cf20 //Alocar mem\'F3ria para n}\par
38 \par
39     {\cf18 unsigned} {\cf18 long} {\cf18 long} max_iterations = ({\cf18 unsigned} {\cf18 long} long) 18446744073709551615;\par
40     {\cf19 for} ({\cf18 int} i = 0; atoll(n) < max_iterations; i++) \{\par
41         {\cf19 if}(leftNum == {\cf23 '9'} && changePos == digitos -1 && rightNum == {\cf23 '8'})\{       {\cf20 //Se o leftNum = 9 e a changePos = limite de digitos e rightNum = 8 temos (98, 988, 9888) ent\'E3o}\par
42             digitos++;                                                          {\cf20 //Chegamos ao ultimo n\'FAmero gerado bipolar com este n\'FAemro de digito ent\'E3o incrementamos o n\'FAmero de digitos}\par
43             n = NULL;\par
44             n = ({\cf18 char} *) realloc(n, digitos);                  {\cf20 //realocar mem\'F3ria para n com o novo n\'FAmero de digitos}\par
45             changePos = 0;                                                        {\cf20 //diminuir a changePos}\par
46             leftNum = {\cf23 '1'};                                                      {\cf20 //Resetar o valor de leftNum e de rigthNum}\par
47             rightNum = {\cf23 '0'};\par
48         \}\par
49         {\cf19 if}(rightNum == {\cf23 '9'} && changePos == digitos -1)\{                         {\cf20 //Se rigthNum = 9 e changePos = limite de digitos do n\'FAmero menos o primeiro digito ent\'E3o}\par
50             leftNum++;                                                          {\cf20 //aumentamos o valor de leftNum pois chegamos ao maior valor para este leftNum (19 -> 20, 1999 -> 2000, 19999 -> 20000)}\par
51         \}\par
52         {\cf19 if}(changePos == digitos -1)\{                                            {\cf20 //Se changePos = limite de digitos do n\'FAmero ent\'E3o}\par
53             changePos = 0;                                                      {\cf20 //Resetar a changePos pois chegamos \'E0 ultima posi\'E7\'E3o para este valor de rightNum (1112 -> 1122 -> 1222 -> 1113)}\par
54             {\cf19 if}(rightNum != {\cf23 '9'})\{                                                {\cf20 //Se rightNum != 9 incrementamos o rightNum}\par
55                 rightNum++;\par
56             \} {\cf19 else}\{                                                             {\cf20 //Se rigthNum = 9 ent\'E3o resetamos o valor de rigthNum}\par
57                 rightNum = {\cf23 '0'};\par
58             \}\par
59         \}\par
60         {\cf19 if}(leftNum == rightNum)\{                                                {\cf20 //Se leftNum = rigthNum ent\'E3o podemos dar skip a estes valores pois (1111, 2222, 3333) n\'E3o s\'E3o bipolares}\par
61             rightNum++;\par
62         \}\par
63         {\cf19 if}(j > changePos)\{                                                      {\cf20 //Se a posi\'E7\'E3o do digito a ser mudado atualmente for maior que changePos ent\'E3o}\par
64             n[j] = rightNum;                                                    {\cf20 //este valor vai ser igual a rigthNum ex: rigthNum=2 (1112), rigthNum=3 (2333), rigthNum=6 (8866)}\par
65         \} {\cf19 else}\{                                                                 {\cf20 //Se n\'E3o ent\'E3o igualamos ao valor de leftNum}\par
66             n[j] = leftNum;\par
67         \}\par
68         {\cf19 if}(j == digitos-1)\{                                                             {\cf20 //Se j = ao n\'FAmero de digitos ent\'E3o}\par
69                 numDigits = digitos;\par
70                 n[strlen(n)] = {\cf23 '\\0'};                                                {\cf20 //Inserir o \\0 no final da string}\par
71                 {\cf20 //printf("PivKey = %llu\\n", atoll(n));}\par
72                 {\cf19 if}(atoll(n) > 1000000000000 || atoll(n) < 0)\{\par
73                     n=NULL;\par
74                     free(allD);\par
75                     free(n);\par
76                     {\cf19 return} 0;  {\cf20 //Se o valor for maior que o suportado para (unsigned long long) ou for menor que 0 ou se a pubkey for igual a 0 returna 0}\par
77                 \}\par
78                 {\cf19 if}(atoll(n) > pubkey && atoll(n)%pubkey == 0)\{                          {\cf20 //Se (unsigned long long) de n for maior que pubkey(pq a pubkey \'E9 multipla dela mesma) e (unsigned long long) de n for multiplo de pubkey}\par
79                     {\cf18 unsigned} {\cf18 long} {\cf18 long} valorFinal = atoll(n);                           {\cf20 //valorFinal vai ser igual a (unsigned long long) de n}\par
80                     n=NULL;                                                             {\cf20 //Limpa n e d\'E1 free \'E0 mem\'F3ria}\par
81                     free(allD);\par
82                     free(n);\par
83                     {\cf19 return} valorFinal;                                                  {\cf20 //retorna o valorFinal}\par
84                 \}\par
85                 changePos++;                                                            {\cf20 //Se n\'E3o changePos++ e resetamos o j}\par
86                 j = 0;\par
87         \} {\cf19 else}\{                                                                         {\cf20 //Se n\'E3o incrementamos o j}\par
88             j++;\par
89         \}\par
90     \}\par
91     {\cf19 return} 0;\par
92 \}\par
}
}
{\xe \v calc_private_key_int\:projeto.c}
{\xe \v projeto.c\:calc_private_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long calc_private_key_int (unsigned long long  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the bipolar private key from a given public key (returns the bipolar private key). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which to calculate the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
bipolar number representing the private key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 543                                                                   \{\par
544     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0;\par
545     {\cf18 short} *n;\par
546     {\cf18 int} digitos = numDigitsLong(pubkey*2), j = 0, changePos = 0;\par
547     {\cf18 short} *allD = key_long_2_digits_int(pubkey*2);\par
548     {\cf18 short} rightNum = allD[1], leftNum = allD[0];\par
549 \par
550     {\cf19 if}(bipolar_numberInt(allD) ==  0) {\cf19 return} key_digits_2_long_int(allD);\par
551     {\cf19 if}(pubkey <= 5)\{\par
552         rightNum = 0;\par
553         leftNum = 1;\par
554     \}\par
555     {\cf19 if}(digitos < 2) digitos = 2;\par
556     {\cf19 if} (pubkey == 0) {\cf19 return} 0;\par
557     n = ({\cf18 short} *) calloc(digitos, {\cf17 sizeof} ({\cf18 short}));\par
558 \par
559     {\cf18 unsigned} {\cf18 long} {\cf18 long} max_iterations = ({\cf18 unsigned} {\cf18 long} long) 18446744073709551615;\par
560     {\cf19 for} ({\cf18 int} i = 0; privKey < max_iterations; i++) \{\par
561         {\cf19 if} (leftNum == 9 && changePos == digitos - 1 && rightNum == 8) \{\par
562             digitos++;\par
563             n = NULL;\par
564             n = realloc(n, digitos * {\cf17 sizeof}({\cf18 int}));\par
565             changePos = 0;\par
566             leftNum = 1;\par
567             rightNum = 0;\par
568         \}\par
569         {\cf19 if} (rightNum == 9 && changePos == digitos - 1) \{\par
570             leftNum++;\par
571         \}\par
572         {\cf19 if} (changePos == digitos - 1) \{\par
573             changePos = 0;\par
574             {\cf19 if} (rightNum != 9) \{\par
575                 rightNum++;\par
576             \} {\cf19 else} \{\par
577                 rightNum = 0;\par
578             \}\par
579         \}\par
580         {\cf19 if} (leftNum == rightNum) \{\par
581             rightNum++;\par
582         \}\par
583         {\cf19 if} (j > changePos) \{\par
584             n[j] = rightNum;\par
585         \} {\cf19 else} \{\par
586             n[j] = leftNum;\par
587         \}\par
588         {\cf19 if}(j == digitos-1)\{\par
589             n[digitos] = -1;\par
590             privKey = key_digits_2_long_int(n);\par
591             {\cf20 //printf("PivKey = %llu\\n", privKey);}\par
592             {\cf19 if}(privKey > 1000000000000 || privKey < 0)\{\par
593                 n=NULL;\par
594                 free(n);\par
595                 {\cf19 return} 0;\par
596             \}\par
597             {\cf19 if}(privKey > pubkey && privKey%pubkey == 0)\{\par
598                 n=NULL;\par
599                 free(n);\par
600                 {\cf19 return} privKey;\par
601             \}\par
602             changePos++;\par
603             j = 0;\par
604 \par
605         \} {\cf19 else}\{\par
606             j++;\par
607         \}\par
608     \}\par
609     {\cf19 return} 0;\par
610 \}\par
}
}
{\xe \v calc_runlength_char\:projeto.c}
{\xe \v projeto.c\:calc_runlength_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long calc_runlength_char (unsigned long long  {\i privkey})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the run-length from a given private key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i privkey} \cell }{- private key for which to calculate the run-length \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
run-length number representing the private key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 94                                                                   \{\par
95     {\cf18 unsigned} {\cf18 long} {\cf18 long} codKey = 0;\par
96     {\cf18 int} runLessPos = 0, digits, pow = 1;\par
97     digits = numDigitsLong(privkey);\par
98     {\cf18 int} allD[digits], runLess[4];\par
99 \par
100     {\cf20 //Ciclo para zerar runLess}\par
101     {\cf19 for} ({\cf18 int} i = 0; i < 6; ++i) \{\par
102         runLess[i] = 0;\par
103     \}\par
104     {\cf20 //Se privKey maior ou igual que 10 vai calcular a sua run Length}\par
105     {\cf19 if}(privkey >= 10)\{\par
106         allDigitsLong(privkey, allD);          {\cf20 // Insere no array allD todos os digitos da privKey}\par
107         runLess[runLessPos+1] = 1;                  {\cf20 // iguala a segunda posi\'E7\'E3o do runLength a 1(count de frequencia de um numero)}\par
108         runLess[runLessPos] = allD[digits-1];       {\cf20 // iguala a primeira posi\'E7\'E3o do runLength ao ultimo digito de allD (ultimode allD \'E9 o primeiro da privKey pois o allD fica invertido)}\par
109         {\cf19 for} ({\cf18 int} i = digits-1; i > 0; i--) \{\par
110             {\cf19 if}(allD[i] != allD[i-1])\{               {\cf20 // compara se o valor atual de allD \'E9 igual ao proximo valor (i-1 \'E9 o proximo porque o array est\'E1 a andar de tras para a frente)}\par
111                 runLessPos += 2;                    {\cf20 // se os 2 valores forem iguais ent\'E3o mudamos de digito e subimos ent\'E3o a runLessPos+2 pois a pos 0 e 2 do runLength s\'E3o os digitos}\par
112                 runLess[runLessPos] = allD[i-1];    {\cf20 // igualo runLess[2] ao valor valor de allD[i-1] (i-1 pois o array est\'E1 a ir de tras para a frente ent\'E3o o i-1 \'E9 que \'E9 o prox valor)}\par
113             \}\par
114             runLess[runLessPos+1]++;                {\cf20 // frequencia do digitos++}\par
115         \}\par
116         {\cf19 for} ({\cf18 int} i = 1; i <= 4; i++) \{             {\cf20 // array que vai concatenar todo o array runLess num numero}\par
117             {\cf19 if} ( i == 1)\{\par
118                 codKey = runLess[i-1];              {\cf20 // codKey = ao primeiro digito}\par
119             \} {\cf19 else}\{\par
120                 {\cf19 if}(i%2 == 0)\{                       {\cf20 // se estivermos numa posi\'E7\'E3o multipla de 2 ent\'E3o estamos em posi\'E7\'F5es de frequencias de digitos}\par
121                     codKey *= 100;                  {\cf20 // mutiplicamos o valor de codKey por 100 pois cada frequencia vai ocupar 2 espa\'E7os exemplo (101 isto \'E9 o numero 1 aparece 1 vez / 1 \'E9 o numero e 01 \'E9 a frequencia)}\par
122                     codKey += runLess[i-1];         {\cf20 // soma de codKey com o valor de runLess}\par
123                     pow = 1;\par
124                 \} {\cf19 else}\{\par
125                     {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(runLess[i-1]); ++j) \{ {\cf20 // Ciclo para saber quanto se tem de multiplicar codKey para poder fazer a soma e juntar runLess sabemos isso pelo numero de digitos}\par
126                         pow *= 10;\par
127                     \}\par
128                     codKey *= pow;              {\cf20 // multiplicamos codKey pelo pow}\par
129                     codKey += runLess[i-1];     {\cf20 // soamos codKey e runLess}\par
130                     pow = 1;                    {\cf20 // voltamos o pow a 1}\par
131                 \}\par
132             \}\par
133         \}\par
134         {\cf19 return} codKey;\par
135     \}\par
136     {\cf19 else}\{\par
137         {\cf19 return} 0;\par
138     \}\par
139 \}\par
}
}
{\xe \v calc_runlength_int\:projeto.c}
{\xe \v projeto.c\:calc_runlength_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long calc_runlength_int (unsigned long long  {\i privkey})}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the run-length from a given private key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i privkey} \cell }{- private key for which to calculate the run-length \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
run-length number representing the private key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 612                                                                  \{\par
613     {\cf18 unsigned} {\cf18 long} {\cf18 long} codKey = 0;\par
614     {\cf18 int} runLessPos = 0, digits, pow = 1;\par
615     digits = numDigitsLong(privkey);\par
616     {\cf18 int} allD[digits], runLess[4];\par
617 \par
618     {\cf19 for} ({\cf18 int} i = 0; i < 6; ++i) \{\par
619         runLess[i] = 0;\par
620     \}\par
621     {\cf19 if}(privkey >= 10)\{\par
622         allDigitsLong(privkey, allD);\par
623         runLess[runLessPos+1] = 1;\par
624         runLess[runLessPos] = allD[digits-1];\par
625         {\cf19 for} ({\cf18 int} i = digits-1; i > 0; i--) \{\par
626             {\cf19 if}(allD[i] != allD[i-1])\{\par
627                 runLessPos += 2;\par
628                 runLess[runLessPos] = allD[i-1];\par
629             \}\par
630             runLess[runLessPos+1]++;\par
631         \}\par
632         {\cf19 for} ({\cf18 int} i = 1; i <= 4; i++) \{\par
633             {\cf19 if} ( i == 1)\{\par
634                 codKey = runLess[i-1];\par
635             \} {\cf19 else}\{\par
636                 {\cf19 if}(i%2 == 0)\{\par
637                     codKey *= 100;\par
638                     codKey += runLess[i-1];\par
639                     pow = 1;\par
640                 \} {\cf19 else} \{\par
641                     {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(runLess[i-1]); ++j) \{\par
642                         pow *= 10;\par
643                     \}\par
644                     codKey *= pow;\par
645                     codKey += runLess[i-1];\par
646                     pow = 1;\par
647                 \}\par
648             \}\par
649         \}\par
650         {\cf19 return} codKey;\par
651     \}\par
652     {\cf19 else}\{\par
653         {\cf19 return} 0;\par
654     \}\par
655 \}\par
}
}
{\xe \v charPos\:projeto.c}
{\xe \v projeto.c\:charPos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int charPos (char *  {\i a}, int  {\i d})}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna o valor de uma posi\'E7\'E3o de um array {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{array \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i d} \cell }{posi\'E7\'E3o \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
retorna o valor dessa posi\'E7\'E3o ou -1 se n\'E3o existir \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2285                            \{\par
2286     {\cf19 if}(d < strlen(a)) {\cf19 return} a[d];\par
2287     {\cf19 else} {\cf19 return} -1;\par
2288 \}\par
}
}
{\xe \v create_utilizador_cabeca\:projeto.c}
{\xe \v projeto.c\:create_utilizador_cabeca}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void create_utilizador_cabeca ({\b UTILIZADORES_QUEUE} *  {\i queue}, {\b UTILIZADORES} **  {\i utilizadores}, char *  {\i name}, char *  {\i email}, {\b KEY_HOLDER} *  {\i key_holder_list}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que cria um utilizador \'E0 cabe\'E7a com uma dada lista de porta chaves {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i utilizadores} \cell }{apontador que aponta para os v\'E1rios utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i email} \cell }{email a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key_holder_list} \cell }{lista de porta chaves a ser inserida no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{posi\'E7\'E3o do primeiro porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1748                                                                                                                                                      \{\par
1749     {\cf18 int} stopKeyHolderPos = 1;\par
1750     UTILIZADORES* utilizador = malloc({\cf17 sizeof}(UTILIZADORES));\par
1751     utilizador->name = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(name) + 1));\par
1752     strcpy(utilizador->name, name);\par
1753     utilizador->email = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(email) + 1));\par
1754     strcpy(utilizador->email, email);\par
1755     utilizador->email = email;\par
1756     utilizador->next = *utilizadores;\par
1757     KEY_HOLDER *currKeyHolder = key_holder_list;\par
1758     {\cf19 while} (stopKeyHolderPos < pos)\{     {\cf20 // ciclo at\'E9 chegar ao porta chaves escolhido}\par
1759         currKeyHolder = currKeyHolder->next;\par
1760         stopKeyHolderPos++;\par
1761         {\cf19 if} (currKeyHolder == NULL)\{     {\cf20 // se n\'E3o existir o porta chaves}\par
1762             printf({\cf22 "Porta Chaves nao encontrado\\n"});\par
1763             {\cf19 return};\par
1764         \}\par
1765     \}\par
1766     utilizador->key_holder_list = currKeyHolder;\par
1767 \par
1768     {\cf20 // se a lista de utilizadores estiver vazia}\par
1769     {\cf19 if}(*utilizadores == NULL)\{\par
1770         *utilizadores = utilizador; {\cf20 // este vai ser o primerio utilizador}\par
1771         queue->size++;\par
1772         enqueue(queue, utilizador); {\cf20 // chama a fun\'E7\'E3o para ordenar (head & tail) na fila de utilizadores}\par
1773         {\cf19 return};\par
1774     \}\par
1775 \par
1776     {\cf20 // Insere o novo utilizador no inicio da lista ligada}\par
1777     queue->size++;\par
1778     *utilizadores = utilizador; {\cf20 // o primeiro utilizador vai ser este novo utilizador}\par
1779     queue->head = utilizador;   {\cf20 // a head da fila vai passar a ser este novo utilizador}\par
1780 \}\par
}
}
{\xe \v create_utilizador_cauda\:projeto.c}
{\xe \v projeto.c\:create_utilizador_cauda}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void create_utilizador_cauda ({\b UTILIZADORES_QUEUE} *  {\i queue}, {\b UTILIZADORES} **  {\i utilizadores}, char *  {\i name}, char *  {\i email}, {\b KEY_HOLDER} *  {\i key_holder_list}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que cria um utilizador \'E0 cauda com uma dada lista de porta chaves {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i utilizadores} \cell }{apontador que aponta para os v\'E1rios utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i email} \cell }{email a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key_holder_list} \cell }{lista de porta chaves a ser inserida no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{posi\'E7\'E3o do primeiro porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1700                                                                                                                                                     \{\par
1701     {\cf18 int} stopKeyHolderPos = 1;\par
1702     UTILIZADORES* utilizador = malloc({\cf17 sizeof}(UTILIZADORES));\par
1703     utilizador->name = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(name) + 1));\par
1704     strcpy(utilizador->name, name);\par
1705     utilizador->email = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(email) + 1));\par
1706     strcpy(utilizador->email, email);\par
1707     utilizador->email = email;\par
1708     utilizador->next = NULL;\par
1709     KEY_HOLDER *currKeyHolder = key_holder_list;\par
1710     {\cf19 while} (stopKeyHolderPos < pos)\{     {\cf20 // ciclo at\'E9 chegar ao porta chaves escolhido}\par
1711         currKeyHolder = currKeyHolder->next;\par
1712         stopKeyHolderPos++;\par
1713         {\cf19 if} (currKeyHolder == NULL)\{     {\cf20 // se n\'E3o existir o porta chaves}\par
1714             printf({\cf22 "Porta Chaves nao encontrado\\n"});\par
1715             {\cf19 return};\par
1716         \}\par
1717     \}\par
1718     utilizador->key_holder_list = currKeyHolder;\par
1719 \par
1720     {\cf20 // se a lista de utilizadores estiver vazia}\par
1721     {\cf19 if}(*utilizadores == NULL)\{\par
1722         *utilizadores = utilizador; {\cf20 // este vai ser o primerio utilizador}\par
1723         queue->size++;\par
1724         enqueue(queue, utilizador); {\cf20 // chama a fun\'E7\'E3o para ordenar (head & tail) na fila de utilizadores}\par
1725         {\cf19 return};\par
1726     \}\par
1727 \par
1728     {\cf20 // ciclo para percorrer os utilizadores at\'E9 chegar ao penultimo}\par
1729     UTILIZADORES *curr = *utilizadores;\par
1730     {\cf19 while} (curr->next != NULL)\{\par
1731         curr = curr->next;\par
1732     \}\par
1733     {\cf20 // o penultimo utilizador vai apontar para o novo utilizar}\par
1734     curr->next = utilizador;\par
1735     queue->size++;\par
1736     enqueue(queue, curr->next);  {\cf20 // chama a fun\'E7\'E3o para ordenar (head & tail) na fila de utilizadores}\par
1737 \}\par
}
}
{\xe \v create_utilizador_ordenado\:projeto.c}
{\xe \v projeto.c\:create_utilizador_ordenado}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void create_utilizador_ordenado ({\b UTILIZADORES_QUEUE} *  {\i queue}, {\b UTILIZADORES} **  {\i utilizadores}, char *  {\i name}, char *  {\i email}, {\b KEY_HOLDER} *  {\i key_holder_list}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que cria um utilizador com uma dada lista de porta chaves (ordenado alfabeticamente por nome) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i utilizadores} \cell }{apontador que aponta para os v\'E1rios utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i email} \cell }{email a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key_holder_list} \cell }{lista de porta chaves a ser inserida no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{posi\'E7\'E3o do primeiro porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1642                                                                                                                                                        \{\par
1643     {\cf18 int} stopKeyHolderPos = 1;\par
1644     UTILIZADORES* utilizador = malloc({\cf17 sizeof}(UTILIZADORES));\par
1645     utilizador->name = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(name) + 1));\par
1646     strcpy(utilizador->name, name);\par
1647     utilizador->email = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(email) + 1));\par
1648     strcpy(utilizador->email, email);\par
1649     utilizador->email = email;\par
1650     utilizador->next = NULL;\par
1651     KEY_HOLDER *currKeyHolder = key_holder_list;\par
1652     {\cf19 while} (stopKeyHolderPos < pos)\{     {\cf20 // ciclo at\'E9 chegar ao porta chaves escolhido}\par
1653         currKeyHolder = currKeyHolder->next;\par
1654         stopKeyHolderPos++;\par
1655         {\cf19 if} (currKeyHolder == NULL)\{     {\cf20 // se n\'E3o existir o porta chaves}\par
1656             printf({\cf22 "Porta Chaves nao encontrado\\n"});\par
1657             {\cf19 return};\par
1658         \}\par
1659     \}\par
1660     utilizador->key_holder_list = currKeyHolder;\par
1661 \par
1662     {\cf20 // se a lista de utilizadores estiver vazia}\par
1663     {\cf19 if}(*utilizadores == NULL)\{\par
1664         *utilizadores = utilizador; {\cf20 // este vai ser o primerio utilizador}\par
1665         queue->size++;\par
1666         enqueue(queue, utilizador); {\cf20 // chama a fun\'E7\'E3o para ordenar (head & tail) na fila de utilizadores}\par
1667         {\cf19 return};\par
1668     \}\par
1669 \par
1670     {\cf20 // ciclo para encontrar a posi\'E7\'E3o do novo utilizador (ordenado alfabeticamente)}\par
1671     UTILIZADORES *curr = *utilizadores;\par
1672     UTILIZADORES *prev = NULL;\par
1673     {\cf19 while} (curr != NULL && strcmp(curr->name, name) < 0) \{  {\cf20 // o ciclo continua a procurar a pos enquanto existirem porta chaves com um nome alfabeticamente "menor" que o utilizador a ser criado}\par
1674         prev = curr;        {\cf20 // porta chaves anterior vai passar a ser igual ao atual}\par
1675         curr = curr->next;  {\cf20 // porta chaves atual vai passar a ser o proximo porta chaves}\par
1676     \}\par
1677 \par
1678     {\cf20 // se n\'E3o existirem porta chaves anteriores quer dizer que este utilizador \'E9 o que tem o nome alfabeticamente "menor" etn\'E3o fica em primeiro}\par
1679     {\cf19 if} (prev == NULL) \{\par
1680         utilizador->next = *utilizadores;\par
1681         *utilizadores = utilizador;\par
1682         queue->head = utilizador;\par
1683     \} {\cf19 else} \{    {\cf20 // se existirem utilizadores com nome "menor"}\par
1684         utilizador->next = prev->next;  {\cf20 // o novo utilizador vai apontar para o antigo utilizador apontado pelo anterior}\par
1685         prev->next = utilizador;        {\cf20 // e o utilizador anteriro agora vai apontar para o novo utilizador}\par
1686     \}\par
1687 \par
1688     queue->size++;\par
1689 \}\par
}
}
{\xe \v delete_key_char\:projeto.c}
{\xe \v projeto.c\:delete_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long delete_key_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char *  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Delete a given public key (and corresponding priv and runlength keys) from all matrices. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key to delete \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
pubkey that was deleted \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 237                                                                                                                         \{\par
238     {\cf18 int} exist = 0;\par
239     {\cf19 for} ({\cf18 int} i = 0; i < lines+1; ++i) \{\par
240         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) == 0) {\cf19 break};\par
241         {\cf19 if}(strcmp(matrix_kpub[i], pubkey) == 0)\{\par
242             exist = 1;\par
243             {\cf19 for} ({\cf18 int} j = i; j < lines; ++j) \{\par
244                 {\cf19 if}(j == lines-1)\{\par
245                     matrix_kpub[j] = matrix_kpub[j+1];\par
246                     matrix_kpriv[j] = matrix_kpriv[j+1];\par
247                     matrix_kcod[j] = matrix_kcod[j+1];\par
248                     matrix_kpub[j+1] = NULL;\par
249                     matrix_kpriv[j+1] = NULL;\par
250                     matrix_kcod[j+1] = NULL;\par
251                     free(matrix_kpub[j+1]);\par
252                     free(matrix_kpriv[j+1]);\par
253                     free(matrix_kcod[j+1]);\par
254                 \}\par
255                 {\cf19 else}\{\par
256                     matrix_kpub[j] = matrix_kpub[j+1];\par
257                     matrix_kpriv[j] = matrix_kpriv[j+1];\par
258                     matrix_kcod[j] = matrix_kcod[j+1];\par
259                 \}\par
260             \}\par
261             lines--;\par
262         \}\par
263     \}\par
264     {\cf19 if}(exist == 0)\{\par
265         printf({\cf22 "Chave Nao Encontrada\\n"});\par
266         {\cf19 return} 0;\par
267     \}\par
268 \par
269     {\cf19 return} atoll(pubkey);\par
270 \}\par
}
}
{\xe \v delete_key_int\:projeto.c}
{\xe \v projeto.c\:delete_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long delete_key_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, short  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Delete a given public key (and corresponding priv and runlength keys) from all matrices. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key to delete \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
pubkey that was deleted \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 758                                                                                                                           \{\par
759     {\cf18 int} exist = 0;\par
760     {\cf19 for} ({\cf18 int} i = 0; i < lines+1; ++i) \{\par
761         {\cf20 //if(!matrix_kpub[i] || matrix_kpub[i][0] == 0) continue;}\par
762         {\cf19 if}(matrix_kpub[i][0] == -1) {\cf19 break};\par
763         {\cf19 if}(key_digits_2_long_int(matrix_kpub[i]) == pubkey)\{\par
764             exist = 1;\par
765             {\cf19 for} ({\cf18 int} j = i; j < lines; ++j) \{\par
766                 {\cf19 if}(j == lines-1)\{\par
767                     matrix_kpub[j] = matrix_kpub[j+1];\par
768                     matrix_kpriv[j] = matrix_kpriv[j+1];\par
769                     matrix_kcod[j] = matrix_kcod[j+1];\par
770                     matrix_kpub[j+1] = NULL;\par
771                     matrix_kpriv[j+1] = NULL;\par
772                     matrix_kcod[j+1] = NULL;\par
773                     free(matrix_kpub[j+1]);\par
774                     free(matrix_kpriv[j+1]);\par
775                     free(matrix_kcod[j+1]);\par
776                     {\cf19 break};\par
777                 \}\par
778                 matrix_kpub[j] = matrix_kpub[j+1];\par
779                 matrix_kpriv[j] = matrix_kpriv[j+1];\par
780                 matrix_kcod[j] = matrix_kcod[j+1];\par
781             \}\par
782             lines--;\par
783         \}\par
784     \}\par
785     {\cf19 if}(exist == 0)\{\par
786         printf({\cf22 "Chave Nao Encontrada\\n"});\par
787         {\cf19 return} 0;\par
788     \}\par
789     {\cf19 return} pubkey;\par
790 \}\par
}
}
{\xe \v dequeue\:projeto.c}
{\xe \v projeto.c\:dequeue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void dequeue ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o para dar free a toda a fila de utilizadores {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadors \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1801                                        \{\par
1802     {\cf19 while} (queue->head != NULL)\{        {\cf20 // cilco enquanto a head for diferente de NULL}\par
1803         {\cf19 if}(queue->head == queue->tail)\{ {\cf20 // se a head e a tail forem iguais ent\'E3o s\'F3 existe 1 utilizador}\par
1804             queue->head = NULL;\par
1805             queue->tail = NULL;\par
1806         \}\par
1807         {\cf19 else}\{                                   {\cf20 // se a head e a tail n\'E3o forem iguais a fila tem v\'E1rios utilizadores}\par
1808             UTILIZADORES *temp = queue->head;   {\cf20 // temp a apontar para a head}\par
1809             queue->head = queue->head->next;    {\cf20 // a head vai passar a ser o prox utilizador}\par
1810             free(temp);                 {\cf20 // free \'E0 antiga head}\par
1811         \}\par
1812     \}\par
1813 \}\par
}
}
{\xe \v edit_keyHolder\:projeto.c}
{\xe \v projeto.c\:edit_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void edit_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts}, int  {\i keyHolderPos}, int  {\i keyPosChange}, int  {\i newKeyPos})}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que serve para editar um porta chaves tanto para adicionar uma nova linha de matrizes como para editar uma j\'E1 existente A posi\'E7\'E3o na lista ligada deste porta chaves vai ser atualizada para a primeira posi\'E7\'E3o pois vais come\'E7ar a ser o porta chaves com a data de modifica\'E7\'E3o mais recente {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador para os apontadores dos porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mString} \cell }{struct das matrizes de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mInts} \cell }{strucr para as matrizes de ints \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves a ser editado \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyPosChange} \cell }{linha do porta chaves a ser editada/adicionada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i newKeyPos} \cell }{linha da matriz de string/ints a ser adicionada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1077                                                                                                                                                       \{\par
1078     KEY_HOLDER *temp = NULL;\par
1079     time_t data_modificacao;\par
1080     time(&data_modificacao);\par
1081     {\cf18 int} stopPos=1, isAdd = 0, size = 0, sizeMax = 1;\par
1082 \par
1083     KEY_HOLDER * curr = *portaChaves;\par
1084     {\cf19 while} (stopPos != keyHolderPos)\{    {\cf20 // andar na lista ligada at\'E9 chegar ao porta chaves a ser editado}\par
1085         {\cf19 if}(curr == NULL)\{\par
1086             printf({\cf22 "Porta Chaves Nao Encontrado\\n"});\par
1087             {\cf19 return};\par
1088         \}\par
1089         temp = curr;            {\cf20 // guarda o porta chaves anterior}\par
1090         curr = curr->next;\par
1091         stopPos++;\par
1092     \}\par
1093 \par
1094     {\cf19 for} ({\cf18 int} i = 0; strcmp(curr->khString.matrixPub[i], {\cf22 "-1"}) != 0; ++i) \{  {\cf20 // calcula o tamanho das matrizes deste prota chaves}\par
1095         sizeMax++;\par
1096     \}\par
1097 \par
1098     {\cf19 for} ({\cf18 int} j = 0; j <= keyPosChange; ++j) \{       {\cf20 // ciclo que vai verificar se a linha do porta chaves j\'E1 existe ou n\'E3o, se n\'E3on existir vamos adicionar}\par
1099         {\cf19 if}(strcmp(curr->khString.matrixPub[j], {\cf22 "-1"}) == 0)\{ {\cf20 // se estamos na ultima linha do porta chaves quer dizer que a linha que o utilizador escolheu n\'E3o existe}\par
1100             {\cf19 if}(newKeyPos > mString.lines)\{  {\cf20 // verificar se a linha a diconar existe na matriz de strings}\par
1101                 curr->khString.matrixPub[j] = realloc(curr->khString.matrixPub[j],2 * sizeof ({\cf18 char}));\par
1102                 strcpy(curr->khString.matrixPub[j], {\cf22 "0"});   {\cf20 // se n\'E3o existir adicionamos 0}\par
1103             \} {\cf19 else}\{\par
1104                 curr->khString.matrixPub[j] = realloc(curr->khString.matrixPub[j],(numDigitsLong(atoll(mString.matrixPub[newKeyPos]))+1)*sizeof ({\cf18 char}));\par
1105                 strcpy(curr->khString.matrixPub[j], mString.matrixPub[newKeyPos]);  {\cf20 // se existir adicionamos essa linha}\par
1106             \}\par
1107             isAdd = 1;\par
1108         \}\par
1109         {\cf20 // Mesma coisa que na matriz de String de chaves Publicas}\par
1110         {\cf19 if}(strcmp(curr->khString.matrixPriv[j], {\cf22 "-1"}) == 0)\{\par
1111             {\cf19 if}(newKeyPos > mString.lines)\{\par
1112                 curr->khString.matrixPriv[j] = realloc(curr->khString.matrixPriv[j],2 * sizeof ({\cf18 char}));\par
1113                 curr->khString.matrixPriv[j] =  {\cf22 "0\\0"};\par
1114             \} {\cf19 else} \{\par
1115                 curr->khString.matrixPriv[j] = realloc(curr->khString.matrixPriv[j],(numDigitsLong(atoll(mString.matrixPriv[newKeyPos]))+1) * sizeof ({\cf18 char}));\par
1116                 curr->khString.matrixPriv[j] = mString.matrixPriv[newKeyPos];\par
1117             \}\par
1118             isAdd = 1;\par
1119         \}\par
1120         {\cf19 if}(strcmp(curr->khString.matrixCod[j], {\cf22 "-1"}) == 0)\{\par
1121             {\cf19 if}(newKeyPos > mString.lines)\{\par
1122                 curr->khString.matrixCod[j] = realloc(curr->khString.matrixCod[j],2 * sizeof ({\cf18 char}));\par
1123                 curr->khString.matrixCod[j] =  {\cf22 "0\\0"};\par
1124             \} {\cf19 else} \{\par
1125                 curr->khString.matrixCod[j] = realloc(curr->khString.matrixCod[j],(numDigitsLong(atoll(mString.matrixCod[newKeyPos]))+1) * sizeof ({\cf18 char}));\par
1126                 curr->khString.matrixCod[j] = mString.matrixCod[newKeyPos];\par
1127             \}\par
1128             isAdd = 1;\par
1129         \}\par
1130         {\cf19 if}(curr->khInts.matrixPub[j][0] == -1)\{\par
1131             {\cf19 if}(newKeyPos > mInts.lines)\{\par
1132                 curr->khInts.matrixPub[j] = realloc(curr->khInts.matrixPub[j],2 * sizeof ({\cf18 short}));\par
1133                 curr->khInts.matrixPub[j][0] = 0;\par
1134                 curr->khInts.matrixPub[j][1] = -1;\par
1135             \} {\cf19 else} \{\par
1136                 curr->khInts.matrixPub[j] = realloc(curr->khInts.matrixPub[j],(numDigitsLong(key_digits_2_long_int(mInts.matrixPub[newKeyPos]))+1) * sizeof ({\cf18 short}));\par
1137                 {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixPub[newKeyPos])) + 1; ++i) \{\par
1138                     curr->khInts.matrixPub[j][i] = mInts.matrixPub[newKeyPos][i];\par
1139                 \}\par
1140             \}\par
1141             isAdd = 1;\par
1142         \}\par
1143         {\cf19 if}(curr->khInts.matrixPriv[j][0] == -1)\{\par
1144             {\cf19 if}(newKeyPos > mInts.lines)\{\par
1145                 curr->khInts.matrixPriv[j] = realloc(curr->khInts.matrixPriv[j],2 * sizeof ({\cf18 short}));\par
1146                 curr->khInts.matrixPriv[j][0] = 0;\par
1147                 curr->khInts.matrixPriv[j][1] = -1;\par
1148             \} {\cf19 else}\{\par
1149                 curr->khInts.matrixPriv[j] = realloc(curr->khInts.matrixPriv[j],(numDigitsLong(key_digits_2_long_int(mInts.matrixPriv[newKeyPos]))+1) * sizeof ({\cf18 short}));\par
1150                 {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixPriv[newKeyPos]))+1; ++i) \{\par
1151                     curr->khInts.matrixPriv[j][i] = mInts.matrixPriv[newKeyPos][i];\par
1152                 \}\par
1153             \}\par
1154             isAdd = 1;\par
1155         \}\par
1156         {\cf19 if}(curr->khInts.matrixCod[j][0] == -1)\{\par
1157             {\cf19 if}(newKeyPos > mInts.lines)\{\par
1158                 curr->khInts.matrixCod[j] = realloc(curr->khInts.matrixCod[j],2 * sizeof ({\cf18 short}));\par
1159                 curr->khInts.matrixCod[j][0] = 0;\par
1160                 curr->khInts.matrixCod[j][1] = -1;\par
1161             \} {\cf19 else} \{\par
1162                 curr->khInts.matrixCod[j] = realloc(curr->khInts.matrixCod[j],(numDigitsLong(key_digits_2_long_int(mInts.matrixCod[newKeyPos]))+1) * sizeof ({\cf18 short}));\par
1163                 {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixCod[newKeyPos])) + 1; ++i) \{\par
1164                     curr->khInts.matrixCod[j][i] = mInts.matrixCod[newKeyPos][i];\par
1165                 \}\par
1166             \}\par
1167             isAdd = 1;\par
1168         \}\par
1169         {\cf19 if}(isAdd == 1)\{ {\cf20 // se a linha foi adicionada ent\'E3o}\par
1170             curr->sieInts++;        {\cf20 // aumentamos o numero de linhas ints deste porta chaves}\par
1171             curr->sizeStrings++;    {\cf20 // aumentamos o numeri de linhas strings deste porta chaves}\par
1172 \par
1173             {\cf20 // Atualizo o valor de -1 nas matrizes}\par
1174             curr->khString.matrixPub = realloc(curr->khString.matrixPub, (sizeMax+1) * sizeof ({\cf18 char}*));\par
1175             curr->khString.matrixPub[sizeMax] = calloc(3, {\cf17 sizeof} ({\cf18 char}));\par
1176             curr->khString.matrixPriv[sizeMax] = calloc(3, {\cf17 sizeof} ({\cf18 char}));\par
1177             curr->khString.matrixCod[sizeMax] = calloc(3, {\cf17 sizeof} ({\cf18 char}));\par
1178             strcpy(curr->khString.matrixPub[sizeMax], {\cf22 "-1"});\par
1179             strcpy(curr->khString.matrixPriv[sizeMax], {\cf22 "-1"});\par
1180             strcpy(curr->khString.matrixCod[sizeMax], {\cf22 "-1"});\par
1181 \par
1182             curr->khInts.matrixPub = realloc(curr->khInts.matrixPub, (sizeMax+1) * sizeof ({\cf18 short}*));\par
1183             curr->khInts.matrixPub[sizeMax] = calloc(2, {\cf17 sizeof} ({\cf18 short}));\par
1184             curr->khInts.matrixPriv[sizeMax] = calloc(2, {\cf17 sizeof} ({\cf18 short}));\par
1185             curr->khInts.matrixCod[sizeMax] = calloc(2, {\cf17 sizeof} ({\cf18 short}));\par
1186             curr->khInts.matrixPub[sizeMax][0] = -1;\par
1187             curr->khInts.matrixPriv[sizeMax][0] = -1;\par
1188             curr->khInts.matrixCod[sizeMax][0] = -1;\par
1189 \par
1190             {\cf20 // se n\'E3o for o primeiro porta chaves, atualizamos a lista ligada}\par
1191             {\cf19 if}(keyHolderPos != 1) \{\par
1192                 temp->next = curr->next;    {\cf20 // o porta chaves anterior vai agora apontar para o proximo deste porta chaves editado}\par
1193                 curr->next = *portaChaves;  {\cf20 // o porta chaves editado agora vai apontar para o primeiro porta chaves}\par
1194                 *portaChaves = curr;        {\cf20 // o primeiro porta chaves agora \'E9 este porta chaves que foi editado}\par
1195             \}\par
1196 \par
1197             {\cf19 return};\par
1198         \}\par
1199         size++;\par
1200     \}\par
1201     {\cf19 if}(isAdd == 0)\{     {\cf20 // se a linha n\'E3o foi adicionada ent\'E3o quer dizer que j\'E1 existe no porta chaves e vamos editar}\par
1202 \par
1203         {\cf19 if}(newKeyPos >= mString.lines)\{ {\cf20 // se a linha das matrizes n\'E3o existir \'E9 inserido um 0}\par
1204             curr->khString.matrixPub[keyPosChange] = ({\cf18 char} *) calloc(1, {\cf17 sizeof} ({\cf18 char} ));\par
1205             curr->khString.matrixPriv[keyPosChange] = ({\cf18 char} *) calloc(1, {\cf17 sizeof} ({\cf18 char} ));\par
1206             curr->khString.matrixCod[keyPosChange] = ({\cf18 char} *) calloc(1,  {\cf17 sizeof} ({\cf18 char} ));\par
1207             strcpy(curr->khString.matrixPub[keyPosChange], {\cf22 "0"});\par
1208             strcpy(curr->khString.matrixPriv[keyPosChange], {\cf22 "0"});\par
1209             strcpy(curr->khString.matrixCod[keyPosChange], {\cf22 "0"});\par
1210         \} {\cf19 else}\{     {\cf20 // se existir essa linha \'E9 inserida}\par
1211             curr->khString.matrixPub[keyPosChange] = ({\cf18 char} *) calloc(numDigitsLong(atoll(mString.matrixPub[newKeyPos]))+1, {\cf17 sizeof} (char ));\par
1212             curr->khString.matrixPriv[keyPosChange] = ({\cf18 char} *) calloc(numDigitsLong(atoll(mString.matrixPriv[newKeyPos]))+1, {\cf17 sizeof} ({\cf18 char} ));\par
1213             curr->khString.matrixCod[keyPosChange] = ({\cf18 char} *) calloc(numDigitsLong(atoll(mString.matrixCod[newKeyPos]))+1,  {\cf17 sizeof} ({\cf18 char} ));\par
1214             curr->khString.matrixPub[keyPosChange] =  mString.matrixPub[newKeyPos];\par
1215             curr->khString.matrixPriv[keyPosChange] = mString.matrixPriv[newKeyPos];\par
1216             curr->khString.matrixCod[keyPosChange] = mString.matrixCod[newKeyPos];\par
1217         \}\par
1218         {\cf19 if}(newKeyPos >= mInts.lines)\{ {\cf20 // se a linha das matrizes n\'E3o existir \'E9 inserido um 0}\par
1219             curr->khInts.matrixPub[keyPosChange] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
1220             curr->khInts.matrixPriv[keyPosChange] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
1221             curr->khInts.matrixCod[keyPosChange] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
1222             curr->khInts.matrixPub[keyPosChange][0] = 0;\par
1223             curr->khInts.matrixPriv[keyPosChange][0] = 0;\par
1224             curr->khInts.matrixCod[keyPosChange][0] = 0;\par
1225             curr->khInts.matrixPub[keyPosChange][1] = -1;\par
1226             curr->khInts.matrixPriv[keyPosChange][1] = -1;\par
1227             curr->khInts.matrixCod[keyPosChange][1] = -1;\par
1228         \} {\cf19 else}\{     {\cf20 // se existir essa linha \'E9 inserida}\par
1229             curr->khInts.matrixPub[keyPosChange] = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(mInts.matrixPub[newKeyPos]))+1, {\cf17 sizeof} ({\cf18 short} ));\par
1230             curr->khInts.matrixPriv[keyPosChange] = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(mInts.matrixPriv[newKeyPos]))+1, {\cf17 sizeof} ({\cf18 short} ));\par
1231             curr->khInts.matrixCod[keyPosChange] = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(mInts.matrixCod[newKeyPos]))+1, {\cf17 sizeof} ({\cf18 short} ));\par
1232             {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixPub[newKeyPos]))+1; ++i) \{\par
1233                 curr->khInts.matrixPub[keyPosChange][i] = mInts.matrixPub[newKeyPos][i];\par
1234             \}\par
1235             {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixPriv[newKeyPos]))+1; ++i) \{\par
1236                 curr->khInts.matrixPriv[keyPosChange][i] = mInts.matrixPriv[newKeyPos][i];\par
1237             \}\par
1238             {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixCod[newKeyPos]))+1; ++i) \{\par
1239                 curr->khInts.matrixCod[keyPosChange][i] = mInts.matrixCod[newKeyPos][i];\par
1240             \}\par
1241         \}\par
1242     \}\par
1243 \par
1244     curr->data_modificacao = ctime(&data_modificacao);      {\cf20 // artualizo a data de modifica\'E7\'E3o}\par
1245 \par
1246     {\cf20 // se n\'E3o for o primeiro porta chaves, atualizo a lista ligada}\par
1247     {\cf19 if}(keyHolderPos != 1)\{\par
1248         temp->next = curr->next;    {\cf20 // o porta chaves anterior agora vai apontador para o proximo deste prota chaves editado}\par
1249         curr->next = *portaChaves;  {\cf20 // este porta chaves vai agora apontar para o primeiro porta chaves}\par
1250         *portaChaves = curr;        {\cf20 // este porta chaves editado vai passar a ser o primeiro porta chaves da lista ligada}\par
1251     \}\par
1252 \}\par
}
}
{\xe \v enqueue\:projeto.c}
{\xe \v projeto.c\:enqueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void enqueue ({\b UTILIZADORES_QUEUE} *  {\i queue}, {\b UTILIZADORES} *  {\i utilizador})}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Atualiza a head e tail da fila de utilizadores {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i utilizador} \cell }{apontador de um utilizador \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1787                                                                   \{\par
1788     {\cf19 if} (queue->tail == NULL) \{  {\cf20 // se a tail for NULL que dizer que a fila est\'E1 vaiza}\par
1789         queue->head = utilizador;   {\cf20 // ent\'E3o a head vai ser o utilizador}\par
1790         queue->tail = utilizador;   {\cf20 // a tail tambem vai ser o utilizador}\par
1791     \} {\cf19 else} \{    {\cf20 // se a fila n\'E3o estiver vazia}\par
1792         queue->tail->next = utilizador; {\cf20 // a antiga tail vai apontador para o utilizador}\par
1793         queue->tail = utilizador;       {\cf20 // tail vai ser atualizada para o utilizador (no fim a tail aponta para ela mesma por causa da linha anterior)}\par
1794     \}\par
1795 \}\par
}
}
{\xe \v exists_key_char\:projeto.c}
{\xe \v projeto.c\:exists_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int exists_key_char (char **  {\i matrix}, int  {\i lines}, unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verify if a given key exists in the matrix. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix with keys \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- key to check if it exists \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
1 if it exists, 0 if it doesn't \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 192                                                                      \{\par
193     {\cf18 char} *keyChar = malloc(numDigitsLong(key) * {\cf17 sizeof} ({\cf18 char}));\par
194     sprintf(keyChar, {\cf22 "%llu"}, key);\par
195     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
196         {\cf19 if}(strcmp(matrix[i], keyChar) == 0)\{\par
197             keyChar=NULL;\par
198             free(keyChar);\par
199             {\cf19 return} 1;\par
200         \}\par
201     \}\par
202     keyChar=NULL;\par
203     free(keyChar);\par
204     {\cf19 return} 0;\par
205 \}\par
}
}
{\xe \v exists_key_int\:projeto.c}
{\xe \v projeto.c\:exists_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int exists_key_int (short **  {\i matrix}, int  {\i lines}, unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verify if a given key exists in the matrix. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix with keys \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- key to check if it exists \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
1 if it exists, 0 if it doesn't \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 709                                                                      \{\par
710     {\cf18 short} *allD = key_long_2_digits_int(key);\par
711     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
712         {\cf20 /*if(!matrix[i][0])\{}\par
713 {\cf20             break;}\par
714 {\cf20         \}*/}\par
715         {\cf19 if}(key_digits_2_long_int(matrix[i]) == key_digits_2_long_int(allD))\{\par
716             allD = NULL;\par
717             free(allD);\par
718             {\cf19 return} 1;\par
719         \}\par
720         {\cf20 /*}\par
721 {\cf20         int j = 0;}\par
722 {\cf20         while (matrix[i][j] != -1)\{}\par
723 {\cf20             if(matrix[i][j] != allD[j])\{}\par
724 {\cf20                 break;}\par
725 {\cf20             \} else\{}\par
726 {\cf20                 if(matrix[i][j+1] == -1 && allD[j+1] == -1)\{}\par
727 {\cf20                     return 1;}\par
728 {\cf20                 \}}\par
729 {\cf20             \}}\par
730 {\cf20             j++;}\par
731 {\cf20         \}}\par
732 {\cf20         */}\par
733     \}\par
734     allD = NULL;\par
735     free(allD);\par
736     {\cf19 return} 0;\par
737 \}\par
}
}
{\xe \v find_mul_bipolar_number\:projeto.c}
{\xe \v projeto.c\:find_mul_bipolar_number}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * find_mul_bipolar_number (char *  {\i k})}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Vers\'E3o antiga da fun\'E7\'E3o para calcular chave privada {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i k} \cell }{string com os v\'E1rios digitos da chave publica \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
chave privada \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2043                                       \{\par
2044     {\cf18 char} *n;\par
2045     {\cf18 char} rightNum = {\cf23 '0'}, leftNum = {\cf23 '1'};\par
2046     {\cf18 int} digitos = 2, j = 0, changePos = 0, numDigits = 2;\par
2047 \par
2048     n = ({\cf18 char} *) calloc(digitos, {\cf17 sizeof} ({\cf18 char}));\par
2049     {\cf19 while} (1)\{\par
2050         n = ({\cf18 char} *) realloc(n, digitos);\par
2051         {\cf19 if}(leftNum == {\cf23 '9'} && changePos == digitos -1 && rightNum == {\cf23 '8'})\{\par
2052             digitos++;\par
2053             changePos--;\par
2054             leftNum = {\cf23 '1'};\par
2055             rightNum = {\cf23 '0'};\par
2056         \}\par
2057         {\cf19 if}(rightNum == {\cf23 '9'} && changePos == digitos -1)\{\par
2058             leftNum++;\par
2059         \}\par
2060         {\cf19 if}(changePos == digitos -1)\{\par
2061             changePos = 0;\par
2062             {\cf19 if}(rightNum != {\cf23 '9'})\{\par
2063                 rightNum++;\par
2064             \} {\cf19 else}\{\par
2065                 rightNum = {\cf23 '0'};\par
2066             \}\par
2067         \}\par
2068         {\cf19 if}(leftNum == rightNum)\{\par
2069             rightNum++;\par
2070         \}\par
2071         {\cf19 if}(j > changePos)\{\par
2072             n[j] = rightNum;\par
2073         \} {\cf19 else}\{\par
2074             n[j] = leftNum;\par
2075         \}\par
2076         {\cf19 if}(j == digitos-1)\{\par
2077             {\cf19 if}(atoi(n) > 2147483647 || atoi(n) < 0)\{\par
2078                 n = {\cf22 "\\0"};\par
2079                 {\cf19 return} n;\par
2080             \} {\cf19 else}\{\par
2081                 numDigits = digitos;\par
2082                 n[strlen(n)] = {\cf23 '\\0'};\par
2083                 {\cf19 if}(atoi(n) > atoi(k) && atoi(n)%atoi(k) == 0)\{\par
2084                     {\cf19 return} n;\par
2085                 \}\par
2086                 changePos++;\par
2087                 j = 0;\par
2088             \}\par
2089 \par
2090         \} {\cf19 else}\{\par
2091             j++;\par
2092         \}\par
2093     \}\par
2094 \}\par
}
}
{\xe \v find_mul_bipolar_number_Int\:projeto.c}
{\xe \v projeto.c\:find_mul_bipolar_number_Int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int find_mul_bipolar_number_Int (int  {\i k})}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Vers\'E3o antiga da fun\'E7\'E3o para calcular chave privada {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i k} \cell }{chave publica \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
chave privada \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2101                                       \{\par
2102     {\cf18 int} *n;\par
2103     {\cf18 int} rightNum = 0, leftNum = 1;\par
2104     {\cf18 int} digitos = 2, j = 0, changePos = 0;\par
2105 \par
2106     n = ({\cf18 int} *) calloc(digitos, {\cf17 sizeof} ({\cf18 int}));\par
2107     {\cf19 while} (1)\{\par
2108         n = ({\cf18 int} *) realloc(n, digitos);\par
2109         {\cf19 if}(leftNum == 9 && changePos == digitos -1 && rightNum == 8)\{\par
2110             digitos++;\par
2111             leftNum = 1;\par
2112             rightNum = 0;\par
2113         \}\par
2114         {\cf19 if}(rightNum == 9 && changePos == digitos -1)\{\par
2115             leftNum++;\par
2116         \}\par
2117         {\cf19 if}(changePos == digitos -1)\{\par
2118             changePos = 0;\par
2119             {\cf19 if}(rightNum != 9)\{\par
2120                 rightNum++;\par
2121             \} {\cf19 else}\{\par
2122                 rightNum = 0;\par
2123             \}\par
2124         \}\par
2125         {\cf19 if}(leftNum == rightNum)\{\par
2126             rightNum++;\par
2127         \}\par
2128         {\cf19 if}(j > changePos)\{\par
2129             n[j] = rightNum;\par
2130         \} {\cf19 else}\{\par
2131             n[j] = leftNum;\par
2132         \}\par
2133         {\cf19 if}(j == digitos-1)\{\par
2134             {\cf19 if}(*n > 2147483647 || *n < 0)\{\par
2135                 n = NULL;\par
2136                 {\cf19 return} *n;\par
2137             \} {\cf19 else}\{\par
2138                 {\cf19 if}(*n > k && *n%k == 0)\{\par
2139                     {\cf19 return} *n;\par
2140                 \}\par
2141                 changePos++;\par
2142                 j = 0;\par
2143             \}\par
2144 \par
2145         \} {\cf19 else}\{\par
2146             j++;\par
2147         \}\par
2148     \}\par
2149 \}\par
}
}
{\xe \v freeMatrixChar\:projeto.c}
{\xe \v projeto.c\:freeMatrixChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeMatrixChar (char **  {\i matrix}, int  {\i N})}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que d\'E1 free \'E0 matriz de Char em N linhas {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{numero de linhas \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1989                                          \{\par
1990     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
1991         matrix[i] = NULL;\par
1992         free(matrix[i]);\par
1993     \}\par
1994 \}\par
}
}
{\xe \v freeMatrixShort\:projeto.c}
{\xe \v projeto.c\:freeMatrixShort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeMatrixShort (short **  {\i matrix}, int  {\i N})}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que d\'E1 free \'E0 matriz de Ints em N linhas {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{nuero de linhas \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2001                                            \{\par
2002     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2003         {\cf19 if}(matrix[i] != NULL)\{\par
2004             matrix[i] = NULL;\par
2005             free(matrix[i]);\par
2006         \}\par
2007     \}\par
2008 \}\par
}
}
{\xe \v get_private_key_char\:projeto.c}
{\xe \v projeto.c\:get_private_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long get_private_key_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, int  {\i lines}, unsigned long long  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the private key corresponding to the given public key {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which we want the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key of the given pubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 207                                                                                                                       \{\par
208     {\cf18 char} *keyChar = malloc(numDigitsLong(pubkey) * {\cf17 sizeof} ({\cf18 char}));\par
209     sprintf(keyChar, {\cf22 "%llu"}, pubkey);\par
210     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
211         {\cf19 if}(strcmp(matrix_kpub[i], keyChar) == 0)\{\par
212             keyChar=NULL;\par
213             free(keyChar);\par
214             {\cf19 return} atoll(matrix_kpriv[i]);\par
215         \}\par
216     \}\par
217     keyChar=NULL;\par
218     free(keyChar);\par
219     {\cf19 return} 0;\par
220 \}\par
}
}
{\xe \v get_private_key_int\:projeto.c}
{\xe \v projeto.c\:get_private_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long get_private_key_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, int  {\i lines}, unsigned long long  {\i pubkey})}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the private key corresponding to the given public key {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which we want the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key of the given pubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 739                                                                                                                        \{\par
740     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
741         {\cf19 if}(key_digits_2_long_int(matrix_kpub[i]) == pubkey)\{\par
742             {\cf19 return} key_digits_2_long_int(matrix_kpriv[i]);\par
743         \}\par
744     \}\par
745     {\cf19 return} 0;\par
746 \}\par
}
}
{\xe \v get_runlength_char\:projeto.c}
{\xe \v projeto.c\:get_runlength_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long get_runlength_char (char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, unsigned long long  {\i privkey})}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the run-length key of a given private key {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which we want the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key runlength of the given pubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 222                                                                                                                      \{\par
223     {\cf18 char} *keyChar = malloc(numDigitsLong(privkey) * {\cf17 sizeof} ({\cf18 char}));\par
224     sprintf(keyChar, {\cf22 "%llu"}, privkey);\par
225     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
226         {\cf19 if}(strcmp(matrix_kpriv[i], keyChar) == 0)\{\par
227             keyChar=NULL;\par
228             free(keyChar);\par
229             {\cf19 return} atoll(matrix_kcod[i]);\par
230         \}\par
231     \}\par
232     keyChar=NULL;\par
233     free(keyChar);\par
234     {\cf19 return} 0;\par
235 \}\par
}
}
{\xe \v get_runlength_int\:projeto.c}
{\xe \v projeto.c\:get_runlength_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long get_runlength_int (short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, unsigned long long  {\i privkey})}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the run-length key of a given private key {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pubkey} \cell }{- public key for which we want the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key runlength of the given pubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 748                                                                                                                       \{\par
749     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
750         {\cf19 if}(key_digits_2_long_int(matrix_kpriv[i]) == privkey)\{\par
751             {\cf19 return} key_digits_2_long_int(matrix_kcod[i]);\par
752         \}\par
753     \}\par
754     printf({\cf22 "Chave Nao Encontrada\\n"});\par
755     {\cf19 return} 0;\par
756 \}\par
}
}
{\xe \v insert_keyHolder\:projeto.c}
{\xe \v projeto.c\:insert_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insert_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o vai criar um novo porta chaves e inserir uma dada linha das matrizes nesse porta chaves e inserilo no inicio da lista ligada {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador para os apontadores dos porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mString} \cell }{struct das matrizes de Strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mInts} \cell }{struct das matrizes de Ints \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{linha das matrizes a ser inserida no porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1014                                                                                                               \{\par
1015     KEY_HOLDER* new_keyHolder = (KEY_HOLDER *) malloc({\cf17 sizeof} (KEY_HOLDER));\par
1016     time_t data_criacao;\par
1017     time(&data_criacao);\par
1018     time_t data_modificacao;\par
1019     time(&data_modificacao);\par
1020 \par
1021     {\cf19 if}(new_keyHolder == NULL)\{\par
1022         exit(1);\par
1023     \}\par
1024 \par
1025     new_keyHolder->next = *portaChaves;\par
1026     new_keyHolder->khString.matrixPub = alloc_matrix_char(1, 1);\par
1027     new_keyHolder->khString.matrixPriv = alloc_matrix_char(1, 1);\par
1028     new_keyHolder->khString.matrixCod = alloc_matrix_char(1, 1);\par
1029     new_keyHolder->khInts.matrixPub = alloc_matrix_int(1, 1);\par
1030     new_keyHolder->khInts.matrixPriv = alloc_matrix_int(1, 1);\par
1031     new_keyHolder->khInts.matrixCod = alloc_matrix_int(1, 1);\par
1032 \par
1033     {\cf19 if}(pos >= mString.lines)\{       {\cf20 // se tentar adicionar uma linha que n\'E3o exista \'E9 inserido 0}\par
1034         store_key_char(new_keyHolder->khString.matrixPub, 1, 0);\par
1035         store_key_char(new_keyHolder->khString.matrixPriv, 1, 0);\par
1036         store_key_char(new_keyHolder->khString.matrixCod, 1, 0);\par
1037     \} {\cf19 else}\{\par
1038         store_key_char(new_keyHolder->khString.matrixPub, 1, atoll(mString.matrixPub[pos]));\par
1039         store_key_char(new_keyHolder->khString.matrixPriv, 1, atoll(mString.matrixPriv[pos]));\par
1040         store_key_char(new_keyHolder->khString.matrixCod, 1, atoll(mString.matrixCod[pos]));\par
1041     \}\par
1042     {\cf19 if}(pos >= mInts.lines)\{       {\cf20 // se tentar adicionar uma linha que n\'E3o exista \'E9 inserido 0}\par
1043         store_key_int(new_keyHolder->khInts.matrixPub, 1, 0);\par
1044         store_key_int(new_keyHolder->khInts.matrixPriv, 1, 0);\par
1045         store_key_int(new_keyHolder->khInts.matrixCod, 1, 0);\par
1046     \} {\cf19 else}\{\par
1047         store_key_int(new_keyHolder->khInts.matrixPub, 2, key_digits_2_long_int(mInts.matrixPub[pos]));\par
1048         store_key_int(new_keyHolder->khInts.matrixPriv, 2, key_digits_2_long_int(mInts.matrixPriv[pos]));\par
1049         store_key_int(new_keyHolder->khInts.matrixCod, 2, key_digits_2_long_int(mInts.matrixCod[pos]));\par
1050     \}\par
1051 \par
1052     new_keyHolder->data_criacao = ctime(&data_criacao);             {\cf20 // insere a data de cria\'E7\'E3o}\par
1053     new_keyHolder->data_modificacao = ctime(&data_modificacao);     {\cf20 // insere a data de modifica\'E7\'E3o}\par
1054 \par
1055     {\cf19 if}(*portaChaves == NULL)\{           {\cf20 // se n\'E3o existirem porta chaves}\par
1056         new_keyHolder->sieInts++;\par
1057         new_keyHolder->sizeStrings++;\par
1058         *portaChaves = new_keyHolder;\par
1059         {\cf19 return};\par
1060     \}\par
1061 \par
1062     new_keyHolder->sieInts++;\par
1063     new_keyHolder->sizeStrings++;\par
1064     *portaChaves = new_keyHolder;       {\cf20 // se j\'E1 existirem porta chaves o primeiro agora \'E9 o new_keyHolder}\par
1065 \}\par
}
}
{\xe \v insertionSort_char\:projeto.c}
{\xe \v projeto.c\:insertionSort_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insertionSort_char (char *  {\i a}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmo de ordena\'E7\'E3o insertion sort pega num valor do array e compara com os anteriores Complexidade algoritmica: Best case: N / Average: 1/4N^2 / Worst: 1/2N^2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordem (1 - ascendente e 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2590                                                     \{\par
2591     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2592         {\cf19 for} ({\cf18 int} j = i; j > 0; j--) \{\par
2593             {\cf19 if}(order == 1)\{\par
2594                 {\cf19 if}(strcmp(a[j], {\cf22 "-1"}) == 0) {\cf19 break};\par
2595                 {\cf19 if}(atoll(a[j]) < atoll(a[j-1]))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2596                     swapChar(a, j, j-1);\par
2597                 \} {\cf19 else} {\cf19 break};\par
2598             \} {\cf19 else}\{\par
2599                 {\cf19 if}(strcmp(a[j], {\cf22 "-1"}) == 0) {\cf19 break};\par
2600                 {\cf19 if}(atoll(a[j]) > atoll(a[j-1]))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2601                     swapChar(a, j, j-1);\par
2602                 \} {\cf19 else} {\cf19 break};\par
2603             \}\par
2604         \}\par
2605     \}\par
2606 \}\par
}
}
{\xe \v insertionSort_int\:projeto.c}
{\xe \v projeto.c\:insertionSort_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insertionSort_int (short *  {\i a}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmo de ordena\'E7\'E3o insertion sort pega num valor do array e compara com os anteriores Complexidade algoritmica: Best case: N / Average: 1/4N^2 / Worst: 1/2N^2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2888                                                     \{\par
2889     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2890         {\cf19 for} ({\cf18 int} j = i; j > 0; j--) \{\par
2891             {\cf19 if}(order == 1)\{\par
2892                 {\cf19 if}(a[j][0] == -1) {\cf19 break};\par
2893                 {\cf19 if}(key_digits_2_long_int(a[j]) < key_digits_2_long_int(a[j-1]))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2894                     swapInt(a, j, j-1);\par
2895                 \} {\cf19 else} {\cf19 break};\par
2896             \} {\cf19 else}\{\par
2897                 {\cf19 if}(a[j][0] == -1) {\cf19 break};\par
2898                 {\cf19 if}(key_digits_2_long_int(a[j]) > key_digits_2_long_int(a[j-1]))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2899                     swapInt(a, j, j-1);\par
2900                 \} {\cf19 else} {\cf19 break};\par
2901             \}\par
2902         \}\par
2903     \}\par
2904 \}\par
}
}
{\xe \v insertionSortDigits_char\:projeto.c}
{\xe \v projeto.c\:insertionSortDigits_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insertionSortDigits_char (char *  {\i a}[], char *  {\i priv}[], char *  {\i cod}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmo de ordena\'E7\'E3o insertion sort pega num valor de digitos do array e compara com os anteriores Complexidade algoritmica: Best case: N / Average: 1/4N^2 / Worst: 1/2N^2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de string de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strignde chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de string de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2774                                                                                      \{\par
2775     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2776         {\cf19 for} ({\cf18 int} j = i; j > 0; j--) \{\par
2777             {\cf19 if}(order == 1)\{\par
2778                 {\cf19 if}(strcmp(a[j], {\cf22 "-1"}) == 0) {\cf19 break};\par
2779                 {\cf19 if}(numDigitsLong(atoll(a[j])) < numDigitsLong(atoll(a[j-1])))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2780                     swapCharDigits(a, priv, cod, j, j-1);\par
2781                 \} {\cf19 else} {\cf19 break};\par
2782             \} {\cf19 else}\{\par
2783                 {\cf19 if}(strcmp(a[j], {\cf22 "-1"}) == 0) {\cf19 break};\par
2784                 {\cf19 if}(numDigitsLong(atoll(a[j])) > numDigitsLong(atoll(a[j-1])))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2785                     swapCharDigits(a, priv, cod, j, j-1);\par
2786                 \} {\cf19 else} {\cf19 break};\par
2787             \}\par
2788         \}\par
2789     \}\par
2790 \}\par
}
}
{\xe \v insertionSortDigits_int\:projeto.c}
{\xe \v projeto.c\:insertionSortDigits_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insertionSortDigits_int (short *  {\i a}[], short *  {\i priv}[], short *  {\i cod}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmo de ordena\'E7\'E3o insertion sort pega num valor de digitos do array e compara com os anteriores Complexidade algoritmica: Best case: N / Average: 1/4N^2 / Worst: 1/2N^2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short de chves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3072                                                                                        \{\par
3073     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
3074         {\cf19 for} ({\cf18 int} j = i; j > 0; j--) \{\par
3075             {\cf19 if}(order == 1)\{\par
3076                 {\cf19 if}(a[j][0] == -1) {\cf19 break};\par
3077                 {\cf19 if}(numDigitsLong(key_digits_2_long_int(a[j])) < numDigitsLong(key_digits_2_long_int(a[j-1])))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
3078                     swapIntDigits(a, priv, cod, j, j-1);\par
3079                 \} {\cf19 else} {\cf19 break};\par
3080             \} {\cf19 else}\{\par
3081                 {\cf19 if}(a[j][0] == -1) {\cf19 break};\par
3082                 {\cf19 if}(numDigitsLong(key_digits_2_long_int(a[j])) > numDigitsLong(key_digits_2_long_int(a[j-1])))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
3083                     swapIntDigits(a, priv, cod, j, j-1);\par
3084                 \} {\cf19 else} {\cf19 break};\par
3085             \}\par
3086         \}\par
3087     \}\par
3088 \}\par
}
}
{\xe \v key_digits_2_long_char\:projeto.c}
{\xe \v projeto.c\:key_digits_2_long_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long key_digits_2_long_char (char *  {\i keydigits})}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Receives an array of digits in ascii i.e. chars and returns the long key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keydigits} \cell }{- array of digits of key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
address of array of digits for a given key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 19                                                           \{\par
20     {\cf19 return} atoll(keydigits);    {\cf20 //converter de (char*) para (unsigned long long) e returnar o valor}\par
21 \}\par
}
}
{\xe \v key_digits_2_long_int\:projeto.c}
{\xe \v projeto.c\:key_digits_2_long_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long key_digits_2_long_int (short *  {\i keydigits})}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Receives an array of digits and returns the long key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keydigits} \cell }{- array of digits of key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
address of array of digits for a given key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 516                                                           \{\par
517     {\cf18 int} i = 0, size = 0, pow = 10;\par
518     {\cf18 unsigned} {\cf18 long} {\cf18 long} pubKey = 0;\par
519 \par
520     {\cf19 while} (1)\{\par
521         {\cf19 if}(keydigits[i] < 0) {\cf19 break};\par
522         i++;\par
523         size++;\par
524     \}\par
525     {\cf19 if}(size == 0) {\cf19 return} 0;\par
526 \par
527     {\cf19 for} ({\cf18 int} j = 0; j < size; j++) \{\par
528         {\cf19 if}(j == 0)\{\par
529             pubKey = keydigits[j];\par
530         \} {\cf19 else}\{\par
531             {\cf19 if}(keydigits[j] == 0)\{\par
532                 pubKey *= pow;\par
533             \} {\cf19 else}\{\par
534                 pubKey *= pow;\par
535                 pubKey += keydigits[j];\par
536             \}\par
537         \}\par
538     \}\par
539 \par
540     {\cf19 return} pubKey;\par
541 \}\par
}
}
{\xe \v key_long_2_digits_char\:projeto.c}
{\xe \v projeto.c\:key_long_2_digits_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * key_long_2_digits_char (unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create an array of digits in ascii i.e. chars for a given key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- long key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
address of array of digits in ascii for a given key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 12                                                     \{\par
13     {\cf18 int} digits = numDigits(key);                        {\cf20 //variavel com o numero de digitos de (key)}\par
14     {\cf18 char} *keydigits = malloc(digits * {\cf17 sizeof} ({\cf18 char}));   {\cf20 //alocar mem\'F3ria para *keydigits com o valor de (digits)}\par
15     sprintf(keydigits, {\cf22 "%llu"}, key);           {\cf20 //converter o valor de (unsigned long long) para (char*)}\par
16     {\cf19 return} keydigits;                                         {\cf20 //returnar o valor de (keydigits)}\par
17 \}\par
}
}
{\xe \v key_long_2_digits_int\:projeto.c}
{\xe \v projeto.c\:key_long_2_digits_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short * key_long_2_digits_int (unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Create an array of digits for a given key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- long key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
address of array of digits for a given key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 491                                                     \{\par
492     {\cf18 int} i = 0, s=0, hi = numDigitsLong(key)-1, size = (numDigitsLong(key)+1);\par
493     {\cf18 short} *keyDigits = ({\cf18 short} *) calloc(size * {\cf17 sizeof} ({\cf18 short}), {\cf17 sizeof} (short ));\par
494     {\cf18 short} temp = 0;\par
495     {\cf18 unsigned} {\cf18 long} {\cf18 long} tempKey = key;\par
496     {\cf19 if} (keyDigits == NULL) \{\par
497         printf({\cf22 "Erro no malloc\\n"});\par
498         {\cf19 return} 0;\par
499     \}\par
500     {\cf19 while} (tempKey)\{\par
501         keyDigits[i] = tempKey%10;\par
502         tempKey /= 10;\par
503         i++;\par
504     \}\par
505     {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(key); ++j) \{      {\cf20 // inverter o array (para guardar com a ordem normal da key)}\par
506         {\cf19 if}(hi <= j) {\cf19 break};\par
507         temp = keyDigits[j];\par
508         keyDigits[j] = keyDigits[hi];\par
509         keyDigits[hi] = temp;\par
510         hi--;\par
511     \}\par
512     keyDigits[size-1] = -1;\par
513     {\cf19 return} keyDigits;\par
514 \}\par
}
}
{\xe \v list_keys_char\:projeto.c}
{\xe \v projeto.c\:list_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void list_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print all keys on the console, sorted by pubkeys sizes (i.e. number of digits). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 0 ? current order : order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 390                                                                                                       \{\par
391     {\cf20 //shellSortCharDigits(matrix_kpub, matrix_kpriv, matrix_kcod, lines, order);}\par
392     mergeDigits_char_sort_base(matrix_kpub, matrix_kpriv, matrix_kcod, lines, order);\par
393 \}\par
}
}
{\xe \v list_keys_int\:projeto.c}
{\xe \v projeto.c\:list_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void list_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print all keys on the console, sorted by pubkeys sizes (i.e. number of digits). {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 0 ? current order : order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 906                                                                                                         \{\par
907     {\cf20 //shellSortIntDigits(matrix_kpub, matrix_kpriv, matrix_kcod, lines, order);}\par
908     mergeDigits_int_sort_base(matrix_kpub, matrix_kpriv, matrix_kcod, lines, order);\par
909 \}\par
}
}
{\xe \v load_txt_keyHolder\:projeto.c}
{\xe \v projeto.c\:load_txt_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void load_txt_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts}, int  {\i keyHolderPos}, int  {\i newKeysPos}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3oq eu recebe um porta chaves de um ficheiro {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mString} \cell }{struct de matrizes string \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mInts} \cell }{struct de matrizes ints \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i newKeysPos} \cell }{linha do porta chaves a adicionar \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{nome do ficheiro \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1453                                                                                                                                                            \{\par
1454 \par
1455     FILE *fileChavesPubRead;\par
1456     fileChavesPubRead = fopen(filename, {\cf22 "r"});\par
1457     {\cf18 char} * valueString = NULL, *privKey = NULL, *codKey = NULL;\par
1458     {\cf18 int} i = 0, stopPos = 1, valuePos = 0, sizeMax = 1;\par
1459     {\cf18 short} *allD = NULL;\par
1460     {\cf18 unsigned} {\cf18 long} {\cf18 long} count = 1;\par
1461     {\cf18 unsigned} {\cf18 long} {\cf18 long} *value = ({\cf18 unsigned} {\cf18 long} {\cf18 long} *) calloc(count, {\cf17 sizeof} ({\cf18 unsigned} {\cf18 long} {\cf18 long}));\par
1462 \par
1463     {\cf19 if}(fileChavesPubRead == NULL)\{\par
1464         printf({\cf22 "Ficheiro nao existe\\n"});\par
1465         {\cf19 return};\par
1466     \}\par
1467 \par
1468     KEY_HOLDER * curr = *portaChaves;\par
1469     {\cf19 while} (stopPos != keyHolderPos)\{\par
1470         curr = curr->next;\par
1471         stopPos++;\par
1472     \}\par
1473 \par
1474     {\cf19 for} ({\cf18 int} j = 0; curr->khString.matrixPub[j] != NULL; ++j) \{\par
1475         sizeMax++;\par
1476     \}\par
1477 \par
1478     {\cf19 while} (fscanf (fileChavesPubRead, {\cf22 "%llu"}, &value[count-1]) == 1)\{\par
1479         count++;\par
1480         value = ({\cf18 unsigned} {\cf18 long} {\cf18 long} *) realloc(value, count * {\cf17 sizeof} ({\cf18 unsigned} {\cf18 long} {\cf18 long}));\par
1481     \}\par
1482 \par
1483     {\cf19 while} (i < count/6)\{\par
1484 \par
1485         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1486         sprintf(valueString, {\cf22 "%llu"}, value[valuePos]);\par
1487         {\cf20 //privKey = (char*) calloc(100, sizeof (char));}\par
1488         {\cf20 //codKey = (char*) calloc(100,  sizeof (char));}\par
1489         {\cf20 //sprintf(privKey, "%llu", calc_private_key_char(value[valuePos]));}\par
1490         {\cf20 //sprintf(codKey, "%llu", calc_runlength_char(calc_private_key_char(value[valuePos])));}\par
1491         {\cf20 //if(!curr->khString.matrixPub[i])\{}\par
1492             curr->khString.matrixPub[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString)),  {\cf17 sizeof} ({\cf18 char}));\par
1493             curr->khString.matrixPub[newKeysPos+i] = valueString;\par
1494         {\cf20 //\}}\par
1495 \par
1496         {\cf20 //free(valueString);}\par
1497         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1498         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+1]);\par
1499         {\cf20 //if(!curr->khString.matrixPriv[i])\{}\par
1500             curr->khString.matrixPriv[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString)),  {\cf17 sizeof} ({\cf18 char}));\par
1501             curr->khString.matrixPriv[newKeysPos+i] = valueString;\par
1502         {\cf20 //\}}\par
1503 \par
1504         {\cf20 //free(valueString);}\par
1505         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1506         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+2]);\par
1507         {\cf20 //if(!curr->khString.matrixCod[i])\{}\par
1508             curr->khString.matrixCod[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString)),  {\cf17 sizeof} ({\cf18 char}));\par
1509             curr->khString.matrixCod[newKeysPos+i] = valueString;\par
1510         {\cf20 //\}}\par
1511 \par
1512         {\cf20 //free(valueString);}\par
1513         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1514         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+3]);\par
1515         {\cf20 //if(!curr->khInts.matrixPub[i])\{}\par
1516             curr->khInts.matrixPub[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString))+1,  {\cf17 sizeof} ({\cf18 short} ));\par
1517             {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(atoll(valueString)); ++j) \{\par
1518                 curr->khInts.matrixPub[newKeysPos+i][j] = valueString[j]-{\cf23 '0'};\par
1519             \}\par
1520             curr->khInts.matrixPub[newKeysPos+i][numDigitsLong(atoll(valueString))] = -1;\par
1521         {\cf20 //\}}\par
1522 \par
1523         {\cf20 //free(valueString);}\par
1524         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1525         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+4]);\par
1526         {\cf20 //if(!curr->khInts.matrixPriv[i])\{}\par
1527             curr->khInts.matrixPriv[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString))+1,  {\cf17 sizeof} ({\cf18 short} ));\par
1528             {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(atoll(valueString)); ++j) \{\par
1529                 curr->khInts.matrixPriv[newKeysPos+i][j] = valueString[j]-{\cf23 '0'};\par
1530             \}\par
1531             curr->khInts.matrixPriv[newKeysPos+i][numDigitsLong(atoll(valueString))] = -1;\par
1532         {\cf20 //\}}\par
1533 \par
1534         {\cf20 //free(valueString);}\par
1535         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1536         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+5]);\par
1537         {\cf20 //if(!curr->khInts.matrixCod[i])\{}\par
1538             curr->khInts.matrixCod[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString))+1,  {\cf17 sizeof} ({\cf18 short} ));\par
1539             {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(atoll(valueString)); ++j) \{\par
1540                 curr->khInts.matrixCod[newKeysPos+i][j] = valueString[j]-{\cf23 '0'};\par
1541             \}\par
1542         curr->khInts.matrixCod[newKeysPos+i][numDigitsLong(atoll(valueString))] = -1;\par
1543         {\cf20 //\}}\par
1544 \par
1545         free(valueString);\par
1546         valuePos += 6;\par
1547         i++;\par
1548     \}\par
1549     curr->khString.matrixPub[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1550     curr->khString.matrixPriv[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1551     curr->khString.matrixCod[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1552     curr->khInts.matrixPub[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 short} ));\par
1553     curr->khInts.matrixPriv[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 short} ));\par
1554     curr->khInts.matrixCod[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 short} ));\par
1555     curr->khString.matrixPub[newKeysPos+i+1] = NULL;\par
1556     curr->khString.matrixPriv[newKeysPos+i+1] = NULL;\par
1557     curr->khString.matrixCod[newKeysPos+i+1] = NULL;\par
1558     curr->khInts.matrixPub[newKeysPos+i+1] = NULL;\par
1559     curr->khInts.matrixPriv[newKeysPos+i+1] = NULL;\par
1560     curr->khInts.matrixCod[newKeysPos+i+1] = NULL;\par
1561 \par
1562     free(value);\par
1563     fclose(fileChavesPubRead);\par
1564 \} {\cf20 //TODO Load porta Chaves de ficheiros}\par
}
}
{\xe \v load_txt_keys_char\:projeto.c}
{\xe \v projeto.c\:load_txt_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void load_txt_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loads data into the matrices from a text file. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the text file to load data from \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 421                                                                                                                 \{\par
422     FILE *fileChavesPubRead;\par
423     fileChavesPubRead = fopen(filename, {\cf22 "r"});\par
424     {\cf18 int} i = 0, j = 0;\par
425     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0, codKey = 0, t = 0, count = 1;\par
426     {\cf18 char} **value = ({\cf18 char} **) calloc(count, {\cf17 sizeof} ({\cf18 char}*));\par
427     value[0] = malloc(1 * {\cf17 sizeof} ({\cf18 char}));\par
428     {\cf18 char} str[lines][200];\par
429 \par
430     {\cf19 if}(fileChavesPubRead == NULL)\{\par
431         printf({\cf22 "Ficheiro nao existe\\n"});\par
432         {\cf19 return};\par
433     \}\par
434 \par
435     {\cf19 while} (fscanf (fileChavesPubRead, {\cf22 "%s"}, value[count-1]) == 1)\{\par
436         count++;\par
437         value = ({\cf18 char} **) realloc(value, count * {\cf17 sizeof} ({\cf18 char}*));\par
438         value[count-1] = ({\cf18 char} *) calloc(1, {\cf17 sizeof} ({\cf18 char}));\par
439     \}\par
440 \par
441     j = 0;\par
442     {\cf19 while} (i < lines && i < count)\{\par
443         strcpy(matrix_kpub[j], value[i]);\par
444         strcpy(matrix_kpriv[j], value[i+1]);\par
445         strcpy(matrix_kcod[j], value[i+2]);\par
446         i += 3;\par
447         j++;\par
448     \}\par
449 \par
450     fclose(fileChavesPubRead);\par
451 \}\par
}
}
{\xe \v load_txt_keys_int\:projeto.c}
{\xe \v projeto.c\:load_txt_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void load_txt_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loads data into the matrices from a text file. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the text file to load data from \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 938                                                                                                                   \{\par
939 \par
940     FILE *fileChavesPubRead;\par
941     fileChavesPubRead = fopen(filename, {\cf22 "r"});\par
942     {\cf18 int} i = 0;\par
943     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0, codKey = 0, count = 1;\par
944     {\cf18 unsigned} {\cf18 long} {\cf18 long} *value = ({\cf18 unsigned} {\cf18 long} {\cf18 long} *) calloc(count, {\cf17 sizeof} ({\cf18 unsigned} {\cf18 long} {\cf18 long}));\par
945 \par
946     {\cf19 if}(fileChavesPubRead == NULL)\{\par
947         printf({\cf22 "Ficheiro nao existe\\n"});\par
948         {\cf19 return};\par
949     \}\par
950 \par
951     {\cf19 while} (fscanf (fileChavesPubRead, {\cf22 "%llu"}, &value[count-1]) == 1)\{\par
952         count++;\par
953         value = ({\cf18 unsigned} {\cf18 long} {\cf18 long} *) realloc(value, count * {\cf17 sizeof} ({\cf18 unsigned} {\cf18 long} {\cf18 long}));\par
954     \}\par
955 \par
956     {\cf19 while} (i <= lines && i < count/3)\{\par
957         privKey = calc_private_key_int(value[i]);\par
958         codKey = calc_runlength_int(privKey);\par
959         store_key_int(matrix_kpub, lines, value[i]);\par
960         store_key_int(matrix_kpriv, lines, privKey);\par
961         store_key_int(matrix_kcod, lines, codKey);\par
962         i++;\par
963     \}\par
964 \par
965     free(value);\par
966     fclose(fileChavesPubRead);\par
967 \}\par
}
}
{\xe \v merge_char\:projeto.c}
{\xe \v projeto.c\:merge_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_char (char *  {\i a}[], char *  {\i aux}[], int  {\i lo}, int  {\i mid}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
faz o merge dos 2 arrays de forma a ficarem ordenados Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mid} \cell }{posi\'E7\'E3o do meio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordem (1 - ascendente e 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2516                                                                            \{\par
2517     {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2518         {\cf19 if}(strcmp(a[k], {\cf22 "-1"}) == 0)\{\par
2519             hi--;\par
2520             {\cf19 continue};\par
2521         \}\par
2522         aux[k] = malloc(strlen(a[k]) * {\cf17 sizeof} ({\cf18 char}));\par
2523         strcpy(aux[k], a[k]);\par
2524     \}\par
2525     {\cf18 int} i = lo, j = mid+1;\par
2526     {\cf19 if}(order == 1)\{\par
2527         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2528             {\cf19 if}      (i > mid)                           strcpy(a[k], aux[j++]);\par
2529             {\cf19 else} {\cf19 if} (j > hi)                            strcpy(a[k], aux[i++]);\par
2530             {\cf19 else} {\cf19 if} (atoll(aux[j]) < atoll(aux[i]))     strcpy(a[k], aux[j++]);\par
2531             {\cf19 else}                                        strcpy(a[k], aux[i++]);\par
2532         \}\par
2533     \} {\cf19 else}\{\par
2534         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2535             {\cf19 if}      (i > mid)                           strcpy(a[k], aux[j++]);\par
2536             {\cf19 else} {\cf19 if} (j > hi)                            strcpy(a[k], aux[i++]);\par
2537             {\cf19 else} {\cf19 if} (atoll(aux[j]) > atoll(aux[i]))     strcpy(a[k], aux[j++]);\par
2538             {\cf19 else}                                        strcpy(a[k], aux[i++]);\par
2539         \}\par
2540     \}\par
2541 \}\par
}
}
{\xe \v merge_char_sort_base\:projeto.c}
{\xe \v projeto.c\:merge_char_sort_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_char_sort_base (char *  {\i a}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria o array auxiliar para utilizar no algoritmo de merge sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2501                                                       \{\par
2502     {\cf18 char} **aux = malloc(N * {\cf17 sizeof} ({\cf18 char}*));\par
2503     merge_char_sort_recursive_cutoff(a, aux, 0, N-1, order);\par
2504 \}\par
}
}
{\xe \v merge_char_sort_recursive_basic\:projeto.c}
{\xe \v projeto.c\:merge_char_sort_recursive_basic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_char_sort_recursive_basic (char *  {\i a}[], char *  {\i aux}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordem (1 - ascendente e 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2552                                                                                        \{\par
2553 \par
2554     {\cf19 if}(hi <= lo) {\cf19 return};\par
2555     {\cf18 int} mid = lo + (hi-lo)/2;\par
2556     merge_char_sort_recursive_basic(a, aux, lo, mid, order);\par
2557     merge_char_sort_recursive_basic(a, aux, mid+1, hi, order);\par
2558     merge_char(a, aux, lo, mid, hi, order);\par
2559 \}\par
}
}
{\xe \v merge_char_sort_recursive_cutoff\:projeto.c}
{\xe \v projeto.c\:merge_char_sort_recursive_cutoff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_char_sort_recursive_cutoff (char *  {\i a}[], char *  {\i aux}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array e caso o tamanho do array seja menor que 10 usa o insertion sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordem (1 - ascendente e 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2570                                                                                         \{\par
2571 \par
2572     {\cf19 if} (hi <= lo + CUTOFF - 1)\par
2573     \{\par
2574         insertionSort_char(&a[lo], hi-lo+1, order);\par
2575         {\cf19 return};\par
2576     \}\par
2577     {\cf18 int} mid = lo + (hi-lo)/2;\par
2578     merge_char_sort_recursive_basic(a, aux, lo, mid, order);\par
2579     merge_char_sort_recursive_basic(a, aux, mid+1, hi, order);\par
2580     merge_char(a, aux, lo, mid, hi, order);\par
2581 \}\par
}
}
{\xe \v merge_int\:projeto.c}
{\xe \v projeto.c\:merge_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_int (short *  {\i a}[], short *  {\i aux}[], int  {\i lo}, int  {\i mid}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
faz o merge dos 2 arrays de forma a ficarem ordenados Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mid} \cell }{posi\'E7\'E3o do meio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2814                                                                             \{\par
2815     {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2816         {\cf19 if}(a[k][0] == -1)\{\par
2817             hi--;\par
2818             {\cf19 continue};\par
2819         \}\par
2820         aux[k] = malloc(numDigitsLong(key_digits_2_long_int(a[k]) * {\cf17 sizeof} ({\cf18 short})));\par
2821         aux[k] = a[k];\par
2822     \}\par
2823     {\cf18 int} i = lo, j = mid+1;\par
2824     {\cf19 if}(order == 1)\{\par
2825         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2826             {\cf19 if}      (i > mid)                           a[k] = aux[j++];\par
2827             {\cf19 else} {\cf19 if} (j > hi)                            a[k] = aux[i++];\par
2828             {\cf19 else} {\cf19 if} (key_digits_2_long_int(aux[j]) < key_digits_2_long_int(aux[i]))                   a[k] = aux[j++];\par
2829             {\cf19 else}                                        a[k] = aux[i++];\par
2830         \}\par
2831     \} {\cf19 else}\{\par
2832         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2833             {\cf19 if}      (i > mid)                           a[k] = aux[j++];\par
2834             {\cf19 else} {\cf19 if} (j > hi)                            a[k] = aux[i++];\par
2835             {\cf19 else} {\cf19 if} (key_digits_2_long_int(aux[j]) > key_digits_2_long_int(aux[i]))     a[k] = aux[j++];\par
2836             {\cf19 else}                                        a[k] = aux[i++];\par
2837         \}\par
2838     \}\par
2839 \}\par
}
}
{\xe \v merge_int_sort_base\:projeto.c}
{\xe \v projeto.c\:merge_int_sort_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_int_sort_base (short *  {\i a}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria o array auxiliar para utilizar no algoritmo de merge sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2799                                                       \{\par
2800     {\cf18 short} **aux = malloc(N * {\cf17 sizeof} ({\cf18 short}*));\par
2801     merge_int_sort_recursive_cutoff(a, aux, 0, N-1, order);\par
2802 \}\par
}
}
{\xe \v merge_int_sort_recursive_basic\:projeto.c}
{\xe \v projeto.c\:merge_int_sort_recursive_basic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_int_sort_recursive_basic (short *  {\i a}[], short *  {\i aux}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2850                                                                                         \{\par
2851 \par
2852     {\cf19 if}(hi <= lo) {\cf19 return};\par
2853     {\cf18 int} mid = lo + (hi-lo)/2;\par
2854     merge_int_sort_recursive_basic(a, aux, lo, mid, order);\par
2855     merge_int_sort_recursive_basic(a, aux, mid+1, hi, order);\par
2856     merge_int(a, aux, lo, mid, hi, order);\par
2857 \}\par
}
}
{\xe \v merge_int_sort_recursive_cutoff\:projeto.c}
{\xe \v projeto.c\:merge_int_sort_recursive_cutoff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_int_sort_recursive_cutoff (short *  {\i a}[], short *  {\i aux}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array e caso o tamanho do array seja menor que 10 usa o insertion sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2868                                                                                          \{\par
2869 \par
2870     {\cf19 if} (hi <= lo + CUTOFF - 1)\par
2871     \{\par
2872         insertionSort_int(&a[lo], hi-lo+1, order);\par
2873         {\cf19 return};\par
2874     \}\par
2875     {\cf18 int} mid = lo + (hi-lo)/2;\par
2876     merge_int_sort_recursive_basic(a, aux, lo, mid, order);\par
2877     merge_int_sort_recursive_basic(a, aux, mid+1, hi, order);\par
2878     merge_int(a, aux, lo, mid, hi, order);\par
2879 \}\par
}
}
{\xe \v mergeDigits_char\:projeto.c}
{\xe \v projeto.c\:mergeDigits_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_char (char *  {\i a}[], char *  {\i aux}[], char *  {\i priv}[], char *  {\i cod}[], char *  {\i auxPriv}[], char *  {\i auxCod}[], int  {\i lo}, int  {\i mid}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
faz o merge dos 2 arrays de forma a ficarem ordenados (por digitos) Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strings com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de strings co chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mid} \cell }{posi\'E7\'E3o do meio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2638                                                                                                                                              \{\par
2639     {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2640         {\cf19 if}(strcmp(a[k], {\cf22 "-1"}) == 0)\{\par
2641             hi--;\par
2642             {\cf19 continue};\par
2643         \}\par
2644         aux[k] = malloc((strlen(a[k])+1) * {\cf17 sizeof} ({\cf18 char}));\par
2645         auxPriv[k] = malloc((strlen(priv[k])+1) * {\cf17 sizeof} ({\cf18 char}));\par
2646         auxCod[k] = malloc((strlen(cod[k])+1) * {\cf17 sizeof} ({\cf18 char}));\par
2647         strcpy(aux[k], a[k]);\par
2648         strcpy(auxPriv[k], priv[k]);\par
2649         strcpy(auxCod[k], cod[k]);\par
2650     \}\par
2651     {\cf18 int} i = lo, j = mid+1;\par
2652     {\cf19 if}(order == 1)\{\par
2653         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2654             {\cf19 if} (i > mid)\{\par
2655                 strcpy(a[k], aux[j++]);\par
2656                 j--;\par
2657                 strcpy(priv[k], auxPriv[j++]);\par
2658                 j--;\par
2659                 strcpy(cod[k], auxCod[j++]);\par
2660             \}\par
2661             {\cf19 else} {\cf19 if} (j > hi)\{\par
2662                 strcpy(a[k], aux[i++]);\par
2663                 i--;\par
2664                 strcpy(priv[k], auxPriv[i++]);\par
2665                 i--;\par
2666                 strcpy(cod[k], auxCod[i++]);\par
2667             \}\par
2668             {\cf19 else} {\cf19 if} (numDigitsLong(atoll(aux[j])) < numDigitsLong(atoll(aux[i])))\{\par
2669                 strcpy(a[k], aux[j++]);\par
2670                 j--;\par
2671                 strcpy(priv[k], auxPriv[j++]);\par
2672                 j--;\par
2673                 strcpy(cod[k], auxCod[j++]);\par
2674             \}\par
2675             {\cf19 else}\{\par
2676                 strcpy(a[k], aux[i++]);\par
2677                 i--;\par
2678                 strcpy(priv[k], auxPriv[i++]);\par
2679                 i--;\par
2680                 strcpy(cod[k], auxCod[i++]);\par
2681             \}\par
2682         \}\par
2683     \} {\cf19 else}\{\par
2684         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2685             {\cf19 if} (i > mid)\{\par
2686                 strcpy(a[k], aux[j++]);\par
2687                 j--;\par
2688                 strcpy(priv[k], auxPriv[j++]);\par
2689                 j--;\par
2690                 strcpy(cod[k], auxCod[j++]);\par
2691             \}\par
2692             {\cf19 else} {\cf19 if} (j > hi) \{\par
2693                 strcpy(a[k], aux[i++]);\par
2694                 i--;\par
2695                 strcpy(priv[k], auxPriv[i++]);\par
2696                 i--;\par
2697                 strcpy(cod[k], auxCod[i++]);\par
2698             \}\par
2699             {\cf19 else} {\cf19 if} (numDigitsLong(atoll(aux[j])) > numDigitsLong(atoll(aux[i])))\{\par
2700                 strcpy(a[k], aux[j++]);\par
2701                 j--;\par
2702                 strcpy(priv[k], auxPriv[j++]);\par
2703                 j--;\par
2704                 strcpy(cod[k], auxCod[j++]);\par
2705             \}\par
2706             {\cf19 else} \{\par
2707                 strcpy(a[k], aux[i++]);\par
2708                 i--;\par
2709                 strcpy(priv[k], auxPriv[i++]);\par
2710                 i--;\par
2711                 strcpy(cod[k], auxCod[i++]);\par
2712             \}\par
2713         \}\par
2714     \}\par
2715 \}\par
}
}
{\xe \v mergeDigits_char_sort_base\:projeto.c}
{\xe \v projeto.c\:mergeDigits_char_sort_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_char_sort_base (char *  {\i a}[], char *  {\i priv}[], char *  {\i cod}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria os arrais auxiliares para utilizar no algoritmo de merge sort (ordem por digitos) Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strings com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de strings com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2617                                                                                        \{\par
2618     {\cf18 char} **aux = malloc(N * {\cf17 sizeof} ({\cf18 char}*));\par
2619     {\cf18 char} **auxPriv = malloc(N * {\cf17 sizeof} ({\cf18 char}*));\par
2620     {\cf18 char} **auxCod = malloc(N * {\cf17 sizeof} ({\cf18 char}*));\par
2621     mergeDigits_char_sort_recursive_cutoff(a, aux, priv, cod, auxPriv, auxCod, 0, N-1, order);\par
2622 \}\par
}
}
{\xe \v mergeDigits_char_sort_recursive_basic\:projeto.c}
{\xe \v projeto.c\:mergeDigits_char_sort_recursive_basic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_char_sort_recursive_basic (char *  {\i a}[], char *  {\i aux}[], char *  {\i priv}[], char *  {\i cod}[], char *  {\i auxPriv}[], char *  {\i auxCod}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de string de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2730                                                                                                                                                          \{\par
2731 \par
2732     {\cf19 if}(hi <= lo) {\cf19 return};\par
2733     {\cf18 int} mid = lo + (hi-lo)/2;\par
2734     mergeDigits_char_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, lo, mid, order);\par
2735     mergeDigits_char_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, mid+1, hi, order);\par
2736     mergeDigits_char(a, aux, priv, cod, auxPriv, auxCod, lo, mid, hi, order);\par
2737 \}\par
}
}
{\xe \v mergeDigits_char_sort_recursive_cutoff\:projeto.c}
{\xe \v projeto.c\:mergeDigits_char_sort_recursive_cutoff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_char_sort_recursive_cutoff (char *  {\i a}[], char *  {\i aux}[], char *  {\i priv}[], char *  {\i cod}[], char *  {\i auxPriv}[], char *  {\i auxCod}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array e caso o tamanho do array seja menor que 10 usa o insertion sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de string de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de string de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de string de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2752                                                                                                                                                           \{\par
2753 \par
2754     {\cf19 if} (hi <= lo + CUTOFF - 1)\par
2755     \{\par
2756         insertionSortDigits_char(&a[lo], priv, cod, hi-lo+1, order);\par
2757         {\cf19 return};\par
2758     \}\par
2759     {\cf18 int} mid = lo + (hi-lo)/2;\par
2760     mergeDigits_char_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, lo, mid, order);\par
2761     mergeDigits_char_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, mid+1, hi, order);\par
2762     mergeDigits_char(a, aux, priv, cod, auxPriv, auxCod, lo, mid, hi, order);\par
2763 \}\par
}
}
{\xe \v mergeDigits_int\:projeto.c}
{\xe \v projeto.c\:mergeDigits_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_int (short *  {\i a}[], short *  {\i aux}[], short *  {\i priv}[], short *  {\i cod}[], short *  {\i auxPriv}[], short *  {\i auxCod}[], int  {\i lo}, int  {\i mid}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Faz o merge dos 2 arrays de forma a ficarem ordenados (por digitos) Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mid} \cell }{posi\'E7\'E3o do meio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2936                                                                                                                                                   \{\par
2937     {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2938         {\cf19 if}(a[k][0] == -1)\{\par
2939             hi--;\par
2940             {\cf19 continue};\par
2941         \}\par
2942         aux[k] = malloc(numDigitsLong(key_digits_2_long_int(a[k]) * {\cf17 sizeof} ({\cf18 short})));\par
2943         auxPriv[k] = malloc(numDigitsLong(key_digits_2_long_int(priv[k]) * {\cf17 sizeof} ({\cf18 short})));\par
2944         auxCod[k] = malloc(numDigitsLong(key_digits_2_long_int(cod[k]) * {\cf17 sizeof} ({\cf18 short})));\par
2945         aux[k] = a[k];\par
2946         auxPriv[k] = priv[k];\par
2947         auxCod[k] = cod[k];\par
2948     \}\par
2949     {\cf18 int} i = lo, j = mid+1;\par
2950     {\cf19 if}(order == 1)\{\par
2951         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2952             {\cf19 if} (i > mid)\{\par
2953                 a[k] = aux[j++];\par
2954                 j--;\par
2955                 priv[k] = auxPriv[j++];\par
2956                 j--;\par
2957                 cod[k] = auxCod[j++];\par
2958             \}\par
2959             {\cf19 else} {\cf19 if} (j > hi)\{\par
2960                 a[k] = aux[i++];\par
2961                 i--;\par
2962                 priv[k] = auxPriv[i++];\par
2963                 i--;\par
2964                 cod[k] = auxCod[i++];\par
2965             \}\par
2966             {\cf19 else} {\cf19 if} (numDigitsLong(key_digits_2_long_int(aux[j])) < numDigitsLong(key_digits_2_long_int(aux[i])))\{\par
2967                 a[k] = aux[j++];\par
2968                 j--;\par
2969                 priv[k] = auxPriv[j++];\par
2970                 j--;\par
2971                 cod[k] = auxCod[j++];\par
2972             \}\par
2973             {\cf19 else}\{\par
2974                 a[k] = aux[i++];\par
2975                 i--;\par
2976                 priv[k] = auxPriv[i++];\par
2977                 i--;\par
2978                 cod[k] = auxCod[i++];\par
2979             \}\par
2980         \}\par
2981     \} {\cf19 else}\{\par
2982         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2983             {\cf19 if} (i > mid)\{\par
2984                 a[k] = aux[j++];\par
2985                 j--;\par
2986                 priv[k] = auxPriv[j++];\par
2987                 j--;\par
2988                 cod[k] = auxCod[j++];\par
2989             \}\par
2990             {\cf19 else} {\cf19 if} (j > hi) \{\par
2991                 a[k] = aux[i++];\par
2992                 i--;\par
2993                 priv[k] = auxPriv[i++];\par
2994                 i--;\par
2995                 cod[k] = auxCod[i++];\par
2996             \}\par
2997             {\cf19 else} {\cf19 if} (numDigitsLong(key_digits_2_long_int(aux[j])) > numDigitsLong(key_digits_2_long_int(aux[i])))\{\par
2998                 a[k] = aux[j++];\par
2999                 j--;\par
3000                 priv[k] = auxPriv[j++];\par
3001                 j--;\par
3002                 cod[k] = auxCod[j++];\par
3003             \}\par
3004             {\cf19 else} \{\par
3005                 a[k] = aux[i++];\par
3006                 i--;\par
3007                 priv[k] = auxPriv[i++];\par
3008                 i--;\par
3009                 cod[k] = auxCod[i++];\par
3010             \}\par
3011         \}\par
3012     \}\par
3013 \}\par
}
}
{\xe \v mergeDigits_int_sort_base\:projeto.c}
{\xe \v projeto.c\:mergeDigits_int_sort_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_int_sort_base (short *  {\i a}[], short *  {\i priv}[], short *  {\i cod}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria os arrais auxiliares para utilizar no algoritmo de merge sort (ordem por digitos) Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2915                                                                                          \{\par
2916     {\cf18 short} **aux = malloc(N * {\cf17 sizeof} ({\cf18 short}*));\par
2917     {\cf18 short} **auxPriv = malloc(N * {\cf17 sizeof} ({\cf18 short}*));\par
2918     {\cf18 short} **auxCod = malloc(N * {\cf17 sizeof} ({\cf18 short}*));\par
2919     mergeDigits_int_sort_recursive_cutoff(a, aux, priv, cod, auxPriv, auxCod, 0, N-1, order);\par
2920 \}\par
}
}
{\xe \v mergeDigits_int_sort_recursive_basic\:projeto.c}
{\xe \v projeto.c\:mergeDigits_int_sort_recursive_basic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_int_sort_recursive_basic (short *  {\i a}[], short *  {\i aux}[], short *  {\i priv}[], short *  {\i cod}[], short *  {\i auxPriv}[], short *  {\i auxCod}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matrix auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3028                                                                                                                                                               \{\par
3029 \par
3030     {\cf19 if}(hi <= lo) {\cf19 return};\par
3031     {\cf18 int} mid = lo + (hi-lo)/2;\par
3032     mergeDigits_int_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, lo, mid, order);\par
3033     mergeDigits_int_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, mid+1, hi, order);\par
3034     mergeDigits_int(a, aux, priv, cod, auxPriv, auxCod, lo, mid, hi, order);\par
3035 \}\par
}
}
{\xe \v mergeDigits_int_sort_recursive_cutoff\:projeto.c}
{\xe \v projeto.c\:mergeDigits_int_sort_recursive_cutoff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_int_sort_recursive_cutoff (short *  {\i a}[], short *  {\i aux}[], short *  {\i priv}[], short *  {\i cod}[], short *  {\i auxPriv}[], short *  {\i auxCod}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array e caso o tamanho do array seja menor que 10 usa o insertion sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3050                                                                                                                                                                \{\par
3051 \par
3052     {\cf19 if} (hi <= lo + CUTOFF - 1)\par
3053     \{\par
3054         insertionSortDigits_int(&a[lo], priv, cod, hi-lo+1, order);\par
3055         {\cf19 return};\par
3056     \}\par
3057     {\cf18 int} mid = lo + (hi-lo)/2;\par
3058     mergeDigits_int_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, lo, mid, order);\par
3059     mergeDigits_int_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, mid+1, hi, order);\par
3060     mergeDigits_int(a, aux, priv, cod, auxPriv, auxCod, lo, mid, hi, order);\par
3061 \}\par
}
}
{\xe \v new_public_key_int\:projeto.c}
{\xe \v projeto.c\:new_public_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long new_public_key_int (void )}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generate a random integer to be used as the public key. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
random number representing a public key \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 483                                            \{\par
484     {\cf18 unsigned} {\cf18 long} {\cf18 long} r = 0;\par
485     {\cf19 for} ({\cf18 int} i = 0; i < 1; ++i) \{\par
486         r = rand()%250;\par
487     \}\par
488     {\cf19 return} r;\par
489 \}\par
}
}
{\xe \v numDigits\:projeto.c}
{\xe \v projeto.c\:numDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int numDigits (int  {\i num})}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai calcular o n\'FAmero de digitos de um n\'FAmero (int) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{n\'FAmero usado para calcular o seu n\'FAmero de digitos \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
n\'FAmero de digitos (int) \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2156                       \{\par
2157     {\cf18 int} digits = 0;\par
2158     {\cf19 do} \{\par
2159         num /= 10;\par
2160         digits++;\par
2161     \} {\cf19 while} (num != 0);\par
2162     {\cf19 return} digits;\par
2163 \}\par
}
}
{\xe \v numDigitsLong\:projeto.c}
{\xe \v projeto.c\:numDigitsLong}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int numDigitsLong (unsigned long long  {\i num})}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai calcular o n\'FAmero de digitos de um n\'FAmero (unsigned long long) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{n\'FAmero usado para calcular o seu n\'FAmero de digitos \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
n\'FAmero de digitos (int) \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2170                                          \{\par
2171     {\cf18 int} digits = 0;\par
2172     {\cf19 do} \{\par
2173         num /= 10;\par
2174         digits++;\par
2175     \} {\cf19 while} (num != 0);\par
2176     {\cf19 return} digits;\par
2177 \}\par
}
}
{\xe \v ordenar_utilizadores\:projeto.c}
{\xe \v projeto.c\:ordenar_utilizadores}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ordenar_utilizadores ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3oq eu ordena os utilizador por nome Complexidade algoritmica Best case: O(n) / Average: O(n^2) / Worst: O(n^2) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1945                                                     \{\par
1946     UTILIZADORES* curr;\par
1947     UTILIZADORES* index;\par
1948 \par
1949     {\cf20 // se a fila estiver vazia}\par
1950     {\cf19 if} (queue == NULL) \{\par
1951         {\cf19 return};\par
1952     \}\par
1953 \par
1954     {\cf19 if} (queue->head == NULL) \{\par
1955         {\cf19 return};\par
1956     \}\par
1957 \par
1958     {\cf20 // bubble sort}\par
1959     {\cf20 // ciclo que percorre os utilizadores at\'E9 o proximo ser NULL}\par
1960     {\cf19 for} (curr = queue->head; curr->next != NULL; curr = curr->next) \{\par
1961         {\cf20 // ciclo que percorre os utilizadors at\'E9 o index ser NULL (index inicial \'E9 sempre o prox utilizador do primeiro ciclo)}\par
1962         {\cf19 for} (index = curr->next; index != NULL; index = index->next) \{\par
1963             {\cf19 if} (strcmp(curr->name, index->name) > 0) \{   {\cf20 // se o index->name for menor que o curr->name}\par
1964                 {\cf18 char}* temp_name = curr->name;            {\cf20 // guarda temporariamente o nome do curr}\par
1965                 {\cf18 char}* temp_email = curr->email;          {\cf20 // guarda temporariamente o email do curr}\par
1966                 KEY_HOLDER* temp_key_holder_list = curr->key_holder_list;    {\cf20 // guardar temporariamente a lista de porta chaves do curr}\par
1967                 {\cf20 // Troca as posi\'E7\'F5es dos utilizadores curr e index}\par
1968                 curr->name = index->name;\par
1969                 curr->email = index->email;\par
1970                 curr->key_holder_list = index->key_holder_list;\par
1971                 index->name = temp_name;\par
1972                 index->email = temp_email;\par
1973                 index->key_holder_list = temp_key_holder_list;\par
1974             \}\par
1975         \}\par
1976     \}\par
1977 \}\par
}
}
{\xe \v print_keyHolders\:projeto.c}
{\xe \v projeto.c\:print_keyHolders}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void print_keyHolders ({\b KEY_HOLDER} **  {\i portaChaves})}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que escreve os v\'E1rios porta chaves na consola {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1570                                                \{\par
1571     {\cf18 int} sair = 0, numPortaChaves = 1;\par
1572     {\cf19 for} (KEY_HOLDER *curr = *portaChaves; curr != NULL ; curr = curr->next) \{\par
1573         {\cf18 int} i = 0;\par
1574         printf({\cf22 "Porta Chaves - %d\\n"}, numPortaChaves);\par
1575         {\cf19 while} (1)\{  {\cf20 // ciclo infinito (termina quando as matrizes chegarem ao fim)}\par
1576             {\cf19 if}(strcmp(curr->khString.matrixPub[i], {\cf22 "-1"}) != 0) \{\par
1577                 printf({\cf22 "Porta Chaves PubKey String - %s\\n"}, curr->khString.matrixPub[i]);\par
1578                 sair = 0;\par
1579             \} {\cf19 else} sair = 1;\par
1580             {\cf19 if}(strcmp(curr->khString.matrixPriv[i], {\cf22 "-1"}) != 0) \{\par
1581                 printf({\cf22 "Porta Chaves PrivKey String - %s\\n"}, curr->khString.matrixPriv[i]);\par
1582                 sair = 0;\par
1583             \} {\cf19 else} sair = 1;\par
1584             {\cf19 if}(strcmp(curr->khString.matrixCod[i], {\cf22 "-1"}) != 0) \{\par
1585                 printf({\cf22 "Porta Chaves CodKey String - %s\\n"}, curr->khString.matrixCod[i]);\par
1586                 sair = 0;\par
1587             \} {\cf19 else} sair = 1;\par
1588             {\cf18 int} j = 0;\par
1589             {\cf19 if}(curr->khInts.matrixPub[i][0] != -1)\{\par
1590                 printf({\cf22 "Porta Chaves PubKey Ints - "});\par
1591                 {\cf19 while} (curr->khInts.matrixPub[i][j] != -1)\{\par
1592                     printf({\cf22 "%hi"}, curr->khInts.matrixPub[i][j]);\par
1593                     j++;\par
1594                 \}\par
1595                 sair = 0;\par
1596                 printf({\cf22 "\\n"});\par
1597             \} {\cf19 else} sair = 1;\par
1598             j = 0;\par
1599             {\cf19 if}(curr->khInts.matrixPriv[i][0] != -1)\{\par
1600                 printf({\cf22 "Porta Chaves PrivKey Ints - "});\par
1601                 {\cf19 while} (curr->khInts.matrixPriv[i][j] != -1)\{\par
1602                     printf({\cf22 "%hi"}, curr->khInts.matrixPriv[i][j]);\par
1603                     j++;\par
1604                 \}\par
1605                 sair = 0;\par
1606                 printf({\cf22 "\\n"});\par
1607             \} {\cf19 else} sair = 1;\par
1608             j = 0;\par
1609             {\cf19 if}(curr->khInts.matrixCod[i][0] != -1)\{\par
1610                 printf({\cf22 "Porta Chaves CodKey Ints - "});\par
1611                 {\cf19 while} (curr->khInts.matrixCod[i][j] != -1)\{\par
1612                     printf({\cf22 "%hi"}, curr->khInts.matrixCod[i][j]);\par
1613                     j++;\par
1614                 \}\par
1615                 sair = 0;\par
1616                 printf({\cf22 "\\n"});\par
1617             \} {\cf19 else} sair = 1;\par
1618             {\cf19 if}(sair == 1) {\cf19 break};\par
1619             i++;\par
1620         \}\par
1621         printf({\cf22 "Data Criacao: %s"}, curr->data_criacao);\par
1622         printf({\cf22 "Data Modificacao: %s"}, curr->data_modificacao);\par
1623         printf({\cf22 "\\n"});\par
1624         numPortaChaves++;\par
1625     \}\par
1626 \}\par
}
}
{\xe \v print_utilizadores\:projeto.c}
{\xe \v projeto.c\:print_utilizadores}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void print_utilizadores ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que escreve na consola todos os utilizadores {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1819                                                    \{\par
1820     UTILIZADORES* curr = queue->head;\par
1821     {\cf19 while} (curr != NULL) \{\par
1822         printf({\cf22 "Name: %s\\n"}, curr->name);\par
1823         printf({\cf22 "Email: %s\\n"}, curr->email);\par
1824         print_keyHolders(&curr->key_holder_list);   {\cf20 // chama a fun\'E7\'E3o para escrever todos os porta chaves (deste utilizador)}\par
1825         curr = curr->next;\par
1826     \}\par
1827 \}\par
}
}
{\xe \v private_key_from_runlength_char\:projeto.c}
{\xe \v projeto.c\:private_key_from_runlength_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long private_key_from_runlength_char (unsigned long long  {\i runlengthkey})}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the private key from a run-length. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i runlengthkey} \cell }{- run-length for which to calculate the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key that corresponds to the runlengthkey arg \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 141                                                                                    \{\par
142 \par
143     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0;\par
144     {\cf18 short} *allDigits, freq = 0, pow = 1;\par
145     allDigits = key_long_2_digits_int(runlengthkey);\par
146 \par
147     privKey = allDigits[0];         {\cf20 // privKey = ao primeiro digito do allDigits}\par
148     freq = allDigits[1] * 10;       {\cf20 // frequecia = ao segundp digito de allDigits * 10}\par
149     freq += allDigits[2];           {\cf20 // frequencia + o terceiro digito de allDigits = frequencia do primeiro digito da privKey}\par
150     {\cf19 for} ({\cf18 int} i = 1; i < freq; ++i) \{    {\cf20 // ciclo para coclocar o digito da privkey com o seu n\'BA de frequencias}\par
151         privKey *= 10;\par
152         privKey += allDigits[0];\par
153     \}\par
154 \par
155     privKey *= 10;                  {\cf20 // multiplicamos a privKey * 10 para juntar os restantes valores}\par
156     privKey += allDigits[3];\par
157     freq = allDigits[4] * 10;\par
158     freq += allDigits[5];\par
159     {\cf19 for} ({\cf18 int} i = 1; i < freq; ++i) \{\par
160         privKey *= 10;\par
161         privKey += allDigits[3];\par
162     \}\par
163 \par
164     {\cf19 return} privKey;\par
165 \}\par
}
}
{\xe \v private_key_from_runlength_int\:projeto.c}
{\xe \v projeto.c\:private_key_from_runlength_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long long private_key_from_runlength_int (unsigned long long  {\i runlengthkey})}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculate the private key from a run-length. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i runlengthkey} \cell }{- run-length for which to calculate the private key \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
private key that corresponds to the runlengthkey arg \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 657                                                                                   \{\par
658 \par
659     {\cf18 unsigned} {\cf18 long} {\cf18 long} privKey = 0;\par
660     {\cf18 short} *allDigits, freq = 0, pow = 1;\par
661     allDigits = key_long_2_digits_int(runlengthkey);\par
662 \par
663     privKey = allDigits[0];\par
664     freq = allDigits[1] * 10;\par
665     freq += allDigits[2];\par
666     {\cf19 for} ({\cf18 int} i = 1; i < freq; ++i) \{\par
667         privKey *= 10;\par
668         privKey += allDigits[0];\par
669     \}\par
670 \par
671     privKey *= 10;\par
672     privKey += allDigits[3];\par
673     freq = allDigits[4] * 10;\par
674     freq += allDigits[5];\par
675     {\cf19 for} ({\cf18 int} i = 1; i < freq; ++i) \{\par
676         privKey *= 10;\par
677         privKey += allDigits[3];\par
678     \}\par
679 \par
680     {\cf19 return} privKey;\par
681 \}\par
}
}
{\xe \v randomKeyFile\:projeto.c}
{\xe \v projeto.c\:randomKeyFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void randomKeyFile (FILE *  {\i fileChavesPubWrite}, char *  {\i fileName}, int  {\i n})}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que gera um n\'FAmero aleat\'F3rio e insere num ficheiro {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fileChavesPubWrite} \cell }{ficheiro qe vai receber o n\'FAmero aleat\'F3rio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fileName} \cell }{nome do ficheiro \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i n} \cell }{n\'FAmero de n\'FAmeros aleat\'F3rios a serem gerados para o ficheiro \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2213                                                                    \{\par
2214 \par
2215     fileChavesPubWrite = fopen(fileName, {\cf22 "a"});\par
2216     time_t t1;\par
2217     srand(({\cf18 unsigned} ) time(&t1));\par
2218     {\cf19 for} ({\cf18 int} i = 0; i < n; ++i) \{\par
2219         {\cf18 int} r = rand()%250;\par
2220         fprintf(fileChavesPubWrite,{\cf22 "%d"},r);\par
2221         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
2222     \}\par
2223     fclose(fileChavesPubWrite);\par
2224 \}\par
}
}
{\xe \v randomKeyMatrix\:projeto.c}
{\xe \v projeto.c\:randomKeyMatrix}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char ** randomKeyMatrix (char **  {\i r}, int  {\i n})}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai gerar um n\'FAmero aleat\'F3rio e retornar o mesmo em char** {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{matrix de strings (char*) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i n} \cell }{n\'FAmero de n\'FAmeros aleat\'F3rios a serem gerados \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
da matrix de strings (char*) \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2232                                        \{\par
2233     {\cf18 int} random = 0, digits = 0;\par
2234 \par
2235     r = ({\cf18 char} **) malloc(n*{\cf17 sizeof} ({\cf18 char} *));\par
2236     {\cf19 for} ({\cf18 int} i = 0; i < n; ++i) \{\par
2237         random = rand();\par
2238         digits = numDigits(random);\par
2239         r[i] = ({\cf18 char} *) malloc(digits * {\cf17 sizeof} ({\cf18 char}));\par
2240         sprintf(r[i], {\cf22 "%d"}, random);\par
2241     \}\par
2242     {\cf19 return} r;\par
2243 \}\par
}
}
{\xe \v randomKeyValue\:projeto.c}
{\xe \v projeto.c\:randomKeyValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * randomKeyValue (char *  {\i r})}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que retorna um n\'FAmero aleat\'F3rio (char*) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{apontador de char (char*) usado para armazenar o n\'FAmero em carateres \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
do n\'FAmero em carateres \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2250                              \{\par
2251     {\cf18 int} random = 0, digits = 0;\par
2252 \par
2253     r = ({\cf18 char} *) malloc({\cf17 sizeof} ({\cf18 char}));\par
2254     {\cf19 for} ({\cf18 int} i = 0; i < 1; ++i) \{\par
2255         random = rand()%250;\par
2256         digits = numDigits(random);\par
2257         sprintf(r, {\cf22 "%d"}, random);\par
2258     \}\par
2259     {\cf18 char} *returnval = r;\par
2260     r=NULL;\par
2261     free(r);\par
2262     {\cf19 return} returnval;\par
2263 \}\par
}
}
{\xe \v randomKeyValueShort\:projeto.c}
{\xe \v projeto.c\:randomKeyValueShort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short randomKeyValueShort (short  {\i r})}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que retorna um n\'FAmero aleat\'F3rio em short {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{vari\'E1vel que vai conter o n\'FAmero aleat\'F3rio a ser retornado \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
valor aleat\'F3rio short \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2270                                   \{\par
2271     {\cf18 int} digits = 0;\par
2272     {\cf19 for} ({\cf18 int} i = 0; i < 1; ++i) \{\par
2273         r = rand()%250;\par
2274         digits = numDigits(r);\par
2275     \}\par
2276     {\cf19 return} r;\par
2277 \}\par
}
}
{\xe \v remove_keyHolder\:projeto.c}
{\xe \v projeto.c\:remove_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void remove_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, int  {\i keyHolderPos})}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o remove um porta chaves numa dada posi\'E7\'E3o {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1259                                                                  \{\par
1260     {\cf18 int} removePos = 1;\par
1261 \par
1262     {\cf19 if}(*portaChaves == NULL) {\cf19 return};\par
1263 \par
1264     {\cf20 // se for o primeiro porta chaves, o segundo porta chaves vai agora passar a ser o primeiro}\par
1265     {\cf19 if}(keyHolderPos == 1)\{\par
1266         *portaChaves = (*portaChaves)->next;    {\cf20 // igualar o primeiro porta chaves ao seu proximo(segundo porta chaves)}\par
1267     \}\par
1268 \par
1269     {\cf20 // percorrer os porta chaves at\'E9 ao na posi\'E7\'E3o dada}\par
1270     KEY_HOLDER *curr = *portaChaves;\par
1271     {\cf19 while} (curr->next != NULL)\{\par
1272         {\cf19 if}(removePos+1 == keyHolderPos)\{       {\cf20 // quando o proximo porta chaves for o escolhido}\par
1273             curr->next = curr->next->next;     {\cf20 // este porta chaves(1 antes do que vai ser removido) vai apontador para o proximo porta chaves do porta chaves que vai ser removido}\par
1274             {\cf19 if}(curr->next == NULL) {\cf19 break};      {\cf20 // se o porta chaves n\'E3o existir saimos do ciclo}\par
1275         \}\par
1276         removePos++;\par
1277         curr = curr->next;\par
1278     \}\par
1279 \}\par
}
}
{\xe \v remover_cabeca_utilizador\:projeto.c}
{\xe \v projeto.c\:remover_cabeca_utilizador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void remover_cabeca_utilizador ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que remove um utilizador \'E0 cabe\'E7a {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1872                                                           \{\par
1873     printf({\cf22 "Utilizador Apagado: %s\\n"}, queue->head->name);\par
1874     queue->head = queue->head->next;    {\cf20 // a head passa a ser o prox utilizador}\par
1875 \par
1876     queue->size--;\par
1877 \}\par
}
}
{\xe \v remover_cauda_utilizador\:projeto.c}
{\xe \v projeto.c\:remover_cauda_utilizador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void remover_cauda_utilizador ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que remove um utilizador \'E0 cauda {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1883                                                          \{\par
1884     UTILIZADORES *curr = queue->head;\par
1885     UTILIZADORES* previous = NULL;\par
1886 \par
1887     {\cf20 // percorre a fila de utilizadores}\par
1888     {\cf19 while} (curr->next != NULL)\{\par
1889         previous = curr;\par
1890         curr = curr->next;\par
1891     \}\par
1892 \par
1893     printf({\cf22 "Utilizador Apagado: %s\\n"}, curr->name);\par
1894     {\cf20 // se o utilizador a ser apagado n\'E3o tinha anterior ent\'E3o era o primeiro}\par
1895     {\cf19 if} (previous == NULL) \{\par
1896         queue->head = NULL;\par
1897         queue->tail = NULL;\par
1898     \} {\cf19 else} \{    {\cf20 // se n\'E3o era o primeiro}\par
1899         previous->next = NULL;  {\cf20 // o utilizador anterior vai apontar para NULL}\par
1900         queue->tail = previous; {\cf20 // a tail vai passar a ser o utilizador anterior}\par
1901     \}\par
1902 \par
1903     queue->size--;\par
1904 \}\par
}
}
{\xe \v remover_nome_utilizador\:projeto.c}
{\xe \v projeto.c\:remover_nome_utilizador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void remover_nome_utilizador ({\b UTILIZADORES_QUEUE} *  {\i queue}, char *  {\i name})}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que remove um utilizasdor por nome {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome do utilizador \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1834                                                                     \{\par
1835     UTILIZADORES* curr = queue->head;\par
1836     UTILIZADORES* previous = NULL;\par
1837 \par
1838     {\cf20 // percorre a fila de utilizadores at\'E9 encontrar um utilizador com o nome a ser procurado}\par
1839     {\cf19 while} (curr != NULL && strcmp(curr->name, name) != 0) \{\par
1840         previous = curr;        {\cf20 // o utilizador o valor de prev com o utilizador anterior}\par
1841         curr = curr->next;      {\cf20 // percorre a fila de utilizadores}\par
1842     \}\par
1843 \par
1844     {\cf20 // se n\'E3o encontrar nenhum utilizador com o nome a ser procurado}\par
1845     {\cf19 if} (curr == NULL) \{\par
1846         printf({\cf22 "Utilizador Nao Encontrado\\n"});\par
1847         {\cf19 return};\par
1848     \}\par
1849 \par
1850     {\cf20 // se existe um utilizador com o nome a ser procurado remove}\par
1851     printf({\cf22 "Utilizador Apagado: %s\\n"}, curr->name);\par
1852     {\cf20 // se o prev for NULL quer dizer que \'E9 o primeiro utilizador}\par
1853     {\cf19 if} (previous == NULL) \{\par
1854         queue->head = curr->next;    {\cf20 // atualiza a head para o proximo utilizador}\par
1855     \} {\cf19 else} \{    {\cf20 // se n\'E3o for o primeiro}\par
1856         previous->next = curr->next;   {\cf20 // o anterior vai apontar para o proximo do utilizador a ser removido}\par
1857     \}\par
1858 \par
1859     {\cf20 // se o utilizador removido fosee o ultimo da fila a tail vai passar a ser o utilizador anterior ao que foi apagado}\par
1860     {\cf19 if} (curr->next == NULL) \{\par
1861         queue->tail = previous;\par
1862     \}\par
1863 \par
1864     queue->size--;\par
1865     free(curr);\par
1866 \}\par
}
}
{\xe \v save_bin_keys_char\:projeto.c}
{\xe \v projeto.c\:save_bin_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_bin_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save all matrix data to a binary file {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the binary file where to store the data \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 453                                                                                                                 \{\par
454     FILE *fileChavesPubWrite;\par
455     fileChavesPubWrite = fopen(filename, {\cf22 "a+b"});\par
456 \par
457     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
458         printf({\cf22 "Ficheiro nao existe\\n"});\par
459         {\cf19 return};\par
460     \}\par
461     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
462         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) != 0)\{\par
463             fwrite(matrix_kpub[i], {\cf17 sizeof} ({\cf18 char}), strlen(matrix_kpub[i]), fileChavesPubWrite);\par
464             fwrite({\cf22 "\\n"}, {\cf17 sizeof} ({\cf18 char}), 1, fileChavesPubWrite);\par
465         \} {\cf19 else} {\cf19 break};\par
466         {\cf19 if}(strcmp(matrix_kpriv[i], {\cf22 "-1"}) != 0)\{\par
467             fwrite(matrix_kpriv[i], {\cf17 sizeof} ({\cf18 char}), strlen(matrix_kpriv[i]), fileChavesPubWrite);\par
468             fwrite({\cf22 "\\n"}, {\cf17 sizeof} ({\cf18 char}), 1, fileChavesPubWrite);\par
469         \} {\cf19 else} {\cf19 break};\par
470         {\cf19 if}(strcmp(matrix_kcod[i], {\cf22 "-1"}) != 0)\{\par
471             fwrite(matrix_kcod[i], {\cf17 sizeof} ({\cf18 char}), strlen(matrix_kcod[i]), fileChavesPubWrite);\par
472             fwrite({\cf22 "\\n"}, {\cf17 sizeof} ({\cf18 char}), 1, fileChavesPubWrite);\par
473         \} {\cf19 else} {\cf19 break};\par
474     \}\par
475 \par
476     fclose(fileChavesPubWrite);\par
477 \}\par
}
}
{\xe \v save_bin_keys_int\:projeto.c}
{\xe \v projeto.c\:save_bin_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_bin_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save all matrix data to a binary file {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the binary file where to store the data \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 969                                                                                                                   \{\par
970 \par
971     FILE *fileChavesPubWrite;\par
972     fileChavesPubWrite = fopen(filename, {\cf22 "a+b"});\par
973 \par
974     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
975         printf({\cf22 "Ficheiro nao existe\\n"});\par
976         {\cf19 return};\par
977     \}\par
978     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
979         {\cf19 if}(matrix_kpub[i][0] != -1)\{\par
980             {\cf18 char} *temp = malloc(numDigitsLong(key_digits_2_long_int(matrix_kpub[i])) * {\cf17 sizeof} ({\cf18 char}));\par
981             sprintf(temp, {\cf22 "%llu"}, key_digits_2_long_int(matrix_kpub[i]));\par
982             fwrite(temp, {\cf17 sizeof}({\cf18 char}), strlen(temp), fileChavesPubWrite);\par
983             fwrite({\cf22 "\\n"}, {\cf17 sizeof}({\cf18 char}), 1, fileChavesPubWrite);\par
984         \} {\cf19 else} {\cf19 break};\par
985         {\cf19 if}(matrix_kpriv[i][0] != -1)\{\par
986             {\cf18 char} *temp = malloc(numDigitsLong(key_digits_2_long_int(matrix_kpriv[i])) * {\cf17 sizeof} ({\cf18 char}));\par
987             sprintf(temp, {\cf22 "%llu"}, key_digits_2_long_int(matrix_kpriv[i]));\par
988             fwrite(temp, {\cf17 sizeof}({\cf18 char}), strlen(temp), fileChavesPubWrite);\par
989             fwrite({\cf22 "\\n"}, {\cf17 sizeof}({\cf18 char}), 1, fileChavesPubWrite);\par
990         \} {\cf19 else} {\cf19 break};\par
991         {\cf19 if}(matrix_kcod[i][0] != -1)\{\par
992             {\cf18 char} *temp = malloc(numDigitsLong(key_digits_2_long_int(matrix_kcod[i])) * {\cf17 sizeof} ({\cf18 char}));\par
993             sprintf(temp, {\cf22 "%llu"}, key_digits_2_long_int(matrix_kcod[i]));\par
994             fwrite(temp, {\cf17 sizeof}({\cf18 char}), strlen(temp),fileChavesPubWrite);\par
995             fwrite({\cf22 "\\n"}, {\cf17 sizeof}({\cf18 char}), 1, fileChavesPubWrite);\par
996         \} {\cf19 else} {\cf19 break};\par
997     \}\par
998 \par
999     fclose(fileChavesPubWrite);\par
1000 \}\par
}
}
{\xe \v save_txt_keyHolder\:projeto.c}
{\xe \v projeto.c\:save_txt_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_txt_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts}, int  {\i keyHolderPos}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que guarda um porta chaves num ficheiro {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mString} \cell }{struct de matrizes de string \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mInts} \cell }{struct de matrizes de ints \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{nome do ficheiro \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1397                                                                                                                                            \{\par
1398 \par
1399     FILE *fileChavesPubWrite;\par
1400     fileChavesPubWrite = fopen(filename, {\cf22 "a+"});\par
1401     {\cf18 int} stopPos = 1;\par
1402 \par
1403     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
1404         printf({\cf22 "Ficheiro nao existe\\n"});\par
1405         {\cf19 return};\par
1406     \}\par
1407 \par
1408     KEY_HOLDER * curr = *portaChaves;\par
1409     {\cf19 while} (stopPos != keyHolderPos)\{\par
1410         curr = curr->next;\par
1411         {\cf19 if}(curr == NULL)\{\par
1412             printf({\cf22 "Porta Chaves Nao Encontrado\\n"});\par
1413             {\cf19 return};\par
1414         \}\par
1415         stopPos++;\par
1416     \}\par
1417 \par
1418     {\cf18 int} i = 0;\par
1419     {\cf19 while} (i < curr->sizeStrings)\{\par
1420         fprintf(fileChavesPubWrite,{\cf22 "%s"} , curr->khString.matrixPub[i]);\par
1421         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1422         fprintf(fileChavesPubWrite,{\cf22 "%s"} , curr->khString.matrixPriv[i]);\par
1423         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1424         fprintf(fileChavesPubWrite,{\cf22 "%s"} , curr->khString.matrixCod[i]);\par
1425         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1426 \par
1427         i++;\par
1428     \}\par
1429     i = 0;\par
1430     {\cf19 while} (i < curr->sieInts)\{\par
1431         fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(curr->khInts.matrixPub[i]));\par
1432         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1433         fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(curr->khInts.matrixPriv[i]));\par
1434         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1435         fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(curr->khInts.matrixCod[i]));\par
1436         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1437 \par
1438         i++;\par
1439     \}\par
1440 \par
1441     fclose(fileChavesPubWrite);\par
1442 \}\par
}
}
{\xe \v save_txt_keys_char\:projeto.c}
{\xe \v projeto.c\:save_txt_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_txt_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save all matrix data to a text file {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the text file where to store the data \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 395                                                                                                                 \{\par
396     FILE *fileChavesPubWrite;\par
397     fileChavesPubWrite = fopen(filename, {\cf22 "a+"});\par
398 \par
399     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
400         printf({\cf22 "Ficheiro nao existe\\n"});\par
401         {\cf19 return};\par
402     \}\par
403     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
404         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) != 0)\{\par
405             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , atoll(matrix_kpub[i]));\par
406             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
407         \} {\cf19 else} {\cf19 break};\par
408         {\cf19 if}(strcmp(matrix_kpriv[i], {\cf22 "-1"}) != 0)\{\par
409             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , atoll(matrix_kpriv[i]));\par
410             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
411         \} {\cf19 else} {\cf19 break};\par
412         {\cf19 if}(strcmp(matrix_kcod[i], {\cf22 "-1"}) != 0)\{\par
413             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , atoll(matrix_kcod[i]));\par
414             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
415         \} {\cf19 else} {\cf19 break};\par
416     \}\par
417 \par
418     fclose(fileChavesPubWrite);\par
419 \}\par
}
}
{\xe \v save_txt_keys_int\:projeto.c}
{\xe \v projeto.c\:save_txt_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_txt_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save all matrix data to a text file {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{- name of the text file where to store the data \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 911                                                                                                                   \{\par
912 \par
913     FILE *fileChavesPubWrite;\par
914     fileChavesPubWrite = fopen(filename, {\cf22 "a+"});\par
915 \par
916     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
917         printf({\cf22 "Ficheiro nao existe\\n"});\par
918         {\cf19 return};\par
919     \}\par
920     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
921         {\cf19 if}(matrix_kpub[i][0] != -1)\{\par
922             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(matrix_kpub[i]));\par
923             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
924         \} {\cf19 else} {\cf19 break};\par
925         {\cf19 if}(matrix_kpriv[i][0] != -1)\{\par
926             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(matrix_kpriv[i]));\par
927             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
928         \} {\cf19 else} {\cf19 break};\par
929         {\cf19 if}(matrix_kcod[i][0] != -1)\{\par
930             fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(matrix_kcod[i]));\par
931             fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
932         \} {\cf19 else} {\cf19 break};\par
933     \}\par
934 \par
935     fclose(fileChavesPubWrite);\par
936 \}\par
}
}
{\xe \v search_private_keys_char\:projeto.c}
{\xe \v projeto.c\:search_private_keys_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char ** search_private_keys_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, int  {\i lines}, unsigned long long  {\i partialpubkey})}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a list of all private keys matching a given partial public key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i partialpubkey} \cell }{- part of public key to filter the private keys \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
array of private keys matching the partialpubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 337                                                                                                                      \{\par
338 \par
339     {\cf18 char} **result = malloc({\cf17 sizeof} ({\cf18 char} *));\par
340     {\cf18 char} *partialPubKeyChar = ({\cf18 char} *) malloc(numDigitsLong(partialpubkey) * {\cf17 sizeof} (char));\par
341     sprintf(partialPubKeyChar, {\cf22 "%llu"}, partialpubkey);\par
342     {\cf18 int} partialPubKeySize = strlen(partialPubKeyChar);\par
343     {\cf18 int} sizeResult = 0, posResult = 0;\par
344     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
345 \par
346     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
347         {\cf18 int} k = 0;\par
348         {\cf19 if}(strcmp(matrix_kpub[i], {\cf22 "-1"}) == 0) {\cf19 break};        {\cf20 // se for -1 estamos no fim da matriz ent\'E3o j\'E1 podemos sair}\par
349         {\cf19 for} ({\cf18 int} j = 0; j < strlen(matrix_kpub[i]); ++j) \{\par
350             {\cf19 if}(matrix_kpub[i][j] == partialPubKeyChar[k])\{\par
351                 k++;\par
352             \} {\cf19 else}\{\par
353                 k = 0;\par
354             \}\par
355             {\cf19 if}(k == strlen(partialPubKeyChar))\{\par
356                 sizeResult++;\par
357                 result = ({\cf18 char} **) realloc(result, (sizeResult+1) * {\cf17 sizeof} ({\cf18 char} *));\par
358                 val = get_private_key_char(matrix_kpub, matrix_kpriv, lines, atoll(matrix_kpub[i]));\par
359                 result[posResult] = ({\cf18 char} *) malloc(numDigitsLong(val) * {\cf17 sizeof} (char));\par
360                 sprintf(result[posResult], {\cf22 "%llu"}, val);\par
361                 posResult++;\par
362             \}\par
363         \}\par
364     \}\par
365 \par
366     result[posResult] = ({\cf18 char} *) malloc(2 * {\cf17 sizeof} ({\cf18 char}));\par
367     result[posResult] = {\cf22 "-1"};\par
368 \par
369     partialPubKeyChar = NULL;\par
370     free(partialPubKeyChar);\par
371 \par
372     {\cf19 return} result;\par
373 \par
374 \}\par
}
}
{\xe \v search_private_keys_int\:projeto.c}
{\xe \v projeto.c\:search_private_keys_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
short ** search_private_keys_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, int  {\i lines}, unsigned long long  {\i partialpubkey})}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Return a list of all private keys matching a given partial public key. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i partialpubkey} \cell }{- part of public key to filter the private keys \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
array of private keys matching the partialpubkey \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 851                                                                                                                        \{\par
852     {\cf18 short} **result = malloc({\cf17 sizeof} ({\cf18 short} *));\par
853     {\cf18 int} sizeResult = 0, posResult = 0;\par
854     {\cf18 unsigned} {\cf18 long} {\cf18 long} val = 0;\par
855     {\cf18 short} * valArray = NULL, *partialKeyArray = ({\cf18 short} *) malloc(numDigitsLong(partialpubkey));\par
856     partialKeyArray = key_long_2_digits_int(partialpubkey);\par
857 \par
858     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
859         {\cf18 int} k = 0;\par
860         {\cf19 if}(matrix_kpub[i][0] == -1) {\cf19 break};\par
861         {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(key_digits_2_long_int(matrix_kpub[i])); ++j) \{\par
862             {\cf19 if}(matrix_kpub[i][j] == partialKeyArray[k])\{\par
863                 k++;\par
864             \} {\cf19 else}\{\par
865                 k = 0;\par
866             \}\par
867             {\cf19 if}(k == numDigitsLong(partialpubkey))\{\par
868                 sizeResult++;\par
869                 result = ({\cf18 short} **) realloc(result, (sizeResult+1) * {\cf17 sizeof} ({\cf18 short} *));\par
870                 val = get_private_key_int(matrix_kpub, matrix_kpriv, lines, key_digits_2_long_int(matrix_kpub[i]));\par
871                 valArray = ({\cf18 short} *) malloc(numDigitsLong(val) * {\cf17 sizeof} (short));\par
872                 valArray = key_long_2_digits_int(val);\par
873                 result[posResult] = ({\cf18 short} *) malloc(numDigitsLong(val) * {\cf17 sizeof} (short));\par
874                 {\cf19 for} ({\cf18 int} l = 0; l <= numDigitsLong(val); ++l) \{\par
875                     result[posResult][l] = valArray[l];\par
876                 \}\par
877                 posResult++;\par
878             \}\par
879         \}\par
880     \}\par
881 \par
882     result[posResult] = ({\cf18 short} *) malloc(1 * {\cf17 sizeof} ({\cf18 short}));\par
883     result[posResult][0] = -1;\par
884 \par
885     valArray = NULL;\par
886     free(valArray);\par
887     partialKeyArray = NULL;\par
888     free(partialKeyArray);\par
889     {\cf19 return} result;\par
890 \}\par
}
}
{\xe \v search_utilizador_by_name\:projeto.c}
{\xe \v projeto.c\:search_utilizador_by_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void search_utilizador_by_name ({\b UTILIZADORES_QUEUE} *  {\i queue}, char *  {\i name})}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Procura um utilizador por um dado nome Complexidade algoritmica Best case: O(1) / Average: O(n) / Worst: O(n) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome a ser procurado \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1912                                                                       \{\par
1913     {\cf18 int} exist = 0;\par
1914     {\cf18 char} nomeMinisculas[strlen(name)];  {\cf20 // array que vai ter o nome a ser procurado em minusculas}\par
1915     UTILIZADORES* curr = queue->head;\par
1916 \par
1917     {\cf19 for} ({\cf18 int} i = 0; i < strlen(name); ++i) \{    {\cf20 // mudar todos os carateres do nome a procurar para minusculas}\par
1918         nomeMinisculas[i] = tolower(name[i]);\par
1919     \}\par
1920     nomeMinisculas[strlen(name)] = {\cf23 '\\0'};    {\cf20 // inserir o \\0 no fim da string}\par
1921     {\cf19 while} (curr != NULL) \{\par
1922         {\cf18 char} nomeUtilMinusculas[strlen(curr->name)];    {\cf20 // array que vai ter o nome do utilizador em minusculas}\par
1923         {\cf19 for} ({\cf18 int} i = 0; i < strlen(curr->name); ++i) \{  {\cf20 // mudar todos os carateres do nome do utilizador para minusculas}\par
1924             nomeUtilMinusculas[i] = tolower(curr->name[i]);\par
1925         \}\par
1926         nomeUtilMinusculas[strlen(curr->name)] = {\cf23 '\\0'};  {\cf20 // inserir o \\0 no fim da string}\par
1927         {\cf19 if} (strstr(nomeUtilMinusculas, nomeMinisculas) != NULL) \{   {\cf20 // se existir a sub string "nomeMinusculas" (nome a ser procurado) no nome do utilizador}\par
1928             exist = 1;                                              {\cf20 // existe}\par
1929             printf({\cf22 "Name: %s\\n"}, curr->name);                {\cf20 // escreve na consola}\par
1930             printf({\cf22 "Email: %s\\n"}, curr->email);\par
1931             print_keyHolders(&curr->key_holder_list);\par
1932         \}\par
1933         curr = curr->next;\par
1934     \}\par
1935     {\cf19 if}(exist == 0)\{ {\cf20 // se nao existir}\par
1936         printf({\cf22 "Utilizador Nao Econtrado\\n"});\par
1937     \}\par
1938 \}\par
}
}
{\xe \v searchSingleKey_inKeyHolder\:projeto.c}
{\xe \v projeto.c\:searchSingleKey_inKeyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void searchSingleKey_inKeyHolder ({\b KEY_HOLDER} *  {\i portaChaves}, int  {\i keyHolderPos}, unsigned long long  {\i keyToSeach}, int  {\i type}, char *  {\i filename})}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que escreve na consola e num ficheiro se uma dada chave existe num dado porta chaves Complexidade algoritmica Best case: O(1) / Average: O(n) / Worst: O(n^2) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyToSeach} \cell }{chave a ser procurada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{tipode chave (1 - chave publica / 2 - chave privada / 3 - chave codificada) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filenamenome} \cell }{do ficheiro a inserir as informa\'E7\'F5es \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1290                                                                                                                                     \{\par
1291 \par
1292     FILE *fp = fopen(filename, {\cf22 "a+"});\par
1293     {\cf18 int} stopPos = 1, exist = 0;\par
1294     {\cf19 if}(type > 3 || type <= 0)\{  {\cf20 // se for inserido um tipo de chave que n\'E3o existe}\par
1295         printf({\cf22 "Tipo de chaves nao existe (1 - Publica / 2 - Privada / 3 - Codificada)\\n"});\par
1296         {\cf19 return};\par
1297     \}\par
1298     {\cf20 // ciclo para percorrer a lista ligada at\'E9 encontrar o porta chaves escolhido}\par
1299     {\cf19 while} (stopPos != keyHolderPos)\{\par
1300         portaChaves = portaChaves->next;\par
1301         stopPos++;\par
1302         {\cf19 if}(portaChaves == NULL)\{        {\cf20 // se o porta chaves n\'E3o existir}\par
1303             printf({\cf22 "Porta Chaves nao existe\\n"});\par
1304             {\cf19 return};\par
1305         \}\par
1306     \}\par
1307 \par
1308         {\cf19 if}(type == 1)\{  {\cf20 // chaves publicas}\par
1309             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khString.matrixPub[i] ; ++i) \{\par
1310                 {\cf19 if}(atoll(portaChaves->khString.matrixPub[i]) == keyToSeach)\{\par
1311                     printf({\cf22 "A chave %llu existe na matrix de chaves publicas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1312                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves publicas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1313                     exist = 1;\par
1314                 \}\par
1315             \}\par
1316             {\cf19 if}(exist == 0)\{\par
1317                 printf({\cf22 "A chave %llu nao existe na matrix de chaves publicas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1318                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves publicas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1319             \}\par
1320             exist = 0;\par
1321             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khInts.matrixPub[i] ; ++i) \{\par
1322                 {\cf19 if}(key_digits_2_long_int(portaChaves->khInts.matrixPub[i]) == keyToSeach)\{\par
1323                     printf({\cf22 "A chave %llu existe na matrix de chaves publicas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1324                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves publicas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1325                     exist = 1;\par
1326                 \}\par
1327             \}\par
1328             {\cf19 if}(exist == 0)\{\par
1329                 printf({\cf22 "A chave %llu nao existe na matrix de chaves publicas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1330                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves publicas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1331             \}\par
1332             exist = 0;\par
1333         \}\par
1334         {\cf19 else} {\cf19 if}(type == 2)\{     {\cf20 // chaves privadas}\par
1335             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khString.matrixPriv[i] ; ++i) \{\par
1336                 {\cf19 if}(atoll(portaChaves->khString.matrixPriv[i]) == keyToSeach)\{\par
1337                     printf({\cf22 "A chave %llu existe na matrix de chaves privadas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1338                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves privadas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1339                     exist = 1;\par
1340                 \}\par
1341             \}\par
1342             {\cf19 if}(exist == 0)\{\par
1343                 printf({\cf22 "A chave %llu nao existe na matrix de chaves privadas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1344                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves privadas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1345             \}\par
1346             exist = 0;\par
1347             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khInts.matrixPriv[i] ; ++i) \{\par
1348                 {\cf19 if}(key_digits_2_long_int(portaChaves->khInts.matrixPriv[i]) == keyToSeach)\{\par
1349                     printf({\cf22 "A chave %llu existe na matrix de chaves privadas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1350                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves privadas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1351                     exist = 1;\par
1352                 \}\par
1353             \}\par
1354             {\cf19 if}(exist == 0)\{\par
1355                 printf({\cf22 "A chave %llu nao existe na matrix de chaves privadas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1356                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves privadas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1357             \}\par
1358             exist = 0;\par
1359         \}\par
1360         {\cf19 else} {\cf19 if}(type == 3)\{     {\cf20 // chaves codificadas}\par
1361             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khString.matrixCod[i] ; ++i) \{\par
1362                 {\cf19 if}(atoll(portaChaves->khString.matrixCod[i]) == keyToSeach)\{\par
1363                     printf({\cf22 "A chave %llu existe na matrix de chaves codificada de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1364                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves codificadas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1365                     exist = 1;\par
1366                 \}\par
1367             \}\par
1368             {\cf19 if}(exist == 0)\{\par
1369                 printf({\cf22 "A chave %llu nao existe na matrix de chaves codificadas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1370                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves codificadas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1371             \}\par
1372             exist = 0;\par
1373             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khInts.matrixCod[i] ; ++i) \{\par
1374                 {\cf19 if}(key_digits_2_long_int(portaChaves->khInts.matrixCod[i]) == atoll(keyToSeach))\{\par
1375                     printf({\cf22 "A chave %llu existe na matrix de chaves codificada de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1376                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves codificadas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1377                     exist = 1;\par
1378                 \}\par
1379             \}\par
1380             {\cf19 if}(exist == 0)\{\par
1381                 printf({\cf22 "A chave %llu nao existe na matrix de chaves codificadas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1382                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves codificadas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1383             \}\par
1384             exist = 0;\par
1385         \}\par
1386     fclose(fp);\par
1387 \}\par
}
}
{\xe \v shellSortChar\:projeto.c}
{\xe \v projeto.c\:shellSortChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void shellSortChar (char **  {\i a}, int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmos de ordenacao ShellSort Complexidade algoritmica Best case: Nlog3(N) / Average: ? / Worst: cN^3/2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{mmatriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2297                                               \{\par
2298     {\cf18 int} h = 1;\par
2299     {\cf19 while} (h < N/3)\{\par
2300         h = 3*h + 1;\par
2301     \}\par
2302     {\cf19 while} (h >= 1)\{\par
2303         {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2304             {\cf20 //if(strcmp(a[i], "\\0") == 0) return;}\par
2305             {\cf19 if}(strcmp(a[i], {\cf22 "-1"}) == 0) {\cf19 return};\par
2306             {\cf19 if}(order == 1)\{ {\cf20 // 1 -> ascendente}\par
2307                 {\cf19 for} ({\cf18 int} j = i; j >= h && atoll(a[j]) < atoll(a[j-h]); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2308                     swapChar(a, j, j-h);\par
2309                 \}\par
2310             \} {\cf19 else}\{ {\cf20 // 0 -> descendente}\par
2311                 {\cf19 for} ({\cf18 int} j = i; j >= h && atoll(a[j]) > atoll(a[j-h]); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2312                     swapChar(a, j, j-h);\par
2313                 \}\par
2314             \}\par
2315         \}\par
2316         h /= 3;\par
2317     \}\par
2318 \}\par
}
}
{\xe \v shellSortCharDigits\:projeto.c}
{\xe \v projeto.c\:shellSortCharDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void shellSortCharDigits (char **  {\i a}, char **  {\i priv}, char **  {\i cod}, int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmos de ordenacao ShellSort (ordenar por numero de digitos) Complexidade algoritmica Best case: Nlog3(N) / Average: ? / Worst: cN^3/2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strings com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de strings com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2329                                                                              \{\par
2330     {\cf18 int} h = 1;\par
2331     {\cf19 while} (h < N/3)\{\par
2332         h = 3*h + 1;\par
2333     \}\par
2334     {\cf19 while} (h >= 1)\{\par
2335         {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2336             {\cf20 //if(strcmp(a[i], "\\0") == 0) return;}\par
2337             {\cf19 if}(strcmp(a[i], {\cf22 "-1"}) == 0) {\cf19 return};\par
2338             {\cf19 if}(order == 1)\{ {\cf20 // 1 -> ascendente}\par
2339                 {\cf19 for} ({\cf18 int} j = i; j >= h && numDigitsLong(atoll(a[j])) < numDigitsLong(atoll(a[j-h])); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2340                     swapCharDigits(a, priv, cod, j, j-h);\par
2341                 \}\par
2342             \} {\cf19 else}\{ {\cf20 // 0 -> descendente}\par
2343                 {\cf19 for} ({\cf18 int} j = i; j >= h && numDigitsLong(atoll(a[j])) > numDigitsLong(atoll(a[j-h])); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2344                     swapCharDigits(a, priv, cod, j, j-h);\par
2345                 \}\par
2346             \}\par
2347         \}\par
2348         h /= 3;\par
2349     \}\par
2350 \}\par
}
}
{\xe \v shellSortInt\:projeto.c}
{\xe \v projeto.c\:shellSortInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void shellSortInt (short **  {\i a}, int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmos de ordenacao ShellSort Complexidade algoritmica Best case: Nlog3(N) / Average: ? / Worst: cN^3/2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2399                                               \{\par
2400     {\cf18 int} h = 1;\par
2401     {\cf19 while} (h < N/3)\{\par
2402         h = 3*h + 1;\par
2403     \}\par
2404     {\cf19 while} (h >= 1)\{\par
2405         {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2406             {\cf20 //if(a[i][0] == 0) return;}\par
2407             {\cf19 if}(a[i][0] == -1) {\cf19 return};\par
2408             {\cf19 if}(order == 1)\{ {\cf20 // 1 -> ascendente}\par
2409                 {\cf19 for} ({\cf18 int} j = i; j >= h && key_digits_2_long_int(a[j]) < key_digits_2_long_int(a[j-h]); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2410                     swapInt(a, j, j-h);\par
2411                 \}\par
2412             \} {\cf19 else}\{ {\cf20 // 0 -> descendente}\par
2413                 {\cf19 for} ({\cf18 int} j = i; j >= h && key_digits_2_long_int(a[j]) > key_digits_2_long_int(a[j-h]); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2414                     swapInt(a, j, j-h);\par
2415                 \}\par
2416             \}\par
2417         \}\par
2418         h /= 3;\par
2419     \}\par
2420 \}\par
}
}
{\xe \v shellSortIntDigits\:projeto.c}
{\xe \v projeto.c\:shellSortIntDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void shellSortIntDigits (short **  {\i a}, short **  {\i priv}, short **  {\i cod}, int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmos de ordenacao ShellSort (ordenar por numero de digitos) Complexidade algoritmica Best case: Nlog3(N) / Average: ? / Worst: cN^3/2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2431                                                                                \{\par
2432     {\cf18 int} h = 1;\par
2433     {\cf19 while} (h < N/3)\{\par
2434         h = 3*h + 1;\par
2435     \}\par
2436     {\cf19 while} (h >= 1)\{\par
2437         {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2438             {\cf20 //if(a[i][0] == 0) return;}\par
2439             {\cf19 if}(a[i][0] == -1) {\cf19 return};\par
2440             {\cf19 if}(order == 1)\{ {\cf20 // 1 -> ascendente}\par
2441                 {\cf19 for} ({\cf18 int} j = i; j >= h && numDigitsLong(key_digits_2_long_int(a[j])) < numDigitsLong(key_digits_2_long_int(a[j-h])); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2442                     swapIntDigits(a, priv, cod, j, j-h);\par
2443                 \}\par
2444             \} {\cf19 else}\{ {\cf20 // 0 -> descendente}\par
2445                 {\cf19 for} ({\cf18 int} j = i; j >= h && numDigitsLong(key_digits_2_long_int(a[j])) > numDigitsLong(key_digits_2_long_int(a[j-h])); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2446                     swapIntDigits(a, priv, cod, j, j-h);\par
2447                 \}\par
2448             \}\par
2449         \}\par
2450         h /= 3;\par
2451     \}\par
2452 \}\par
}
}
{\xe \v sort_all_matrices_char\:projeto.c}
{\xe \v projeto.c\:sort_all_matrices_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sort_all_matrices_char (char **  {\i matrix_kpub}, char **  {\i matrix_kpriv}, char **  {\i matrix_kcod}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sort all matrices keys in ascending or descending order {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 381                                                                                                               \{\par
382     {\cf20 //shellSortChar(matrix_kpub, lines, order);}\par
383     {\cf20 //shellSortChar(matrix_kpriv, lines, order);}\par
384     {\cf20 //shellSortChar(matrix_kcod, lines, order);}\par
385     merge_char_sort_base(matrix_kpub, lines, order);\par
386     merge_char_sort_base(matrix_kpriv, lines, order);\par
387     merge_char_sort_base(matrix_kcod, lines, order);\par
388 \}\par
}
}
{\xe \v sort_all_matrices_int\:projeto.c}
{\xe \v projeto.c\:sort_all_matrices_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sort_all_matrices_int (short **  {\i matrix_kpub}, short **  {\i matrix_kpriv}, short **  {\i matrix_kcod}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sort all matrices keys in ascending or descending order {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpub} \cell }{- public keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kpriv} \cell }{- private keys matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix_kcod} \cell }{- run-lengths matrix \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 897                                                                                                                 \{\par
898     {\cf20 //shellSortInt(matrix_kpub, lines, order);}\par
899     {\cf20 //shellSortInt(matrix_kpriv, lines, order);}\par
900     {\cf20 //shellSortInt(matrix_kcod, lines, order);}\par
901     merge_int_sort_base(matrix_kpub, lines, order);\par
902     merge_int_sort_base(matrix_kpriv, lines, order);\par
903     merge_int_sort_base(matrix_kcod, lines, order);\par
904 \}\par
}
}
{\xe \v sort_matrix_char\:projeto.c}
{\xe \v projeto.c\:sort_matrix_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sort_matrix_char (char **  {\i matrix}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sort a matrix keys in ascending or descending order {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix to be sorted \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 376                                                           \{\par
377     {\cf20 //shellSortChar(matrix, lines, order);}\par
378     merge_char_sort_base(matrix, lines, order);\par
379 \}\par
}
}
{\xe \v sort_matrix_int\:projeto.c}
{\xe \v projeto.c\:sort_matrix_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sort_matrix_int (short **  {\i matrix}, int  {\i lines}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sort a matrix keys in ascending or descending order {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix to be sorted \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{- order == 1 ? ascending : descending \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 892                                                           \{\par
893     {\cf20 //shellSortInt(matrix, lines, order);}\par
894     merge_int_sort_base(matrix, lines, order);\par
895 \}\par
}
}
{\xe \v store_key_char\:projeto.c}
{\xe \v projeto.c\:store_key_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void store_key_char (char **  {\i matrix}, int  {\i lines}, unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Store a key (pub, priv or run-length) into the first available position of given matrix. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix to store the key \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- key to be stored \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 178                                                                      \{\par
179     {\cf18 char} *keyChar = ({\cf18 char} *) calloc((numDigitsLong(key)+1) * {\cf17 sizeof} (char), {\cf17 sizeof} ({\cf18 char}));\par
180     sprintf(keyChar, {\cf22 "%llu"}, key);\par
181     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
182         {\cf19 if}(!matrix[i][0])\{      {\cf20 // Se o valor for vazio}\par
183             matrix[i] = ({\cf18 char} *) calloc(strlen(keyChar)+1, {\cf17 sizeof} (char));\par
184             matrix[i] = keyChar;\par
185             {\cf19 break};\par
186         \}\par
187     \}\par
188     keyChar=NULL;\par
189     free(keyChar);\par
190 \}\par
}
}
{\xe \v store_key_int\:projeto.c}
{\xe \v projeto.c\:store_key_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void store_key_int (short **  {\i matrix}, int  {\i lines}, unsigned long long  {\i key})}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Store a key (pub, priv or run-length) into the first available position of given matrix. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{- matrix to store the key \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lines} \cell }{- matrix number of lines \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{- key to be stored \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 695                                                                      \{\par
696     {\cf18 short} *allD = key_long_2_digits_int(key);\par
697     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
698         {\cf19 if}(!matrix[i][0] && matrix[i][1] == -1) {\cf19 continue};   {\cf20 //Caso tenha um 0 mas seja mesmo um 0 e n\'E3o um valor NULL eu sei que \'E9 mesmo um 0 porque eu vejo se na pos 1 do array tem um -1 se tiver \'E9 mesmo um 0 se n\'E3o \'E9 uma pos vazia}\par
699         {\cf19 if}(!matrix[i][0] || matrix[i][0] == -1)\{\par
700             matrix[i] = ({\cf18 short} *) calloc(numDigitsLong(key)+1, {\cf17 sizeof} (short));\par
701             matrix[i] = allD;\par
702             {\cf19 break};\par
703         \}\par
704     \}\par
705     allD = NULL;\par
706     free(allD);\par
707 \}\par
}
}
{\xe \v swapChar\:projeto.c}
{\xe \v projeto.c\:swapChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swapChar (char **  {\i a}, int  {\i i}, int  {\i min})}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Troca valores de 2 posi\'E7\'F5es diferentes {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{primeira posi\'E7\'E3o do array a ser trocada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min} \cell }{segunda posi\'E7\'E3o do array a ser trocada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2382                                        \{\par
2383 \par
2384     {\cf18 char}* temp = ({\cf18 char} *) calloc(strlen(a[min]) * {\cf17 sizeof} (char), {\cf17 sizeof} ({\cf18 char}));\par
2385     strcpy(temp, a[min]);\par
2386     strcpy(a[min], a[i]);\par
2387     strcpy(a[i], temp);\par
2388     temp = NULL;\par
2389     free(temp);\par
2390 \}\par
}
}
{\xe \v swapCharDigits\:projeto.c}
{\xe \v projeto.c\:swapCharDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swapCharDigits (char **  {\i a}, char **  {\i priv}, char **  {\i cod}, int  {\i i}, int  {\i min})}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Troca valores de 2 posi\'E7\'F5es diferentes {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strings com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de strigns com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{primeira posi\'E7\'E3o do array a ser trocada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min} \cell }{segunda posi\'E7\'E3o do array a ser trocada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2360                                                                       \{\par
2361 \par
2362     {\cf18 char}* temp = ({\cf18 char} *) calloc(strlen(a[min]) * {\cf17 sizeof} (char), {\cf17 sizeof} ({\cf18 char}));\par
2363     strcpy(temp, a[min]);\par
2364     strcpy(a[min], a[i]);\par
2365     strcpy(a[i], temp);\par
2366     strcpy(temp, priv[min]);\par
2367     strcpy(priv[min], priv[i]);\par
2368     strcpy(priv[i], temp);\par
2369     strcpy(temp, cod[min]);\par
2370     strcpy(cod[min], cod[i]);\par
2371     strcpy(cod[i], temp);\par
2372     temp = NULL;\par
2373     free(temp);\par
2374 \}\par
}
}
{\xe \v swapInt\:projeto.c}
{\xe \v projeto.c\:swapInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swapInt (short **  {\i a}, int  {\i i}, int  {\i min})}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Troca valores de 2 posi\'E7\'F5es diferentes {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{primeira posi\'E7\'E3o do array a ser trocada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min} \cell }{segunda posi\'E7\'E3o do array a ser trocada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2484                                        \{\par
2485 \par
2486     {\cf18 short}* temp = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(a[min])), {\cf17 sizeof} (short ));\par
2487     temp = a[min];\par
2488     a[min] = a[i];\par
2489     a[i] = temp;\par
2490     temp = NULL;\par
2491     free(temp);\par
2492 \}\par
}
}
{\xe \v swapIntDigits\:projeto.c}
{\xe \v projeto.c\:swapIntDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swapIntDigits (short **  {\i a}, short **  {\i priv}, short **  {\i cod}, int  {\i i}, int  {\i min})}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Troca valores de 2 posi\'E7\'F5es diferentes {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{primeira posi\'E7\'E3o do array a ser trocada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min} \cell }{segunda posi\'E7\'E3o do array a ser trocada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2462                                                                         \{\par
2463 \par
2464     {\cf18 short}* temp = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(a[min])), {\cf17 sizeof} (short ));\par
2465     temp = a[min];\par
2466     a[min] = a[i];\par
2467     a[i] = temp;\par
2468     temp = priv[min];\par
2469     priv[min] = priv[i];\par
2470     priv[i] = temp;\par
2471     temp = cod[min];\par
2472     cod[min] = cod[i];\par
2473     cod[i] = temp;\par
2474     temp = NULL;\par
2475     free(temp);\par
2476 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro lib_projeto/projeto.h\par \pard\plain 
{\tc\tcl2 \v lib_projeto/projeto.h}
{\xe \v lib_projeto/projeto.h}
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdio.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <malloc.h>}\par
{\f2 #include <ctype.h>}\par
{\f2 #include <time.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Estruturas de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b matrixString}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b matrixInts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b KEY_HOLDER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b UTILIZADORES}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b UTILIZADORES_QUEUE}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FIRST_NUMBER}\~ '0'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CUTOFF}\~ 10\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es de tipos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct {\b KEY_HOLDER} {\b KEY_HOLDER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct {\b UTILIZADORES} {\b UTILIZADORES}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef struct {\b UTILIZADORES_QUEUE} {\b UTILIZADORES_QUEUE}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bipolar_numberInt} (short text[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numDigits} (int num)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numDigitsLong} (unsigned long long num)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b allDigits} (int num, int allD[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b allDigitsLong} (unsigned long long num, int allD[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b randomKey} (FILE *fileChavesPubWrite, char *fileName, int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char ** {\b randomKeyMatrix} (char **r, int n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b randomKeyValue} (char *r)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b charPos} (char *a, int d)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shellSortChar} (char **a, int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shellSortCharDigits} (char **a, char **priv, char **cod, int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b swapChar} (char **a, int i, int min)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b swapCharDigits} (char **a, char **priv, char **cod, int i, int min)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shellSortInt} (short **a, int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shellSortIntDigits} (short **a, short **priv, short **cod, int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b swapInt} (short **a, int i, int min)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b swapIntDigits} (short **a, short **priv, short **cod, int i, int min)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_char_sort_base} (char *a[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_char_sort_recursive_cutoff} (char *a[], char *aux[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_char_sort_recursive_basic} (char *a[], char *aux[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_char} (char *a[], char *aux[], int lo, int mid, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertionSort_char} (char *a[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_char_sort_base} (char *a[], char *priv[], char *cod[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_char_sort_recursive_cutoff} (char *a[], char *aux[], char *priv[], char *cod[], char *auxPriv[], char *auxCod[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_char_sort_recursive_basic} (char *a[], char *aux[], char *priv[], char *cod[], char *auxPriv[], char *auxCod[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_char} (char *a[], char *aux[], char *priv[], char *cod[], char *auxPriv[], char *auxCod[], int lo, int mid, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertionSortDigits_char} (char *a[], char *priv[], char *cod[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_int_sort_base} (short *a[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_int_sort_recursive_cutoff} (short *a[], short *aux[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_int_sort_recursive_basic} (short *a[], short *aux[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b merge_int} (short *a[], short *aux[], int lo, int mid, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertionSort_int} (short *a[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_int_sort_base} (short *a[], short *priv[], short *cod[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_int_sort_recursive_cutoff} (short *a[], short *aux[], short *priv[], short *cod[], short *auxPriv[], short *auxCod[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_int_sort_recursive_basic} (short *a[], short *aux[], short *priv[], short *cod[], short *auxPriv[], short *auxCod[], int lo, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mergeDigits_int} (short *a[], short *aux[], short *priv[], short *cod[], short *auxPriv[], short *auxCod[], int lo, int mid, int hi, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insertionSortDigits_int} (short *a[], short *priv[], short *cod[], int N, int order)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b insert_keyHolder} ({\b KEY_HOLDER} **portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b edit_keyHolder} ({\b KEY_HOLDER} **portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts, int keyHolderPos, int posChange, int keyPos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remove_keyHolder} ({\b KEY_HOLDER} **portaChaves, int keyHolderPos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b searchSingleKey_inKeyHolder} ({\b KEY_HOLDER} *portaChaves, int keyHolderPos, unsigned long long keyToSeach, int type, char *filename)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_txt_keyHolder} ({\b KEY_HOLDER} **portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts, int keyHolderPos, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_txt_keyHolder} ({\b KEY_HOLDER} **portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts, int keyHolderPos, int newKeysPos, char filename[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print_keyHolders} ({\b KEY_HOLDER} **portaChaves)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b create_utilizador_ordenado} ({\b UTILIZADORES_QUEUE} *queue, {\b UTILIZADORES} **utilizadores, char *name, char *email, {\b KEY_HOLDER} *key_holder_list, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b create_utilizador_cabeca} ({\b UTILIZADORES_QUEUE} *queue, {\b UTILIZADORES} **utilizadores, char *name, char *email, {\b KEY_HOLDER} *key_holder_list, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b create_utilizador_cauda} ({\b UTILIZADORES_QUEUE} *queue, {\b UTILIZADORES} **utilizadores, char *name, char *email, {\b KEY_HOLDER} *key_holder_list, int pos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b enqueue} ({\b UTILIZADORES_QUEUE} *queue, {\b UTILIZADORES} *utilizador)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b dequeue} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b print_utilizadores} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remover_nome_utilizador} ({\b UTILIZADORES_QUEUE} *queue, char *name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remover_cabeca_utilizador} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b remover_cauda_utilizador} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b search_utilizador_by_name} ({\b UTILIZADORES_QUEUE} *queue, char *name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ordenar_utilizadores} ({\b UTILIZADORES_QUEUE} *queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freeMatrixChar} (char **matrix, int N)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freeMatrixShort} (short **matrix, int N)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das macros\par
\pard\plain 
{\xe \v CUTOFF\:projeto.h}
{\xe \v projeto.h\:CUTOFF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CUTOFF\~ 10}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FIRST_NUMBER\:projeto.h}
{\xe \v projeto.h\:FIRST_NUMBER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FIRST_NUMBER\~ '0'}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos tipos\par
\pard\plain 
{\xe \v KEY_HOLDER\:projeto.h}
{\xe \v projeto.h\:KEY_HOLDER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct {\b KEY_HOLDER} {\b KEY_HOLDER}}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v UTILIZADORES\:projeto.h}
{\xe \v projeto.h\:UTILIZADORES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct {\b UTILIZADORES} {\b UTILIZADORES}}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v UTILIZADORES_QUEUE\:projeto.h}
{\xe \v projeto.h\:UTILIZADORES_QUEUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef struct {\b UTILIZADORES_QUEUE} {\b UTILIZADORES_QUEUE}}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v allDigits\:projeto.h}
{\xe \v projeto.h\:allDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void allDigits (int  {\i num}, int  {\i allD}[])}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai dividir um n\'FAmero (int) por digitos e armazenar os mesmos num array {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{n\'FAmero a ser dividido em digitos \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i allD} \cell }{aray com todos os digitos de num \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2184                                    \{\par
2185     {\cf18 int} i = 0;\par
2186     {\cf19 while} (num)\{\par
2187         allD[i] = num%10;\par
2188         num /= 10;\par
2189         i++;\par
2190     \}\par
2191 \}\par
}
}
{\xe \v allDigitsLong\:projeto.h}
{\xe \v projeto.h\:allDigitsLong}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void allDigitsLong (unsigned long long  {\i num}, int  {\i allD}[])}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai dividir um n\'FAmero (unsigned long long) por digitos e armazenar os mesmos num array {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{n\'FAmero a ser dividido em digitos \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i allD} \cell }{aray com todos os digitos de num \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2198                                                       \{\par
2199     {\cf18 int} i = 0;\par
2200     {\cf19 while} (num)\{\par
2201         allD[i] = num%10;\par
2202         num /= 10;\par
2203         i++;\par
2204     \}\par
2205 \}\par
}
}
{\xe \v bipolar_numberInt\:projeto.h}
{\xe \v projeto.h\:bipolar_numberInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int bipolar_numberInt (short  {\i text}[])}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai verificar se um dado numero \'E9 bipolar {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i text} \cell }{array com os v\'E1rios digitos do numero \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0 se for bipolar / -1 se n\'E3o for bipolar \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2019                                    \{\par
2020 \par
2021     {\cf18 int} bipolar = 0, changes = 0, exits = 0;\par
2022     {\cf18 int} number, pow, digits = 0;\par
2023 \par
2024     {\cf19 for} ({\cf18 int} i = 0; text[i+1] != -1; ++i) \{\par
2025         {\cf19 if}(text[i] != text[i+1])\{\par
2026             changes++;\par
2027         \}\par
2028     \}\par
2029     {\cf20 //changes--;}\par
2030     {\cf19 if}(changes == 1)\{\par
2031         {\cf19 return} 0;\par
2032     \}\par
2033     {\cf19 else}\{\par
2034         {\cf19 return} -1;\par
2035     \}\par
2036 \}\par
}
}
{\xe \v charPos\:projeto.h}
{\xe \v projeto.h\:charPos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int charPos (char *  {\i a}, int  {\i d})}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna o valor de uma posi\'E7\'E3o de um array {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{array \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i d} \cell }{posi\'E7\'E3o \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
retorna o valor dessa posi\'E7\'E3o ou -1 se n\'E3o existir \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2285                            \{\par
2286     {\cf19 if}(d < strlen(a)) {\cf19 return} a[d];\par
2287     {\cf19 else} {\cf19 return} -1;\par
2288 \}\par
}
}
{\xe \v create_utilizador_cabeca\:projeto.h}
{\xe \v projeto.h\:create_utilizador_cabeca}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void create_utilizador_cabeca ({\b UTILIZADORES_QUEUE} *  {\i queue}, {\b UTILIZADORES} **  {\i utilizadores}, char *  {\i name}, char *  {\i email}, {\b KEY_HOLDER} *  {\i key_holder_list}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que cria um utilizador \'E0 cabe\'E7a com uma dada lista de porta chaves {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i utilizadores} \cell }{apontador que aponta para os v\'E1rios utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i email} \cell }{email a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key_holder_list} \cell }{lista de porta chaves a ser inserida no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{posi\'E7\'E3o do primeiro porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1748                                                                                                                                                      \{\par
1749     {\cf18 int} stopKeyHolderPos = 1;\par
1750     UTILIZADORES* utilizador = malloc({\cf17 sizeof}(UTILIZADORES));\par
1751     utilizador->name = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(name) + 1));\par
1752     strcpy(utilizador->name, name);\par
1753     utilizador->email = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(email) + 1));\par
1754     strcpy(utilizador->email, email);\par
1755     utilizador->email = email;\par
1756     utilizador->next = *utilizadores;\par
1757     KEY_HOLDER *currKeyHolder = key_holder_list;\par
1758     {\cf19 while} (stopKeyHolderPos < pos)\{     {\cf20 // ciclo at\'E9 chegar ao porta chaves escolhido}\par
1759         currKeyHolder = currKeyHolder->next;\par
1760         stopKeyHolderPos++;\par
1761         {\cf19 if} (currKeyHolder == NULL)\{     {\cf20 // se n\'E3o existir o porta chaves}\par
1762             printf({\cf22 "Porta Chaves nao encontrado\\n"});\par
1763             {\cf19 return};\par
1764         \}\par
1765     \}\par
1766     utilizador->key_holder_list = currKeyHolder;\par
1767 \par
1768     {\cf20 // se a lista de utilizadores estiver vazia}\par
1769     {\cf19 if}(*utilizadores == NULL)\{\par
1770         *utilizadores = utilizador; {\cf20 // este vai ser o primerio utilizador}\par
1771         queue->size++;\par
1772         enqueue(queue, utilizador); {\cf20 // chama a fun\'E7\'E3o para ordenar (head & tail) na fila de utilizadores}\par
1773         {\cf19 return};\par
1774     \}\par
1775 \par
1776     {\cf20 // Insere o novo utilizador no inicio da lista ligada}\par
1777     queue->size++;\par
1778     *utilizadores = utilizador; {\cf20 // o primeiro utilizador vai ser este novo utilizador}\par
1779     queue->head = utilizador;   {\cf20 // a head da fila vai passar a ser este novo utilizador}\par
1780 \}\par
}
}
{\xe \v create_utilizador_cauda\:projeto.h}
{\xe \v projeto.h\:create_utilizador_cauda}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void create_utilizador_cauda ({\b UTILIZADORES_QUEUE} *  {\i queue}, {\b UTILIZADORES} **  {\i utilizadores}, char *  {\i name}, char *  {\i email}, {\b KEY_HOLDER} *  {\i key_holder_list}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que cria um utilizador \'E0 cauda com uma dada lista de porta chaves {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i utilizadores} \cell }{apontador que aponta para os v\'E1rios utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i email} \cell }{email a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key_holder_list} \cell }{lista de porta chaves a ser inserida no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{posi\'E7\'E3o do primeiro porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1700                                                                                                                                                     \{\par
1701     {\cf18 int} stopKeyHolderPos = 1;\par
1702     UTILIZADORES* utilizador = malloc({\cf17 sizeof}(UTILIZADORES));\par
1703     utilizador->name = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(name) + 1));\par
1704     strcpy(utilizador->name, name);\par
1705     utilizador->email = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(email) + 1));\par
1706     strcpy(utilizador->email, email);\par
1707     utilizador->email = email;\par
1708     utilizador->next = NULL;\par
1709     KEY_HOLDER *currKeyHolder = key_holder_list;\par
1710     {\cf19 while} (stopKeyHolderPos < pos)\{     {\cf20 // ciclo at\'E9 chegar ao porta chaves escolhido}\par
1711         currKeyHolder = currKeyHolder->next;\par
1712         stopKeyHolderPos++;\par
1713         {\cf19 if} (currKeyHolder == NULL)\{     {\cf20 // se n\'E3o existir o porta chaves}\par
1714             printf({\cf22 "Porta Chaves nao encontrado\\n"});\par
1715             {\cf19 return};\par
1716         \}\par
1717     \}\par
1718     utilizador->key_holder_list = currKeyHolder;\par
1719 \par
1720     {\cf20 // se a lista de utilizadores estiver vazia}\par
1721     {\cf19 if}(*utilizadores == NULL)\{\par
1722         *utilizadores = utilizador; {\cf20 // este vai ser o primerio utilizador}\par
1723         queue->size++;\par
1724         enqueue(queue, utilizador); {\cf20 // chama a fun\'E7\'E3o para ordenar (head & tail) na fila de utilizadores}\par
1725         {\cf19 return};\par
1726     \}\par
1727 \par
1728     {\cf20 // ciclo para percorrer os utilizadores at\'E9 chegar ao penultimo}\par
1729     UTILIZADORES *curr = *utilizadores;\par
1730     {\cf19 while} (curr->next != NULL)\{\par
1731         curr = curr->next;\par
1732     \}\par
1733     {\cf20 // o penultimo utilizador vai apontar para o novo utilizar}\par
1734     curr->next = utilizador;\par
1735     queue->size++;\par
1736     enqueue(queue, curr->next);  {\cf20 // chama a fun\'E7\'E3o para ordenar (head & tail) na fila de utilizadores}\par
1737 \}\par
}
}
{\xe \v create_utilizador_ordenado\:projeto.h}
{\xe \v projeto.h\:create_utilizador_ordenado}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void create_utilizador_ordenado ({\b UTILIZADORES_QUEUE} *  {\i queue}, {\b UTILIZADORES} **  {\i utilizadores}, char *  {\i name}, char *  {\i email}, {\b KEY_HOLDER} *  {\i key_holder_list}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que cria um utilizador com uma dada lista de porta chaves (ordenado alfabeticamente por nome) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i utilizadores} \cell }{apontador que aponta para os v\'E1rios utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i email} \cell }{email a ser inserido no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key_holder_list} \cell }{lista de porta chaves a ser inserida no utilizador \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{posi\'E7\'E3o do primeiro porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1642                                                                                                                                                        \{\par
1643     {\cf18 int} stopKeyHolderPos = 1;\par
1644     UTILIZADORES* utilizador = malloc({\cf17 sizeof}(UTILIZADORES));\par
1645     utilizador->name = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(name) + 1));\par
1646     strcpy(utilizador->name, name);\par
1647     utilizador->email = malloc({\cf17 sizeof} ({\cf18 char}) * (strlen(email) + 1));\par
1648     strcpy(utilizador->email, email);\par
1649     utilizador->email = email;\par
1650     utilizador->next = NULL;\par
1651     KEY_HOLDER *currKeyHolder = key_holder_list;\par
1652     {\cf19 while} (stopKeyHolderPos < pos)\{     {\cf20 // ciclo at\'E9 chegar ao porta chaves escolhido}\par
1653         currKeyHolder = currKeyHolder->next;\par
1654         stopKeyHolderPos++;\par
1655         {\cf19 if} (currKeyHolder == NULL)\{     {\cf20 // se n\'E3o existir o porta chaves}\par
1656             printf({\cf22 "Porta Chaves nao encontrado\\n"});\par
1657             {\cf19 return};\par
1658         \}\par
1659     \}\par
1660     utilizador->key_holder_list = currKeyHolder;\par
1661 \par
1662     {\cf20 // se a lista de utilizadores estiver vazia}\par
1663     {\cf19 if}(*utilizadores == NULL)\{\par
1664         *utilizadores = utilizador; {\cf20 // este vai ser o primerio utilizador}\par
1665         queue->size++;\par
1666         enqueue(queue, utilizador); {\cf20 // chama a fun\'E7\'E3o para ordenar (head & tail) na fila de utilizadores}\par
1667         {\cf19 return};\par
1668     \}\par
1669 \par
1670     {\cf20 // ciclo para encontrar a posi\'E7\'E3o do novo utilizador (ordenado alfabeticamente)}\par
1671     UTILIZADORES *curr = *utilizadores;\par
1672     UTILIZADORES *prev = NULL;\par
1673     {\cf19 while} (curr != NULL && strcmp(curr->name, name) < 0) \{  {\cf20 // o ciclo continua a procurar a pos enquanto existirem porta chaves com um nome alfabeticamente "menor" que o utilizador a ser criado}\par
1674         prev = curr;        {\cf20 // porta chaves anterior vai passar a ser igual ao atual}\par
1675         curr = curr->next;  {\cf20 // porta chaves atual vai passar a ser o proximo porta chaves}\par
1676     \}\par
1677 \par
1678     {\cf20 // se n\'E3o existirem porta chaves anteriores quer dizer que este utilizador \'E9 o que tem o nome alfabeticamente "menor" etn\'E3o fica em primeiro}\par
1679     {\cf19 if} (prev == NULL) \{\par
1680         utilizador->next = *utilizadores;\par
1681         *utilizadores = utilizador;\par
1682         queue->head = utilizador;\par
1683     \} {\cf19 else} \{    {\cf20 // se existirem utilizadores com nome "menor"}\par
1684         utilizador->next = prev->next;  {\cf20 // o novo utilizador vai apontar para o antigo utilizador apontado pelo anterior}\par
1685         prev->next = utilizador;        {\cf20 // e o utilizador anteriro agora vai apontar para o novo utilizador}\par
1686     \}\par
1687 \par
1688     queue->size++;\par
1689 \}\par
}
}
{\xe \v dequeue\:projeto.h}
{\xe \v projeto.h\:dequeue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void dequeue ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o para dar free a toda a fila de utilizadores {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadors \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1801                                        \{\par
1802     {\cf19 while} (queue->head != NULL)\{        {\cf20 // cilco enquanto a head for diferente de NULL}\par
1803         {\cf19 if}(queue->head == queue->tail)\{ {\cf20 // se a head e a tail forem iguais ent\'E3o s\'F3 existe 1 utilizador}\par
1804             queue->head = NULL;\par
1805             queue->tail = NULL;\par
1806         \}\par
1807         {\cf19 else}\{                                   {\cf20 // se a head e a tail n\'E3o forem iguais a fila tem v\'E1rios utilizadores}\par
1808             UTILIZADORES *temp = queue->head;   {\cf20 // temp a apontar para a head}\par
1809             queue->head = queue->head->next;    {\cf20 // a head vai passar a ser o prox utilizador}\par
1810             free(temp);                 {\cf20 // free \'E0 antiga head}\par
1811         \}\par
1812     \}\par
1813 \}\par
}
}
{\xe \v edit_keyHolder\:projeto.h}
{\xe \v projeto.h\:edit_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void edit_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts}, int  {\i keyHolderPos}, int  {\i keyPosChange}, int  {\i newKeyPos})}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que serve para editar um porta chaves tanto para adicionar uma nova linha de matrizes como para editar uma j\'E1 existente A posi\'E7\'E3o na lista ligada deste porta chaves vai ser atualizada para a primeira posi\'E7\'E3o pois vais come\'E7ar a ser o porta chaves com a data de modifica\'E7\'E3o mais recente {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador para os apontadores dos porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mString} \cell }{struct das matrizes de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mInts} \cell }{strucr para as matrizes de ints \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves a ser editado \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyPosChange} \cell }{linha do porta chaves a ser editada/adicionada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i newKeyPos} \cell }{linha da matriz de string/ints a ser adicionada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1077                                                                                                                                                       \{\par
1078     KEY_HOLDER *temp = NULL;\par
1079     time_t data_modificacao;\par
1080     time(&data_modificacao);\par
1081     {\cf18 int} stopPos=1, isAdd = 0, size = 0, sizeMax = 1;\par
1082 \par
1083     KEY_HOLDER * curr = *portaChaves;\par
1084     {\cf19 while} (stopPos != keyHolderPos)\{    {\cf20 // andar na lista ligada at\'E9 chegar ao porta chaves a ser editado}\par
1085         {\cf19 if}(curr == NULL)\{\par
1086             printf({\cf22 "Porta Chaves Nao Encontrado\\n"});\par
1087             {\cf19 return};\par
1088         \}\par
1089         temp = curr;            {\cf20 // guarda o porta chaves anterior}\par
1090         curr = curr->next;\par
1091         stopPos++;\par
1092     \}\par
1093 \par
1094     {\cf19 for} ({\cf18 int} i = 0; strcmp(curr->khString.matrixPub[i], {\cf22 "-1"}) != 0; ++i) \{  {\cf20 // calcula o tamanho das matrizes deste prota chaves}\par
1095         sizeMax++;\par
1096     \}\par
1097 \par
1098     {\cf19 for} ({\cf18 int} j = 0; j <= keyPosChange; ++j) \{       {\cf20 // ciclo que vai verificar se a linha do porta chaves j\'E1 existe ou n\'E3o, se n\'E3on existir vamos adicionar}\par
1099         {\cf19 if}(strcmp(curr->khString.matrixPub[j], {\cf22 "-1"}) == 0)\{ {\cf20 // se estamos na ultima linha do porta chaves quer dizer que a linha que o utilizador escolheu n\'E3o existe}\par
1100             {\cf19 if}(newKeyPos > mString.lines)\{  {\cf20 // verificar se a linha a diconar existe na matriz de strings}\par
1101                 curr->khString.matrixPub[j] = realloc(curr->khString.matrixPub[j],2 * sizeof ({\cf18 char}));\par
1102                 strcpy(curr->khString.matrixPub[j], {\cf22 "0"});   {\cf20 // se n\'E3o existir adicionamos 0}\par
1103             \} {\cf19 else}\{\par
1104                 curr->khString.matrixPub[j] = realloc(curr->khString.matrixPub[j],(numDigitsLong(atoll(mString.matrixPub[newKeyPos]))+1)*sizeof ({\cf18 char}));\par
1105                 strcpy(curr->khString.matrixPub[j], mString.matrixPub[newKeyPos]);  {\cf20 // se existir adicionamos essa linha}\par
1106             \}\par
1107             isAdd = 1;\par
1108         \}\par
1109         {\cf20 // Mesma coisa que na matriz de String de chaves Publicas}\par
1110         {\cf19 if}(strcmp(curr->khString.matrixPriv[j], {\cf22 "-1"}) == 0)\{\par
1111             {\cf19 if}(newKeyPos > mString.lines)\{\par
1112                 curr->khString.matrixPriv[j] = realloc(curr->khString.matrixPriv[j],2 * sizeof ({\cf18 char}));\par
1113                 curr->khString.matrixPriv[j] =  {\cf22 "0\\0"};\par
1114             \} {\cf19 else} \{\par
1115                 curr->khString.matrixPriv[j] = realloc(curr->khString.matrixPriv[j],(numDigitsLong(atoll(mString.matrixPriv[newKeyPos]))+1) * sizeof ({\cf18 char}));\par
1116                 curr->khString.matrixPriv[j] = mString.matrixPriv[newKeyPos];\par
1117             \}\par
1118             isAdd = 1;\par
1119         \}\par
1120         {\cf19 if}(strcmp(curr->khString.matrixCod[j], {\cf22 "-1"}) == 0)\{\par
1121             {\cf19 if}(newKeyPos > mString.lines)\{\par
1122                 curr->khString.matrixCod[j] = realloc(curr->khString.matrixCod[j],2 * sizeof ({\cf18 char}));\par
1123                 curr->khString.matrixCod[j] =  {\cf22 "0\\0"};\par
1124             \} {\cf19 else} \{\par
1125                 curr->khString.matrixCod[j] = realloc(curr->khString.matrixCod[j],(numDigitsLong(atoll(mString.matrixCod[newKeyPos]))+1) * sizeof ({\cf18 char}));\par
1126                 curr->khString.matrixCod[j] = mString.matrixCod[newKeyPos];\par
1127             \}\par
1128             isAdd = 1;\par
1129         \}\par
1130         {\cf19 if}(curr->khInts.matrixPub[j][0] == -1)\{\par
1131             {\cf19 if}(newKeyPos > mInts.lines)\{\par
1132                 curr->khInts.matrixPub[j] = realloc(curr->khInts.matrixPub[j],2 * sizeof ({\cf18 short}));\par
1133                 curr->khInts.matrixPub[j][0] = 0;\par
1134                 curr->khInts.matrixPub[j][1] = -1;\par
1135             \} {\cf19 else} \{\par
1136                 curr->khInts.matrixPub[j] = realloc(curr->khInts.matrixPub[j],(numDigitsLong(key_digits_2_long_int(mInts.matrixPub[newKeyPos]))+1) * sizeof ({\cf18 short}));\par
1137                 {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixPub[newKeyPos])) + 1; ++i) \{\par
1138                     curr->khInts.matrixPub[j][i] = mInts.matrixPub[newKeyPos][i];\par
1139                 \}\par
1140             \}\par
1141             isAdd = 1;\par
1142         \}\par
1143         {\cf19 if}(curr->khInts.matrixPriv[j][0] == -1)\{\par
1144             {\cf19 if}(newKeyPos > mInts.lines)\{\par
1145                 curr->khInts.matrixPriv[j] = realloc(curr->khInts.matrixPriv[j],2 * sizeof ({\cf18 short}));\par
1146                 curr->khInts.matrixPriv[j][0] = 0;\par
1147                 curr->khInts.matrixPriv[j][1] = -1;\par
1148             \} {\cf19 else}\{\par
1149                 curr->khInts.matrixPriv[j] = realloc(curr->khInts.matrixPriv[j],(numDigitsLong(key_digits_2_long_int(mInts.matrixPriv[newKeyPos]))+1) * sizeof ({\cf18 short}));\par
1150                 {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixPriv[newKeyPos]))+1; ++i) \{\par
1151                     curr->khInts.matrixPriv[j][i] = mInts.matrixPriv[newKeyPos][i];\par
1152                 \}\par
1153             \}\par
1154             isAdd = 1;\par
1155         \}\par
1156         {\cf19 if}(curr->khInts.matrixCod[j][0] == -1)\{\par
1157             {\cf19 if}(newKeyPos > mInts.lines)\{\par
1158                 curr->khInts.matrixCod[j] = realloc(curr->khInts.matrixCod[j],2 * sizeof ({\cf18 short}));\par
1159                 curr->khInts.matrixCod[j][0] = 0;\par
1160                 curr->khInts.matrixCod[j][1] = -1;\par
1161             \} {\cf19 else} \{\par
1162                 curr->khInts.matrixCod[j] = realloc(curr->khInts.matrixCod[j],(numDigitsLong(key_digits_2_long_int(mInts.matrixCod[newKeyPos]))+1) * sizeof ({\cf18 short}));\par
1163                 {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixCod[newKeyPos])) + 1; ++i) \{\par
1164                     curr->khInts.matrixCod[j][i] = mInts.matrixCod[newKeyPos][i];\par
1165                 \}\par
1166             \}\par
1167             isAdd = 1;\par
1168         \}\par
1169         {\cf19 if}(isAdd == 1)\{ {\cf20 // se a linha foi adicionada ent\'E3o}\par
1170             curr->sieInts++;        {\cf20 // aumentamos o numero de linhas ints deste porta chaves}\par
1171             curr->sizeStrings++;    {\cf20 // aumentamos o numeri de linhas strings deste porta chaves}\par
1172 \par
1173             {\cf20 // Atualizo o valor de -1 nas matrizes}\par
1174             curr->khString.matrixPub = realloc(curr->khString.matrixPub, (sizeMax+1) * sizeof ({\cf18 char}*));\par
1175             curr->khString.matrixPub[sizeMax] = calloc(3, {\cf17 sizeof} ({\cf18 char}));\par
1176             curr->khString.matrixPriv[sizeMax] = calloc(3, {\cf17 sizeof} ({\cf18 char}));\par
1177             curr->khString.matrixCod[sizeMax] = calloc(3, {\cf17 sizeof} ({\cf18 char}));\par
1178             strcpy(curr->khString.matrixPub[sizeMax], {\cf22 "-1"});\par
1179             strcpy(curr->khString.matrixPriv[sizeMax], {\cf22 "-1"});\par
1180             strcpy(curr->khString.matrixCod[sizeMax], {\cf22 "-1"});\par
1181 \par
1182             curr->khInts.matrixPub = realloc(curr->khInts.matrixPub, (sizeMax+1) * sizeof ({\cf18 short}*));\par
1183             curr->khInts.matrixPub[sizeMax] = calloc(2, {\cf17 sizeof} ({\cf18 short}));\par
1184             curr->khInts.matrixPriv[sizeMax] = calloc(2, {\cf17 sizeof} ({\cf18 short}));\par
1185             curr->khInts.matrixCod[sizeMax] = calloc(2, {\cf17 sizeof} ({\cf18 short}));\par
1186             curr->khInts.matrixPub[sizeMax][0] = -1;\par
1187             curr->khInts.matrixPriv[sizeMax][0] = -1;\par
1188             curr->khInts.matrixCod[sizeMax][0] = -1;\par
1189 \par
1190             {\cf20 // se n\'E3o for o primeiro porta chaves, atualizamos a lista ligada}\par
1191             {\cf19 if}(keyHolderPos != 1) \{\par
1192                 temp->next = curr->next;    {\cf20 // o porta chaves anterior vai agora apontar para o proximo deste porta chaves editado}\par
1193                 curr->next = *portaChaves;  {\cf20 // o porta chaves editado agora vai apontar para o primeiro porta chaves}\par
1194                 *portaChaves = curr;        {\cf20 // o primeiro porta chaves agora \'E9 este porta chaves que foi editado}\par
1195             \}\par
1196 \par
1197             {\cf19 return};\par
1198         \}\par
1199         size++;\par
1200     \}\par
1201     {\cf19 if}(isAdd == 0)\{     {\cf20 // se a linha n\'E3o foi adicionada ent\'E3o quer dizer que j\'E1 existe no porta chaves e vamos editar}\par
1202 \par
1203         {\cf19 if}(newKeyPos >= mString.lines)\{ {\cf20 // se a linha das matrizes n\'E3o existir \'E9 inserido um 0}\par
1204             curr->khString.matrixPub[keyPosChange] = ({\cf18 char} *) calloc(1, {\cf17 sizeof} ({\cf18 char} ));\par
1205             curr->khString.matrixPriv[keyPosChange] = ({\cf18 char} *) calloc(1, {\cf17 sizeof} ({\cf18 char} ));\par
1206             curr->khString.matrixCod[keyPosChange] = ({\cf18 char} *) calloc(1,  {\cf17 sizeof} ({\cf18 char} ));\par
1207             strcpy(curr->khString.matrixPub[keyPosChange], {\cf22 "0"});\par
1208             strcpy(curr->khString.matrixPriv[keyPosChange], {\cf22 "0"});\par
1209             strcpy(curr->khString.matrixCod[keyPosChange], {\cf22 "0"});\par
1210         \} {\cf19 else}\{     {\cf20 // se existir essa linha \'E9 inserida}\par
1211             curr->khString.matrixPub[keyPosChange] = ({\cf18 char} *) calloc(numDigitsLong(atoll(mString.matrixPub[newKeyPos]))+1, {\cf17 sizeof} (char ));\par
1212             curr->khString.matrixPriv[keyPosChange] = ({\cf18 char} *) calloc(numDigitsLong(atoll(mString.matrixPriv[newKeyPos]))+1, {\cf17 sizeof} ({\cf18 char} ));\par
1213             curr->khString.matrixCod[keyPosChange] = ({\cf18 char} *) calloc(numDigitsLong(atoll(mString.matrixCod[newKeyPos]))+1,  {\cf17 sizeof} ({\cf18 char} ));\par
1214             curr->khString.matrixPub[keyPosChange] =  mString.matrixPub[newKeyPos];\par
1215             curr->khString.matrixPriv[keyPosChange] = mString.matrixPriv[newKeyPos];\par
1216             curr->khString.matrixCod[keyPosChange] = mString.matrixCod[newKeyPos];\par
1217         \}\par
1218         {\cf19 if}(newKeyPos >= mInts.lines)\{ {\cf20 // se a linha das matrizes n\'E3o existir \'E9 inserido um 0}\par
1219             curr->khInts.matrixPub[keyPosChange] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
1220             curr->khInts.matrixPriv[keyPosChange] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
1221             curr->khInts.matrixCod[keyPosChange] = ({\cf18 short} *) calloc(2, {\cf17 sizeof} ({\cf18 short} ));\par
1222             curr->khInts.matrixPub[keyPosChange][0] = 0;\par
1223             curr->khInts.matrixPriv[keyPosChange][0] = 0;\par
1224             curr->khInts.matrixCod[keyPosChange][0] = 0;\par
1225             curr->khInts.matrixPub[keyPosChange][1] = -1;\par
1226             curr->khInts.matrixPriv[keyPosChange][1] = -1;\par
1227             curr->khInts.matrixCod[keyPosChange][1] = -1;\par
1228         \} {\cf19 else}\{     {\cf20 // se existir essa linha \'E9 inserida}\par
1229             curr->khInts.matrixPub[keyPosChange] = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(mInts.matrixPub[newKeyPos]))+1, {\cf17 sizeof} ({\cf18 short} ));\par
1230             curr->khInts.matrixPriv[keyPosChange] = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(mInts.matrixPriv[newKeyPos]))+1, {\cf17 sizeof} ({\cf18 short} ));\par
1231             curr->khInts.matrixCod[keyPosChange] = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(mInts.matrixCod[newKeyPos]))+1, {\cf17 sizeof} ({\cf18 short} ));\par
1232             {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixPub[newKeyPos]))+1; ++i) \{\par
1233                 curr->khInts.matrixPub[keyPosChange][i] = mInts.matrixPub[newKeyPos][i];\par
1234             \}\par
1235             {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixPriv[newKeyPos]))+1; ++i) \{\par
1236                 curr->khInts.matrixPriv[keyPosChange][i] = mInts.matrixPriv[newKeyPos][i];\par
1237             \}\par
1238             {\cf19 for} ({\cf18 int} i = 0; i < numDigitsLong(key_digits_2_long_int(mInts.matrixCod[newKeyPos]))+1; ++i) \{\par
1239                 curr->khInts.matrixCod[keyPosChange][i] = mInts.matrixCod[newKeyPos][i];\par
1240             \}\par
1241         \}\par
1242     \}\par
1243 \par
1244     curr->data_modificacao = ctime(&data_modificacao);      {\cf20 // artualizo a data de modifica\'E7\'E3o}\par
1245 \par
1246     {\cf20 // se n\'E3o for o primeiro porta chaves, atualizo a lista ligada}\par
1247     {\cf19 if}(keyHolderPos != 1)\{\par
1248         temp->next = curr->next;    {\cf20 // o porta chaves anterior agora vai apontador para o proximo deste prota chaves editado}\par
1249         curr->next = *portaChaves;  {\cf20 // este porta chaves vai agora apontar para o primeiro porta chaves}\par
1250         *portaChaves = curr;        {\cf20 // este porta chaves editado vai passar a ser o primeiro porta chaves da lista ligada}\par
1251     \}\par
1252 \}\par
}
}
{\xe \v enqueue\:projeto.h}
{\xe \v projeto.h\:enqueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void enqueue ({\b UTILIZADORES_QUEUE} *  {\i queue}, {\b UTILIZADORES} *  {\i utilizador})}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Atualiza a head e tail da fila de utilizadores {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i utilizador} \cell }{apontador de um utilizador \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1787                                                                   \{\par
1788     {\cf19 if} (queue->tail == NULL) \{  {\cf20 // se a tail for NULL que dizer que a fila est\'E1 vaiza}\par
1789         queue->head = utilizador;   {\cf20 // ent\'E3o a head vai ser o utilizador}\par
1790         queue->tail = utilizador;   {\cf20 // a tail tambem vai ser o utilizador}\par
1791     \} {\cf19 else} \{    {\cf20 // se a fila n\'E3o estiver vazia}\par
1792         queue->tail->next = utilizador; {\cf20 // a antiga tail vai apontador para o utilizador}\par
1793         queue->tail = utilizador;       {\cf20 // tail vai ser atualizada para o utilizador (no fim a tail aponta para ela mesma por causa da linha anterior)}\par
1794     \}\par
1795 \}\par
}
}
{\xe \v freeMatrixChar\:projeto.h}
{\xe \v projeto.h\:freeMatrixChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeMatrixChar (char **  {\i matrix}, int  {\i N})}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que d\'E1 free \'E0 matriz de Char em N linhas {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{numero de linhas \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1989                                          \{\par
1990     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
1991         matrix[i] = NULL;\par
1992         free(matrix[i]);\par
1993     \}\par
1994 \}\par
}
}
{\xe \v freeMatrixShort\:projeto.h}
{\xe \v projeto.h\:freeMatrixShort}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeMatrixShort (short **  {\i matrix}, int  {\i N})}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que d\'E1 free \'E0 matriz de Ints em N linhas {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrix} \cell }{matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{nuero de linhas \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2001                                            \{\par
2002     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2003         {\cf19 if}(matrix[i] != NULL)\{\par
2004             matrix[i] = NULL;\par
2005             free(matrix[i]);\par
2006         \}\par
2007     \}\par
2008 \}\par
}
}
{\xe \v insert_keyHolder\:projeto.h}
{\xe \v projeto.h\:insert_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insert_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts}, int  {\i pos})}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o vai criar um novo porta chaves e inserir uma dada linha das matrizes nesse porta chaves e inserilo no inicio da lista ligada {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador para os apontadores dos porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mString} \cell }{struct das matrizes de Strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mInts} \cell }{struct das matrizes de Ints \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pos} \cell }{linha das matrizes a ser inserida no porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1014                                                                                                               \{\par
1015     KEY_HOLDER* new_keyHolder = (KEY_HOLDER *) malloc({\cf17 sizeof} (KEY_HOLDER));\par
1016     time_t data_criacao;\par
1017     time(&data_criacao);\par
1018     time_t data_modificacao;\par
1019     time(&data_modificacao);\par
1020 \par
1021     {\cf19 if}(new_keyHolder == NULL)\{\par
1022         exit(1);\par
1023     \}\par
1024 \par
1025     new_keyHolder->next = *portaChaves;\par
1026     new_keyHolder->khString.matrixPub = alloc_matrix_char(1, 1);\par
1027     new_keyHolder->khString.matrixPriv = alloc_matrix_char(1, 1);\par
1028     new_keyHolder->khString.matrixCod = alloc_matrix_char(1, 1);\par
1029     new_keyHolder->khInts.matrixPub = alloc_matrix_int(1, 1);\par
1030     new_keyHolder->khInts.matrixPriv = alloc_matrix_int(1, 1);\par
1031     new_keyHolder->khInts.matrixCod = alloc_matrix_int(1, 1);\par
1032 \par
1033     {\cf19 if}(pos >= mString.lines)\{       {\cf20 // se tentar adicionar uma linha que n\'E3o exista \'E9 inserido 0}\par
1034         store_key_char(new_keyHolder->khString.matrixPub, 1, 0);\par
1035         store_key_char(new_keyHolder->khString.matrixPriv, 1, 0);\par
1036         store_key_char(new_keyHolder->khString.matrixCod, 1, 0);\par
1037     \} {\cf19 else}\{\par
1038         store_key_char(new_keyHolder->khString.matrixPub, 1, atoll(mString.matrixPub[pos]));\par
1039         store_key_char(new_keyHolder->khString.matrixPriv, 1, atoll(mString.matrixPriv[pos]));\par
1040         store_key_char(new_keyHolder->khString.matrixCod, 1, atoll(mString.matrixCod[pos]));\par
1041     \}\par
1042     {\cf19 if}(pos >= mInts.lines)\{       {\cf20 // se tentar adicionar uma linha que n\'E3o exista \'E9 inserido 0}\par
1043         store_key_int(new_keyHolder->khInts.matrixPub, 1, 0);\par
1044         store_key_int(new_keyHolder->khInts.matrixPriv, 1, 0);\par
1045         store_key_int(new_keyHolder->khInts.matrixCod, 1, 0);\par
1046     \} {\cf19 else}\{\par
1047         store_key_int(new_keyHolder->khInts.matrixPub, 2, key_digits_2_long_int(mInts.matrixPub[pos]));\par
1048         store_key_int(new_keyHolder->khInts.matrixPriv, 2, key_digits_2_long_int(mInts.matrixPriv[pos]));\par
1049         store_key_int(new_keyHolder->khInts.matrixCod, 2, key_digits_2_long_int(mInts.matrixCod[pos]));\par
1050     \}\par
1051 \par
1052     new_keyHolder->data_criacao = ctime(&data_criacao);             {\cf20 // insere a data de cria\'E7\'E3o}\par
1053     new_keyHolder->data_modificacao = ctime(&data_modificacao);     {\cf20 // insere a data de modifica\'E7\'E3o}\par
1054 \par
1055     {\cf19 if}(*portaChaves == NULL)\{           {\cf20 // se n\'E3o existirem porta chaves}\par
1056         new_keyHolder->sieInts++;\par
1057         new_keyHolder->sizeStrings++;\par
1058         *portaChaves = new_keyHolder;\par
1059         {\cf19 return};\par
1060     \}\par
1061 \par
1062     new_keyHolder->sieInts++;\par
1063     new_keyHolder->sizeStrings++;\par
1064     *portaChaves = new_keyHolder;       {\cf20 // se j\'E1 existirem porta chaves o primeiro agora \'E9 o new_keyHolder}\par
1065 \}\par
}
}
{\xe \v insertionSort_char\:projeto.h}
{\xe \v projeto.h\:insertionSort_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insertionSort_char (char *  {\i a}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmo de ordena\'E7\'E3o insertion sort pega num valor do array e compara com os anteriores Complexidade algoritmica: Best case: N / Average: 1/4N^2 / Worst: 1/2N^2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordem (1 - ascendente e 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2590                                                     \{\par
2591     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2592         {\cf19 for} ({\cf18 int} j = i; j > 0; j--) \{\par
2593             {\cf19 if}(order == 1)\{\par
2594                 {\cf19 if}(strcmp(a[j], {\cf22 "-1"}) == 0) {\cf19 break};\par
2595                 {\cf19 if}(atoll(a[j]) < atoll(a[j-1]))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2596                     swapChar(a, j, j-1);\par
2597                 \} {\cf19 else} {\cf19 break};\par
2598             \} {\cf19 else}\{\par
2599                 {\cf19 if}(strcmp(a[j], {\cf22 "-1"}) == 0) {\cf19 break};\par
2600                 {\cf19 if}(atoll(a[j]) > atoll(a[j-1]))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2601                     swapChar(a, j, j-1);\par
2602                 \} {\cf19 else} {\cf19 break};\par
2603             \}\par
2604         \}\par
2605     \}\par
2606 \}\par
}
}
{\xe \v insertionSort_int\:projeto.h}
{\xe \v projeto.h\:insertionSort_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insertionSort_int (short *  {\i a}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmo de ordena\'E7\'E3o insertion sort pega num valor do array e compara com os anteriores Complexidade algoritmica: Best case: N / Average: 1/4N^2 / Worst: 1/2N^2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2888                                                     \{\par
2889     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2890         {\cf19 for} ({\cf18 int} j = i; j > 0; j--) \{\par
2891             {\cf19 if}(order == 1)\{\par
2892                 {\cf19 if}(a[j][0] == -1) {\cf19 break};\par
2893                 {\cf19 if}(key_digits_2_long_int(a[j]) < key_digits_2_long_int(a[j-1]))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2894                     swapInt(a, j, j-1);\par
2895                 \} {\cf19 else} {\cf19 break};\par
2896             \} {\cf19 else}\{\par
2897                 {\cf19 if}(a[j][0] == -1) {\cf19 break};\par
2898                 {\cf19 if}(key_digits_2_long_int(a[j]) > key_digits_2_long_int(a[j-1]))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2899                     swapInt(a, j, j-1);\par
2900                 \} {\cf19 else} {\cf19 break};\par
2901             \}\par
2902         \}\par
2903     \}\par
2904 \}\par
}
}
{\xe \v insertionSortDigits_char\:projeto.h}
{\xe \v projeto.h\:insertionSortDigits_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insertionSortDigits_char (char *  {\i a}[], char *  {\i priv}[], char *  {\i cod}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmo de ordena\'E7\'E3o insertion sort pega num valor de digitos do array e compara com os anteriores Complexidade algoritmica: Best case: N / Average: 1/4N^2 / Worst: 1/2N^2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de string de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strignde chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de string de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2774                                                                                      \{\par
2775     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2776         {\cf19 for} ({\cf18 int} j = i; j > 0; j--) \{\par
2777             {\cf19 if}(order == 1)\{\par
2778                 {\cf19 if}(strcmp(a[j], {\cf22 "-1"}) == 0) {\cf19 break};\par
2779                 {\cf19 if}(numDigitsLong(atoll(a[j])) < numDigitsLong(atoll(a[j-1])))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2780                     swapCharDigits(a, priv, cod, j, j-1);\par
2781                 \} {\cf19 else} {\cf19 break};\par
2782             \} {\cf19 else}\{\par
2783                 {\cf19 if}(strcmp(a[j], {\cf22 "-1"}) == 0) {\cf19 break};\par
2784                 {\cf19 if}(numDigitsLong(atoll(a[j])) > numDigitsLong(atoll(a[j-1])))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2785                     swapCharDigits(a, priv, cod, j, j-1);\par
2786                 \} {\cf19 else} {\cf19 break};\par
2787             \}\par
2788         \}\par
2789     \}\par
2790 \}\par
}
}
{\xe \v insertionSortDigits_int\:projeto.h}
{\xe \v projeto.h\:insertionSortDigits_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void insertionSortDigits_int (short *  {\i a}[], short *  {\i priv}[], short *  {\i cod}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmo de ordena\'E7\'E3o insertion sort pega num valor de digitos do array e compara com os anteriores Complexidade algoritmica: Best case: N / Average: 1/4N^2 / Worst: 1/2N^2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short de chves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3072                                                                                        \{\par
3073     {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
3074         {\cf19 for} ({\cf18 int} j = i; j > 0; j--) \{\par
3075             {\cf19 if}(order == 1)\{\par
3076                 {\cf19 if}(a[j][0] == -1) {\cf19 break};\par
3077                 {\cf19 if}(numDigitsLong(key_digits_2_long_int(a[j])) < numDigitsLong(key_digits_2_long_int(a[j-1])))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
3078                     swapIntDigits(a, priv, cod, j, j-1);\par
3079                 \} {\cf19 else} {\cf19 break};\par
3080             \} {\cf19 else}\{\par
3081                 {\cf19 if}(a[j][0] == -1) {\cf19 break};\par
3082                 {\cf19 if}(numDigitsLong(key_digits_2_long_int(a[j])) > numDigitsLong(key_digits_2_long_int(a[j-1])))\{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
3083                     swapIntDigits(a, priv, cod, j, j-1);\par
3084                 \} {\cf19 else} {\cf19 break};\par
3085             \}\par
3086         \}\par
3087     \}\par
3088 \}\par
}
}
{\xe \v load_txt_keyHolder\:projeto.h}
{\xe \v projeto.h\:load_txt_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void load_txt_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts}, int  {\i keyHolderPos}, int  {\i newKeysPos}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3oq eu recebe um porta chaves de um ficheiro {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mString} \cell }{struct de matrizes string \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mInts} \cell }{struct de matrizes ints \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i newKeysPos} \cell }{linha do porta chaves a adicionar \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{nome do ficheiro \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1453                                                                                                                                                            \{\par
1454 \par
1455     FILE *fileChavesPubRead;\par
1456     fileChavesPubRead = fopen(filename, {\cf22 "r"});\par
1457     {\cf18 char} * valueString = NULL, *privKey = NULL, *codKey = NULL;\par
1458     {\cf18 int} i = 0, stopPos = 1, valuePos = 0, sizeMax = 1;\par
1459     {\cf18 short} *allD = NULL;\par
1460     {\cf18 unsigned} {\cf18 long} {\cf18 long} count = 1;\par
1461     {\cf18 unsigned} {\cf18 long} {\cf18 long} *value = ({\cf18 unsigned} {\cf18 long} {\cf18 long} *) calloc(count, {\cf17 sizeof} ({\cf18 unsigned} {\cf18 long} {\cf18 long}));\par
1462 \par
1463     {\cf19 if}(fileChavesPubRead == NULL)\{\par
1464         printf({\cf22 "Ficheiro nao existe\\n"});\par
1465         {\cf19 return};\par
1466     \}\par
1467 \par
1468     KEY_HOLDER * curr = *portaChaves;\par
1469     {\cf19 while} (stopPos != keyHolderPos)\{\par
1470         curr = curr->next;\par
1471         stopPos++;\par
1472     \}\par
1473 \par
1474     {\cf19 for} ({\cf18 int} j = 0; curr->khString.matrixPub[j] != NULL; ++j) \{\par
1475         sizeMax++;\par
1476     \}\par
1477 \par
1478     {\cf19 while} (fscanf (fileChavesPubRead, {\cf22 "%llu"}, &value[count-1]) == 1)\{\par
1479         count++;\par
1480         value = ({\cf18 unsigned} {\cf18 long} {\cf18 long} *) realloc(value, count * {\cf17 sizeof} ({\cf18 unsigned} {\cf18 long} {\cf18 long}));\par
1481     \}\par
1482 \par
1483     {\cf19 while} (i < count/6)\{\par
1484 \par
1485         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1486         sprintf(valueString, {\cf22 "%llu"}, value[valuePos]);\par
1487         {\cf20 //privKey = (char*) calloc(100, sizeof (char));}\par
1488         {\cf20 //codKey = (char*) calloc(100,  sizeof (char));}\par
1489         {\cf20 //sprintf(privKey, "%llu", calc_private_key_char(value[valuePos]));}\par
1490         {\cf20 //sprintf(codKey, "%llu", calc_runlength_char(calc_private_key_char(value[valuePos])));}\par
1491         {\cf20 //if(!curr->khString.matrixPub[i])\{}\par
1492             curr->khString.matrixPub[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString)),  {\cf17 sizeof} ({\cf18 char}));\par
1493             curr->khString.matrixPub[newKeysPos+i] = valueString;\par
1494         {\cf20 //\}}\par
1495 \par
1496         {\cf20 //free(valueString);}\par
1497         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1498         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+1]);\par
1499         {\cf20 //if(!curr->khString.matrixPriv[i])\{}\par
1500             curr->khString.matrixPriv[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString)),  {\cf17 sizeof} ({\cf18 char}));\par
1501             curr->khString.matrixPriv[newKeysPos+i] = valueString;\par
1502         {\cf20 //\}}\par
1503 \par
1504         {\cf20 //free(valueString);}\par
1505         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1506         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+2]);\par
1507         {\cf20 //if(!curr->khString.matrixCod[i])\{}\par
1508             curr->khString.matrixCod[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString)),  {\cf17 sizeof} ({\cf18 char}));\par
1509             curr->khString.matrixCod[newKeysPos+i] = valueString;\par
1510         {\cf20 //\}}\par
1511 \par
1512         {\cf20 //free(valueString);}\par
1513         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1514         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+3]);\par
1515         {\cf20 //if(!curr->khInts.matrixPub[i])\{}\par
1516             curr->khInts.matrixPub[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString))+1,  {\cf17 sizeof} ({\cf18 short} ));\par
1517             {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(atoll(valueString)); ++j) \{\par
1518                 curr->khInts.matrixPub[newKeysPos+i][j] = valueString[j]-{\cf23 '0'};\par
1519             \}\par
1520             curr->khInts.matrixPub[newKeysPos+i][numDigitsLong(atoll(valueString))] = -1;\par
1521         {\cf20 //\}}\par
1522 \par
1523         {\cf20 //free(valueString);}\par
1524         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1525         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+4]);\par
1526         {\cf20 //if(!curr->khInts.matrixPriv[i])\{}\par
1527             curr->khInts.matrixPriv[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString))+1,  {\cf17 sizeof} ({\cf18 short} ));\par
1528             {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(atoll(valueString)); ++j) \{\par
1529                 curr->khInts.matrixPriv[newKeysPos+i][j] = valueString[j]-{\cf23 '0'};\par
1530             \}\par
1531             curr->khInts.matrixPriv[newKeysPos+i][numDigitsLong(atoll(valueString))] = -1;\par
1532         {\cf20 //\}}\par
1533 \par
1534         {\cf20 //free(valueString);}\par
1535         valueString = ({\cf18 char}*) calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1536         sprintf(valueString, {\cf22 "%llu"}, value[valuePos+5]);\par
1537         {\cf20 //if(!curr->khInts.matrixCod[i])\{}\par
1538             curr->khInts.matrixCod[newKeysPos+i] = calloc(numDigitsLong(atoll(valueString))+1,  {\cf17 sizeof} ({\cf18 short} ));\par
1539             {\cf19 for} ({\cf18 int} j = 0; j < numDigitsLong(atoll(valueString)); ++j) \{\par
1540                 curr->khInts.matrixCod[newKeysPos+i][j] = valueString[j]-{\cf23 '0'};\par
1541             \}\par
1542         curr->khInts.matrixCod[newKeysPos+i][numDigitsLong(atoll(valueString))] = -1;\par
1543         {\cf20 //\}}\par
1544 \par
1545         free(valueString);\par
1546         valuePos += 6;\par
1547         i++;\par
1548     \}\par
1549     curr->khString.matrixPub[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1550     curr->khString.matrixPriv[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1551     curr->khString.matrixCod[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 char}));\par
1552     curr->khInts.matrixPub[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 short} ));\par
1553     curr->khInts.matrixPriv[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 short} ));\par
1554     curr->khInts.matrixCod[newKeysPos+i+1] = calloc(100, {\cf17 sizeof} ({\cf18 short} ));\par
1555     curr->khString.matrixPub[newKeysPos+i+1] = NULL;\par
1556     curr->khString.matrixPriv[newKeysPos+i+1] = NULL;\par
1557     curr->khString.matrixCod[newKeysPos+i+1] = NULL;\par
1558     curr->khInts.matrixPub[newKeysPos+i+1] = NULL;\par
1559     curr->khInts.matrixPriv[newKeysPos+i+1] = NULL;\par
1560     curr->khInts.matrixCod[newKeysPos+i+1] = NULL;\par
1561 \par
1562     free(value);\par
1563     fclose(fileChavesPubRead);\par
1564 \} {\cf20 //TODO Load porta Chaves de ficheiros}\par
}
}
{\xe \v merge_char\:projeto.h}
{\xe \v projeto.h\:merge_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_char (char *  {\i a}[], char *  {\i aux}[], int  {\i lo}, int  {\i mid}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
faz o merge dos 2 arrays de forma a ficarem ordenados Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mid} \cell }{posi\'E7\'E3o do meio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordem (1 - ascendente e 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2516                                                                            \{\par
2517     {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2518         {\cf19 if}(strcmp(a[k], {\cf22 "-1"}) == 0)\{\par
2519             hi--;\par
2520             {\cf19 continue};\par
2521         \}\par
2522         aux[k] = malloc(strlen(a[k]) * {\cf17 sizeof} ({\cf18 char}));\par
2523         strcpy(aux[k], a[k]);\par
2524     \}\par
2525     {\cf18 int} i = lo, j = mid+1;\par
2526     {\cf19 if}(order == 1)\{\par
2527         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2528             {\cf19 if}      (i > mid)                           strcpy(a[k], aux[j++]);\par
2529             {\cf19 else} {\cf19 if} (j > hi)                            strcpy(a[k], aux[i++]);\par
2530             {\cf19 else} {\cf19 if} (atoll(aux[j]) < atoll(aux[i]))     strcpy(a[k], aux[j++]);\par
2531             {\cf19 else}                                        strcpy(a[k], aux[i++]);\par
2532         \}\par
2533     \} {\cf19 else}\{\par
2534         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2535             {\cf19 if}      (i > mid)                           strcpy(a[k], aux[j++]);\par
2536             {\cf19 else} {\cf19 if} (j > hi)                            strcpy(a[k], aux[i++]);\par
2537             {\cf19 else} {\cf19 if} (atoll(aux[j]) > atoll(aux[i]))     strcpy(a[k], aux[j++]);\par
2538             {\cf19 else}                                        strcpy(a[k], aux[i++]);\par
2539         \}\par
2540     \}\par
2541 \}\par
}
}
{\xe \v merge_char_sort_base\:projeto.h}
{\xe \v projeto.h\:merge_char_sort_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_char_sort_base (char *  {\i a}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria o array auxiliar para utilizar no algoritmo de merge sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2501                                                       \{\par
2502     {\cf18 char} **aux = malloc(N * {\cf17 sizeof} ({\cf18 char}*));\par
2503     merge_char_sort_recursive_cutoff(a, aux, 0, N-1, order);\par
2504 \}\par
}
}
{\xe \v merge_char_sort_recursive_basic\:projeto.h}
{\xe \v projeto.h\:merge_char_sort_recursive_basic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_char_sort_recursive_basic (char *  {\i a}[], char *  {\i aux}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordem (1 - ascendente e 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2552                                                                                        \{\par
2553 \par
2554     {\cf19 if}(hi <= lo) {\cf19 return};\par
2555     {\cf18 int} mid = lo + (hi-lo)/2;\par
2556     merge_char_sort_recursive_basic(a, aux, lo, mid, order);\par
2557     merge_char_sort_recursive_basic(a, aux, mid+1, hi, order);\par
2558     merge_char(a, aux, lo, mid, hi, order);\par
2559 \}\par
}
}
{\xe \v merge_char_sort_recursive_cutoff\:projeto.h}
{\xe \v projeto.h\:merge_char_sort_recursive_cutoff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_char_sort_recursive_cutoff (char *  {\i a}[], char *  {\i aux}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array e caso o tamanho do array seja menor que 10 usa o insertion sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordem (1 - ascendente e 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2570                                                                                         \{\par
2571 \par
2572     {\cf19 if} (hi <= lo + CUTOFF - 1)\par
2573     \{\par
2574         insertionSort_char(&a[lo], hi-lo+1, order);\par
2575         {\cf19 return};\par
2576     \}\par
2577     {\cf18 int} mid = lo + (hi-lo)/2;\par
2578     merge_char_sort_recursive_basic(a, aux, lo, mid, order);\par
2579     merge_char_sort_recursive_basic(a, aux, mid+1, hi, order);\par
2580     merge_char(a, aux, lo, mid, hi, order);\par
2581 \}\par
}
}
{\xe \v merge_int\:projeto.h}
{\xe \v projeto.h\:merge_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_int (short *  {\i a}[], short *  {\i aux}[], int  {\i lo}, int  {\i mid}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
faz o merge dos 2 arrays de forma a ficarem ordenados Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mid} \cell }{posi\'E7\'E3o do meio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2814                                                                             \{\par
2815     {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2816         {\cf19 if}(a[k][0] == -1)\{\par
2817             hi--;\par
2818             {\cf19 continue};\par
2819         \}\par
2820         aux[k] = malloc(numDigitsLong(key_digits_2_long_int(a[k]) * {\cf17 sizeof} ({\cf18 short})));\par
2821         aux[k] = a[k];\par
2822     \}\par
2823     {\cf18 int} i = lo, j = mid+1;\par
2824     {\cf19 if}(order == 1)\{\par
2825         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2826             {\cf19 if}      (i > mid)                           a[k] = aux[j++];\par
2827             {\cf19 else} {\cf19 if} (j > hi)                            a[k] = aux[i++];\par
2828             {\cf19 else} {\cf19 if} (key_digits_2_long_int(aux[j]) < key_digits_2_long_int(aux[i]))                   a[k] = aux[j++];\par
2829             {\cf19 else}                                        a[k] = aux[i++];\par
2830         \}\par
2831     \} {\cf19 else}\{\par
2832         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2833             {\cf19 if}      (i > mid)                           a[k] = aux[j++];\par
2834             {\cf19 else} {\cf19 if} (j > hi)                            a[k] = aux[i++];\par
2835             {\cf19 else} {\cf19 if} (key_digits_2_long_int(aux[j]) > key_digits_2_long_int(aux[i]))     a[k] = aux[j++];\par
2836             {\cf19 else}                                        a[k] = aux[i++];\par
2837         \}\par
2838     \}\par
2839 \}\par
}
}
{\xe \v merge_int_sort_base\:projeto.h}
{\xe \v projeto.h\:merge_int_sort_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_int_sort_base (short *  {\i a}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria o array auxiliar para utilizar no algoritmo de merge sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2799                                                       \{\par
2800     {\cf18 short} **aux = malloc(N * {\cf17 sizeof} ({\cf18 short}*));\par
2801     merge_int_sort_recursive_cutoff(a, aux, 0, N-1, order);\par
2802 \}\par
}
}
{\xe \v merge_int_sort_recursive_basic\:projeto.h}
{\xe \v projeto.h\:merge_int_sort_recursive_basic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_int_sort_recursive_basic (short *  {\i a}[], short *  {\i aux}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2850                                                                                         \{\par
2851 \par
2852     {\cf19 if}(hi <= lo) {\cf19 return};\par
2853     {\cf18 int} mid = lo + (hi-lo)/2;\par
2854     merge_int_sort_recursive_basic(a, aux, lo, mid, order);\par
2855     merge_int_sort_recursive_basic(a, aux, mid+1, hi, order);\par
2856     merge_int(a, aux, lo, mid, hi, order);\par
2857 \}\par
}
}
{\xe \v merge_int_sort_recursive_cutoff\:projeto.h}
{\xe \v projeto.h\:merge_int_sort_recursive_cutoff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void merge_int_sort_recursive_cutoff (short *  {\i a}[], short *  {\i aux}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array e caso o tamanho do array seja menor que 10 usa o insertion sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2868                                                                                          \{\par
2869 \par
2870     {\cf19 if} (hi <= lo + CUTOFF - 1)\par
2871     \{\par
2872         insertionSort_int(&a[lo], hi-lo+1, order);\par
2873         {\cf19 return};\par
2874     \}\par
2875     {\cf18 int} mid = lo + (hi-lo)/2;\par
2876     merge_int_sort_recursive_basic(a, aux, lo, mid, order);\par
2877     merge_int_sort_recursive_basic(a, aux, mid+1, hi, order);\par
2878     merge_int(a, aux, lo, mid, hi, order);\par
2879 \}\par
}
}
{\xe \v mergeDigits_char\:projeto.h}
{\xe \v projeto.h\:mergeDigits_char}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_char (char *  {\i a}[], char *  {\i aux}[], char *  {\i priv}[], char *  {\i cod}[], char *  {\i auxPriv}[], char *  {\i auxCod}[], int  {\i lo}, int  {\i mid}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
faz o merge dos 2 arrays de forma a ficarem ordenados (por digitos) Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strings com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de strings co chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mid} \cell }{posi\'E7\'E3o do meio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2638                                                                                                                                              \{\par
2639     {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2640         {\cf19 if}(strcmp(a[k], {\cf22 "-1"}) == 0)\{\par
2641             hi--;\par
2642             {\cf19 continue};\par
2643         \}\par
2644         aux[k] = malloc((strlen(a[k])+1) * {\cf17 sizeof} ({\cf18 char}));\par
2645         auxPriv[k] = malloc((strlen(priv[k])+1) * {\cf17 sizeof} ({\cf18 char}));\par
2646         auxCod[k] = malloc((strlen(cod[k])+1) * {\cf17 sizeof} ({\cf18 char}));\par
2647         strcpy(aux[k], a[k]);\par
2648         strcpy(auxPriv[k], priv[k]);\par
2649         strcpy(auxCod[k], cod[k]);\par
2650     \}\par
2651     {\cf18 int} i = lo, j = mid+1;\par
2652     {\cf19 if}(order == 1)\{\par
2653         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2654             {\cf19 if} (i > mid)\{\par
2655                 strcpy(a[k], aux[j++]);\par
2656                 j--;\par
2657                 strcpy(priv[k], auxPriv[j++]);\par
2658                 j--;\par
2659                 strcpy(cod[k], auxCod[j++]);\par
2660             \}\par
2661             {\cf19 else} {\cf19 if} (j > hi)\{\par
2662                 strcpy(a[k], aux[i++]);\par
2663                 i--;\par
2664                 strcpy(priv[k], auxPriv[i++]);\par
2665                 i--;\par
2666                 strcpy(cod[k], auxCod[i++]);\par
2667             \}\par
2668             {\cf19 else} {\cf19 if} (numDigitsLong(atoll(aux[j])) < numDigitsLong(atoll(aux[i])))\{\par
2669                 strcpy(a[k], aux[j++]);\par
2670                 j--;\par
2671                 strcpy(priv[k], auxPriv[j++]);\par
2672                 j--;\par
2673                 strcpy(cod[k], auxCod[j++]);\par
2674             \}\par
2675             {\cf19 else}\{\par
2676                 strcpy(a[k], aux[i++]);\par
2677                 i--;\par
2678                 strcpy(priv[k], auxPriv[i++]);\par
2679                 i--;\par
2680                 strcpy(cod[k], auxCod[i++]);\par
2681             \}\par
2682         \}\par
2683     \} {\cf19 else}\{\par
2684         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2685             {\cf19 if} (i > mid)\{\par
2686                 strcpy(a[k], aux[j++]);\par
2687                 j--;\par
2688                 strcpy(priv[k], auxPriv[j++]);\par
2689                 j--;\par
2690                 strcpy(cod[k], auxCod[j++]);\par
2691             \}\par
2692             {\cf19 else} {\cf19 if} (j > hi) \{\par
2693                 strcpy(a[k], aux[i++]);\par
2694                 i--;\par
2695                 strcpy(priv[k], auxPriv[i++]);\par
2696                 i--;\par
2697                 strcpy(cod[k], auxCod[i++]);\par
2698             \}\par
2699             {\cf19 else} {\cf19 if} (numDigitsLong(atoll(aux[j])) > numDigitsLong(atoll(aux[i])))\{\par
2700                 strcpy(a[k], aux[j++]);\par
2701                 j--;\par
2702                 strcpy(priv[k], auxPriv[j++]);\par
2703                 j--;\par
2704                 strcpy(cod[k], auxCod[j++]);\par
2705             \}\par
2706             {\cf19 else} \{\par
2707                 strcpy(a[k], aux[i++]);\par
2708                 i--;\par
2709                 strcpy(priv[k], auxPriv[i++]);\par
2710                 i--;\par
2711                 strcpy(cod[k], auxCod[i++]);\par
2712             \}\par
2713         \}\par
2714     \}\par
2715 \}\par
}
}
{\xe \v mergeDigits_char_sort_base\:projeto.h}
{\xe \v projeto.h\:mergeDigits_char_sort_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_char_sort_base (char *  {\i a}[], char *  {\i priv}[], char *  {\i cod}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria os arrais auxiliares para utilizar no algoritmo de merge sort (ordem por digitos) Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strings com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de strings com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2617                                                                                        \{\par
2618     {\cf18 char} **aux = malloc(N * {\cf17 sizeof} ({\cf18 char}*));\par
2619     {\cf18 char} **auxPriv = malloc(N * {\cf17 sizeof} ({\cf18 char}*));\par
2620     {\cf18 char} **auxCod = malloc(N * {\cf17 sizeof} ({\cf18 char}*));\par
2621     mergeDigits_char_sort_recursive_cutoff(a, aux, priv, cod, auxPriv, auxCod, 0, N-1, order);\par
2622 \}\par
}
}
{\xe \v mergeDigits_char_sort_recursive_basic\:projeto.h}
{\xe \v projeto.h\:mergeDigits_char_sort_recursive_basic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_char_sort_recursive_basic (char *  {\i a}[], char *  {\i aux}[], char *  {\i priv}[], char *  {\i cod}[], char *  {\i auxPriv}[], char *  {\i auxCod}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de string de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2730                                                                                                                                                          \{\par
2731 \par
2732     {\cf19 if}(hi <= lo) {\cf19 return};\par
2733     {\cf18 int} mid = lo + (hi-lo)/2;\par
2734     mergeDigits_char_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, lo, mid, order);\par
2735     mergeDigits_char_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, mid+1, hi, order);\par
2736     mergeDigits_char(a, aux, priv, cod, auxPriv, auxCod, lo, mid, hi, order);\par
2737 \}\par
}
}
{\xe \v mergeDigits_char_sort_recursive_cutoff\:projeto.h}
{\xe \v projeto.h\:mergeDigits_char_sort_recursive_cutoff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_char_sort_recursive_cutoff (char *  {\i a}[], char *  {\i aux}[], char *  {\i priv}[], char *  {\i cod}[], char *  {\i auxPriv}[], char *  {\i auxCod}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array e caso o tamanho do array seja menor que 10 usa o insertion sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de string de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de string de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de string de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2752                                                                                                                                                           \{\par
2753 \par
2754     {\cf19 if} (hi <= lo + CUTOFF - 1)\par
2755     \{\par
2756         insertionSortDigits_char(&a[lo], priv, cod, hi-lo+1, order);\par
2757         {\cf19 return};\par
2758     \}\par
2759     {\cf18 int} mid = lo + (hi-lo)/2;\par
2760     mergeDigits_char_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, lo, mid, order);\par
2761     mergeDigits_char_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, mid+1, hi, order);\par
2762     mergeDigits_char(a, aux, priv, cod, auxPriv, auxCod, lo, mid, hi, order);\par
2763 \}\par
}
}
{\xe \v mergeDigits_int\:projeto.h}
{\xe \v projeto.h\:mergeDigits_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_int (short *  {\i a}[], short *  {\i aux}[], short *  {\i priv}[], short *  {\i cod}[], short *  {\i auxPriv}[], short *  {\i auxCod}[], int  {\i lo}, int  {\i mid}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Faz o merge dos 2 arrays de forma a ficarem ordenados (por digitos) Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mid} \cell }{posi\'E7\'E3o do meio \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2936                                                                                                                                                   \{\par
2937     {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2938         {\cf19 if}(a[k][0] == -1)\{\par
2939             hi--;\par
2940             {\cf19 continue};\par
2941         \}\par
2942         aux[k] = malloc(numDigitsLong(key_digits_2_long_int(a[k]) * {\cf17 sizeof} ({\cf18 short})));\par
2943         auxPriv[k] = malloc(numDigitsLong(key_digits_2_long_int(priv[k]) * {\cf17 sizeof} ({\cf18 short})));\par
2944         auxCod[k] = malloc(numDigitsLong(key_digits_2_long_int(cod[k]) * {\cf17 sizeof} ({\cf18 short})));\par
2945         aux[k] = a[k];\par
2946         auxPriv[k] = priv[k];\par
2947         auxCod[k] = cod[k];\par
2948     \}\par
2949     {\cf18 int} i = lo, j = mid+1;\par
2950     {\cf19 if}(order == 1)\{\par
2951         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2952             {\cf19 if} (i > mid)\{\par
2953                 a[k] = aux[j++];\par
2954                 j--;\par
2955                 priv[k] = auxPriv[j++];\par
2956                 j--;\par
2957                 cod[k] = auxCod[j++];\par
2958             \}\par
2959             {\cf19 else} {\cf19 if} (j > hi)\{\par
2960                 a[k] = aux[i++];\par
2961                 i--;\par
2962                 priv[k] = auxPriv[i++];\par
2963                 i--;\par
2964                 cod[k] = auxCod[i++];\par
2965             \}\par
2966             {\cf19 else} {\cf19 if} (numDigitsLong(key_digits_2_long_int(aux[j])) < numDigitsLong(key_digits_2_long_int(aux[i])))\{\par
2967                 a[k] = aux[j++];\par
2968                 j--;\par
2969                 priv[k] = auxPriv[j++];\par
2970                 j--;\par
2971                 cod[k] = auxCod[j++];\par
2972             \}\par
2973             {\cf19 else}\{\par
2974                 a[k] = aux[i++];\par
2975                 i--;\par
2976                 priv[k] = auxPriv[i++];\par
2977                 i--;\par
2978                 cod[k] = auxCod[i++];\par
2979             \}\par
2980         \}\par
2981     \} {\cf19 else}\{\par
2982         {\cf19 for} ({\cf18 int} k = lo; k <= hi; ++k) \{\par
2983             {\cf19 if} (i > mid)\{\par
2984                 a[k] = aux[j++];\par
2985                 j--;\par
2986                 priv[k] = auxPriv[j++];\par
2987                 j--;\par
2988                 cod[k] = auxCod[j++];\par
2989             \}\par
2990             {\cf19 else} {\cf19 if} (j > hi) \{\par
2991                 a[k] = aux[i++];\par
2992                 i--;\par
2993                 priv[k] = auxPriv[i++];\par
2994                 i--;\par
2995                 cod[k] = auxCod[i++];\par
2996             \}\par
2997             {\cf19 else} {\cf19 if} (numDigitsLong(key_digits_2_long_int(aux[j])) > numDigitsLong(key_digits_2_long_int(aux[i])))\{\par
2998                 a[k] = aux[j++];\par
2999                 j--;\par
3000                 priv[k] = auxPriv[j++];\par
3001                 j--;\par
3002                 cod[k] = auxCod[j++];\par
3003             \}\par
3004             {\cf19 else} \{\par
3005                 a[k] = aux[i++];\par
3006                 i--;\par
3007                 priv[k] = auxPriv[i++];\par
3008                 i--;\par
3009                 cod[k] = auxCod[i++];\par
3010             \}\par
3011         \}\par
3012     \}\par
3013 \}\par
}
}
{\xe \v mergeDigits_int_sort_base\:projeto.h}
{\xe \v projeto.h\:mergeDigits_int_sort_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_int_sort_base (short *  {\i a}[], short *  {\i priv}[], short *  {\i cod}[], int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Cria os arrais auxiliares para utilizar no algoritmo de merge sort (ordem por digitos) Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2915                                                                                          \{\par
2916     {\cf18 short} **aux = malloc(N * {\cf17 sizeof} ({\cf18 short}*));\par
2917     {\cf18 short} **auxPriv = malloc(N * {\cf17 sizeof} ({\cf18 short}*));\par
2918     {\cf18 short} **auxCod = malloc(N * {\cf17 sizeof} ({\cf18 short}*));\par
2919     mergeDigits_int_sort_recursive_cutoff(a, aux, priv, cod, auxPriv, auxCod, 0, N-1, order);\par
2920 \}\par
}
}
{\xe \v mergeDigits_int_sort_recursive_basic\:projeto.h}
{\xe \v projeto.h\:mergeDigits_int_sort_recursive_basic}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_int_sort_recursive_basic (short *  {\i a}[], short *  {\i aux}[], short *  {\i priv}[], short *  {\i cod}[], short *  {\i auxPriv}[], short *  {\i auxCod}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matrix auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3028                                                                                                                                                               \{\par
3029 \par
3030     {\cf19 if}(hi <= lo) {\cf19 return};\par
3031     {\cf18 int} mid = lo + (hi-lo)/2;\par
3032     mergeDigits_int_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, lo, mid, order);\par
3033     mergeDigits_int_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, mid+1, hi, order);\par
3034     mergeDigits_int(a, aux, priv, cod, auxPriv, auxCod, lo, mid, hi, order);\par
3035 \}\par
}
}
{\xe \v mergeDigits_int_sort_recursive_cutoff\:projeto.h}
{\xe \v projeto.h\:mergeDigits_int_sort_recursive_cutoff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mergeDigits_int_sort_recursive_cutoff (short *  {\i a}[], short *  {\i aux}[], short *  {\i priv}[], short *  {\i cod}[], short *  {\i auxPriv}[], short *  {\i auxCod}[], int  {\i lo}, int  {\i hi}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calcula a posi\'E7\'E3o do meio de ambas as metades do array e caso o tamanho do array seja menor que 10 usa o insertion sort Complexidade algoritmica: Best case: 1/2NlgN / Average: NlgN / Worst: NlgN {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i aux} \cell }{matriz auxiliar de chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxPriv} \cell }{matriz auxiliar de chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i auxCod} \cell }{matriz auxiliar de chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lo} \cell }{menor posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hi} \cell }{maior posi\'E7\'E3o \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 3050                                                                                                                                                                \{\par
3051 \par
3052     {\cf19 if} (hi <= lo + CUTOFF - 1)\par
3053     \{\par
3054         insertionSortDigits_int(&a[lo], priv, cod, hi-lo+1, order);\par
3055         {\cf19 return};\par
3056     \}\par
3057     {\cf18 int} mid = lo + (hi-lo)/2;\par
3058     mergeDigits_int_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, lo, mid, order);\par
3059     mergeDigits_int_sort_recursive_basic(a, aux, priv, cod, auxPriv, auxCod, mid+1, hi, order);\par
3060     mergeDigits_int(a, aux, priv, cod, auxPriv, auxCod, lo, mid, hi, order);\par
3061 \}\par
}
}
{\xe \v numDigits\:projeto.h}
{\xe \v projeto.h\:numDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int numDigits (int  {\i num})}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai calcular o n\'FAmero de digitos de um n\'FAmero (int) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{n\'FAmero usado para calcular o seu n\'FAmero de digitos \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
n\'FAmero de digitos (int) \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2156                       \{\par
2157     {\cf18 int} digits = 0;\par
2158     {\cf19 do} \{\par
2159         num /= 10;\par
2160         digits++;\par
2161     \} {\cf19 while} (num != 0);\par
2162     {\cf19 return} digits;\par
2163 \}\par
}
}
{\xe \v numDigitsLong\:projeto.h}
{\xe \v projeto.h\:numDigitsLong}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int numDigitsLong (unsigned long long  {\i num})}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai calcular o n\'FAmero de digitos de um n\'FAmero (unsigned long long) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i num} \cell }{n\'FAmero usado para calcular o seu n\'FAmero de digitos \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
n\'FAmero de digitos (int) \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2170                                          \{\par
2171     {\cf18 int} digits = 0;\par
2172     {\cf19 do} \{\par
2173         num /= 10;\par
2174         digits++;\par
2175     \} {\cf19 while} (num != 0);\par
2176     {\cf19 return} digits;\par
2177 \}\par
}
}
{\xe \v ordenar_utilizadores\:projeto.h}
{\xe \v projeto.h\:ordenar_utilizadores}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ordenar_utilizadores ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3oq eu ordena os utilizador por nome Complexidade algoritmica Best case: O(n) / Average: O(n^2) / Worst: O(n^2) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1945                                                     \{\par
1946     UTILIZADORES* curr;\par
1947     UTILIZADORES* index;\par
1948 \par
1949     {\cf20 // se a fila estiver vazia}\par
1950     {\cf19 if} (queue == NULL) \{\par
1951         {\cf19 return};\par
1952     \}\par
1953 \par
1954     {\cf19 if} (queue->head == NULL) \{\par
1955         {\cf19 return};\par
1956     \}\par
1957 \par
1958     {\cf20 // bubble sort}\par
1959     {\cf20 // ciclo que percorre os utilizadores at\'E9 o proximo ser NULL}\par
1960     {\cf19 for} (curr = queue->head; curr->next != NULL; curr = curr->next) \{\par
1961         {\cf20 // ciclo que percorre os utilizadors at\'E9 o index ser NULL (index inicial \'E9 sempre o prox utilizador do primeiro ciclo)}\par
1962         {\cf19 for} (index = curr->next; index != NULL; index = index->next) \{\par
1963             {\cf19 if} (strcmp(curr->name, index->name) > 0) \{   {\cf20 // se o index->name for menor que o curr->name}\par
1964                 {\cf18 char}* temp_name = curr->name;            {\cf20 // guarda temporariamente o nome do curr}\par
1965                 {\cf18 char}* temp_email = curr->email;          {\cf20 // guarda temporariamente o email do curr}\par
1966                 KEY_HOLDER* temp_key_holder_list = curr->key_holder_list;    {\cf20 // guardar temporariamente a lista de porta chaves do curr}\par
1967                 {\cf20 // Troca as posi\'E7\'F5es dos utilizadores curr e index}\par
1968                 curr->name = index->name;\par
1969                 curr->email = index->email;\par
1970                 curr->key_holder_list = index->key_holder_list;\par
1971                 index->name = temp_name;\par
1972                 index->email = temp_email;\par
1973                 index->key_holder_list = temp_key_holder_list;\par
1974             \}\par
1975         \}\par
1976     \}\par
1977 \}\par
}
}
{\xe \v print_keyHolders\:projeto.h}
{\xe \v projeto.h\:print_keyHolders}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void print_keyHolders ({\b KEY_HOLDER} **  {\i portaChaves})}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que escreve os v\'E1rios porta chaves na consola {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1570                                                \{\par
1571     {\cf18 int} sair = 0, numPortaChaves = 1;\par
1572     {\cf19 for} (KEY_HOLDER *curr = *portaChaves; curr != NULL ; curr = curr->next) \{\par
1573         {\cf18 int} i = 0;\par
1574         printf({\cf22 "Porta Chaves - %d\\n"}, numPortaChaves);\par
1575         {\cf19 while} (1)\{  {\cf20 // ciclo infinito (termina quando as matrizes chegarem ao fim)}\par
1576             {\cf19 if}(strcmp(curr->khString.matrixPub[i], {\cf22 "-1"}) != 0) \{\par
1577                 printf({\cf22 "Porta Chaves PubKey String - %s\\n"}, curr->khString.matrixPub[i]);\par
1578                 sair = 0;\par
1579             \} {\cf19 else} sair = 1;\par
1580             {\cf19 if}(strcmp(curr->khString.matrixPriv[i], {\cf22 "-1"}) != 0) \{\par
1581                 printf({\cf22 "Porta Chaves PrivKey String - %s\\n"}, curr->khString.matrixPriv[i]);\par
1582                 sair = 0;\par
1583             \} {\cf19 else} sair = 1;\par
1584             {\cf19 if}(strcmp(curr->khString.matrixCod[i], {\cf22 "-1"}) != 0) \{\par
1585                 printf({\cf22 "Porta Chaves CodKey String - %s\\n"}, curr->khString.matrixCod[i]);\par
1586                 sair = 0;\par
1587             \} {\cf19 else} sair = 1;\par
1588             {\cf18 int} j = 0;\par
1589             {\cf19 if}(curr->khInts.matrixPub[i][0] != -1)\{\par
1590                 printf({\cf22 "Porta Chaves PubKey Ints - "});\par
1591                 {\cf19 while} (curr->khInts.matrixPub[i][j] != -1)\{\par
1592                     printf({\cf22 "%hi"}, curr->khInts.matrixPub[i][j]);\par
1593                     j++;\par
1594                 \}\par
1595                 sair = 0;\par
1596                 printf({\cf22 "\\n"});\par
1597             \} {\cf19 else} sair = 1;\par
1598             j = 0;\par
1599             {\cf19 if}(curr->khInts.matrixPriv[i][0] != -1)\{\par
1600                 printf({\cf22 "Porta Chaves PrivKey Ints - "});\par
1601                 {\cf19 while} (curr->khInts.matrixPriv[i][j] != -1)\{\par
1602                     printf({\cf22 "%hi"}, curr->khInts.matrixPriv[i][j]);\par
1603                     j++;\par
1604                 \}\par
1605                 sair = 0;\par
1606                 printf({\cf22 "\\n"});\par
1607             \} {\cf19 else} sair = 1;\par
1608             j = 0;\par
1609             {\cf19 if}(curr->khInts.matrixCod[i][0] != -1)\{\par
1610                 printf({\cf22 "Porta Chaves CodKey Ints - "});\par
1611                 {\cf19 while} (curr->khInts.matrixCod[i][j] != -1)\{\par
1612                     printf({\cf22 "%hi"}, curr->khInts.matrixCod[i][j]);\par
1613                     j++;\par
1614                 \}\par
1615                 sair = 0;\par
1616                 printf({\cf22 "\\n"});\par
1617             \} {\cf19 else} sair = 1;\par
1618             {\cf19 if}(sair == 1) {\cf19 break};\par
1619             i++;\par
1620         \}\par
1621         printf({\cf22 "Data Criacao: %s"}, curr->data_criacao);\par
1622         printf({\cf22 "Data Modificacao: %s"}, curr->data_modificacao);\par
1623         printf({\cf22 "\\n"});\par
1624         numPortaChaves++;\par
1625     \}\par
1626 \}\par
}
}
{\xe \v print_utilizadores\:projeto.h}
{\xe \v projeto.h\:print_utilizadores}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void print_utilizadores ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que escreve na consola todos os utilizadores {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1819                                                    \{\par
1820     UTILIZADORES* curr = queue->head;\par
1821     {\cf19 while} (curr != NULL) \{\par
1822         printf({\cf22 "Name: %s\\n"}, curr->name);\par
1823         printf({\cf22 "Email: %s\\n"}, curr->email);\par
1824         print_keyHolders(&curr->key_holder_list);   {\cf20 // chama a fun\'E7\'E3o para escrever todos os porta chaves (deste utilizador)}\par
1825         curr = curr->next;\par
1826     \}\par
1827 \}\par
}
}
{\xe \v randomKey\:projeto.h}
{\xe \v projeto.h\:randomKey}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void randomKey (FILE *  {\i fileChavesPubWrite}, char *  {\i fileName}, int  {\i n})}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v randomKeyMatrix\:projeto.h}
{\xe \v projeto.h\:randomKeyMatrix}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char ** randomKeyMatrix (char **  {\i r}, int  {\i n})}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que vai gerar um n\'FAmero aleat\'F3rio e retornar o mesmo em char** {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{matrix de strings (char*) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i n} \cell }{n\'FAmero de n\'FAmeros aleat\'F3rios a serem gerados \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
da matrix de strings (char*) \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2232                                        \{\par
2233     {\cf18 int} random = 0, digits = 0;\par
2234 \par
2235     r = ({\cf18 char} **) malloc(n*{\cf17 sizeof} ({\cf18 char} *));\par
2236     {\cf19 for} ({\cf18 int} i = 0; i < n; ++i) \{\par
2237         random = rand();\par
2238         digits = numDigits(random);\par
2239         r[i] = ({\cf18 char} *) malloc(digits * {\cf17 sizeof} ({\cf18 char}));\par
2240         sprintf(r[i], {\cf22 "%d"}, random);\par
2241     \}\par
2242     {\cf19 return} r;\par
2243 \}\par
}
}
{\xe \v randomKeyValue\:projeto.h}
{\xe \v projeto.h\:randomKeyValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * randomKeyValue (char *  {\i r})}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que retorna um n\'FAmero aleat\'F3rio (char*) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i r} \cell }{apontador de char (char*) usado para armazenar o n\'FAmero em carateres \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
do n\'FAmero em carateres \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2250                              \{\par
2251     {\cf18 int} random = 0, digits = 0;\par
2252 \par
2253     r = ({\cf18 char} *) malloc({\cf17 sizeof} ({\cf18 char}));\par
2254     {\cf19 for} ({\cf18 int} i = 0; i < 1; ++i) \{\par
2255         random = rand()%250;\par
2256         digits = numDigits(random);\par
2257         sprintf(r, {\cf22 "%d"}, random);\par
2258     \}\par
2259     {\cf18 char} *returnval = r;\par
2260     r=NULL;\par
2261     free(r);\par
2262     {\cf19 return} returnval;\par
2263 \}\par
}
}
{\xe \v remove_keyHolder\:projeto.h}
{\xe \v projeto.h\:remove_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void remove_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, int  {\i keyHolderPos})}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o remove um porta chaves numa dada posi\'E7\'E3o {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1259                                                                  \{\par
1260     {\cf18 int} removePos = 1;\par
1261 \par
1262     {\cf19 if}(*portaChaves == NULL) {\cf19 return};\par
1263 \par
1264     {\cf20 // se for o primeiro porta chaves, o segundo porta chaves vai agora passar a ser o primeiro}\par
1265     {\cf19 if}(keyHolderPos == 1)\{\par
1266         *portaChaves = (*portaChaves)->next;    {\cf20 // igualar o primeiro porta chaves ao seu proximo(segundo porta chaves)}\par
1267     \}\par
1268 \par
1269     {\cf20 // percorrer os porta chaves at\'E9 ao na posi\'E7\'E3o dada}\par
1270     KEY_HOLDER *curr = *portaChaves;\par
1271     {\cf19 while} (curr->next != NULL)\{\par
1272         {\cf19 if}(removePos+1 == keyHolderPos)\{       {\cf20 // quando o proximo porta chaves for o escolhido}\par
1273             curr->next = curr->next->next;     {\cf20 // este porta chaves(1 antes do que vai ser removido) vai apontador para o proximo porta chaves do porta chaves que vai ser removido}\par
1274             {\cf19 if}(curr->next == NULL) {\cf19 break};      {\cf20 // se o porta chaves n\'E3o existir saimos do ciclo}\par
1275         \}\par
1276         removePos++;\par
1277         curr = curr->next;\par
1278     \}\par
1279 \}\par
}
}
{\xe \v remover_cabeca_utilizador\:projeto.h}
{\xe \v projeto.h\:remover_cabeca_utilizador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void remover_cabeca_utilizador ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que remove um utilizador \'E0 cabe\'E7a {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1872                                                           \{\par
1873     printf({\cf22 "Utilizador Apagado: %s\\n"}, queue->head->name);\par
1874     queue->head = queue->head->next;    {\cf20 // a head passa a ser o prox utilizador}\par
1875 \par
1876     queue->size--;\par
1877 \}\par
}
}
{\xe \v remover_cauda_utilizador\:projeto.h}
{\xe \v projeto.h\:remover_cauda_utilizador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void remover_cauda_utilizador ({\b UTILIZADORES_QUEUE} *  {\i queue})}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que remove um utilizador \'E0 cauda {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1883                                                          \{\par
1884     UTILIZADORES *curr = queue->head;\par
1885     UTILIZADORES* previous = NULL;\par
1886 \par
1887     {\cf20 // percorre a fila de utilizadores}\par
1888     {\cf19 while} (curr->next != NULL)\{\par
1889         previous = curr;\par
1890         curr = curr->next;\par
1891     \}\par
1892 \par
1893     printf({\cf22 "Utilizador Apagado: %s\\n"}, curr->name);\par
1894     {\cf20 // se o utilizador a ser apagado n\'E3o tinha anterior ent\'E3o era o primeiro}\par
1895     {\cf19 if} (previous == NULL) \{\par
1896         queue->head = NULL;\par
1897         queue->tail = NULL;\par
1898     \} {\cf19 else} \{    {\cf20 // se n\'E3o era o primeiro}\par
1899         previous->next = NULL;  {\cf20 // o utilizador anterior vai apontar para NULL}\par
1900         queue->tail = previous; {\cf20 // a tail vai passar a ser o utilizador anterior}\par
1901     \}\par
1902 \par
1903     queue->size--;\par
1904 \}\par
}
}
{\xe \v remover_nome_utilizador\:projeto.h}
{\xe \v projeto.h\:remover_nome_utilizador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void remover_nome_utilizador ({\b UTILIZADORES_QUEUE} *  {\i queue}, char *  {\i name})}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que remove um utilizasdor por nome {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome do utilizador \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1834                                                                     \{\par
1835     UTILIZADORES* curr = queue->head;\par
1836     UTILIZADORES* previous = NULL;\par
1837 \par
1838     {\cf20 // percorre a fila de utilizadores at\'E9 encontrar um utilizador com o nome a ser procurado}\par
1839     {\cf19 while} (curr != NULL && strcmp(curr->name, name) != 0) \{\par
1840         previous = curr;        {\cf20 // o utilizador o valor de prev com o utilizador anterior}\par
1841         curr = curr->next;      {\cf20 // percorre a fila de utilizadores}\par
1842     \}\par
1843 \par
1844     {\cf20 // se n\'E3o encontrar nenhum utilizador com o nome a ser procurado}\par
1845     {\cf19 if} (curr == NULL) \{\par
1846         printf({\cf22 "Utilizador Nao Encontrado\\n"});\par
1847         {\cf19 return};\par
1848     \}\par
1849 \par
1850     {\cf20 // se existe um utilizador com o nome a ser procurado remove}\par
1851     printf({\cf22 "Utilizador Apagado: %s\\n"}, curr->name);\par
1852     {\cf20 // se o prev for NULL quer dizer que \'E9 o primeiro utilizador}\par
1853     {\cf19 if} (previous == NULL) \{\par
1854         queue->head = curr->next;    {\cf20 // atualiza a head para o proximo utilizador}\par
1855     \} {\cf19 else} \{    {\cf20 // se n\'E3o for o primeiro}\par
1856         previous->next = curr->next;   {\cf20 // o anterior vai apontar para o proximo do utilizador a ser removido}\par
1857     \}\par
1858 \par
1859     {\cf20 // se o utilizador removido fosee o ultimo da fila a tail vai passar a ser o utilizador anterior ao que foi apagado}\par
1860     {\cf19 if} (curr->next == NULL) \{\par
1861         queue->tail = previous;\par
1862     \}\par
1863 \par
1864     queue->size--;\par
1865     free(curr);\par
1866 \}\par
}
}
{\xe \v save_txt_keyHolder\:projeto.h}
{\xe \v projeto.h\:save_txt_keyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void save_txt_keyHolder ({\b KEY_HOLDER} **  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts}, int  {\i keyHolderPos}, char  {\i filename}[])}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que guarda um porta chaves num ficheiro {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mString} \cell }{struct de matrizes de string \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mInts} \cell }{struct de matrizes de ints \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{nome do ficheiro \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1397                                                                                                                                            \{\par
1398 \par
1399     FILE *fileChavesPubWrite;\par
1400     fileChavesPubWrite = fopen(filename, {\cf22 "a+"});\par
1401     {\cf18 int} stopPos = 1;\par
1402 \par
1403     {\cf19 if}(fileChavesPubWrite == NULL)\{\par
1404         printf({\cf22 "Ficheiro nao existe\\n"});\par
1405         {\cf19 return};\par
1406     \}\par
1407 \par
1408     KEY_HOLDER * curr = *portaChaves;\par
1409     {\cf19 while} (stopPos != keyHolderPos)\{\par
1410         curr = curr->next;\par
1411         {\cf19 if}(curr == NULL)\{\par
1412             printf({\cf22 "Porta Chaves Nao Encontrado\\n"});\par
1413             {\cf19 return};\par
1414         \}\par
1415         stopPos++;\par
1416     \}\par
1417 \par
1418     {\cf18 int} i = 0;\par
1419     {\cf19 while} (i < curr->sizeStrings)\{\par
1420         fprintf(fileChavesPubWrite,{\cf22 "%s"} , curr->khString.matrixPub[i]);\par
1421         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1422         fprintf(fileChavesPubWrite,{\cf22 "%s"} , curr->khString.matrixPriv[i]);\par
1423         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1424         fprintf(fileChavesPubWrite,{\cf22 "%s"} , curr->khString.matrixCod[i]);\par
1425         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1426 \par
1427         i++;\par
1428     \}\par
1429     i = 0;\par
1430     {\cf19 while} (i < curr->sieInts)\{\par
1431         fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(curr->khInts.matrixPub[i]));\par
1432         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1433         fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(curr->khInts.matrixPriv[i]));\par
1434         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1435         fprintf(fileChavesPubWrite,{\cf22 "%llu"} , key_digits_2_long_int(curr->khInts.matrixCod[i]));\par
1436         fprintf(fileChavesPubWrite,{\cf22 "\\n"});\par
1437 \par
1438         i++;\par
1439     \}\par
1440 \par
1441     fclose(fileChavesPubWrite);\par
1442 \}\par
}
}
{\xe \v search_utilizador_by_name\:projeto.h}
{\xe \v projeto.h\:search_utilizador_by_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void search_utilizador_by_name ({\b UTILIZADORES_QUEUE} *  {\i queue}, char *  {\i name})}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Procura um utilizador por um dado nome Complexidade algoritmica Best case: O(1) / Average: O(n) / Worst: O(n) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i queue} \cell }{fila de utilizadores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{nome a ser procurado \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1912                                                                       \{\par
1913     {\cf18 int} exist = 0;\par
1914     {\cf18 char} nomeMinisculas[strlen(name)];  {\cf20 // array que vai ter o nome a ser procurado em minusculas}\par
1915     UTILIZADORES* curr = queue->head;\par
1916 \par
1917     {\cf19 for} ({\cf18 int} i = 0; i < strlen(name); ++i) \{    {\cf20 // mudar todos os carateres do nome a procurar para minusculas}\par
1918         nomeMinisculas[i] = tolower(name[i]);\par
1919     \}\par
1920     nomeMinisculas[strlen(name)] = {\cf23 '\\0'};    {\cf20 // inserir o \\0 no fim da string}\par
1921     {\cf19 while} (curr != NULL) \{\par
1922         {\cf18 char} nomeUtilMinusculas[strlen(curr->name)];    {\cf20 // array que vai ter o nome do utilizador em minusculas}\par
1923         {\cf19 for} ({\cf18 int} i = 0; i < strlen(curr->name); ++i) \{  {\cf20 // mudar todos os carateres do nome do utilizador para minusculas}\par
1924             nomeUtilMinusculas[i] = tolower(curr->name[i]);\par
1925         \}\par
1926         nomeUtilMinusculas[strlen(curr->name)] = {\cf23 '\\0'};  {\cf20 // inserir o \\0 no fim da string}\par
1927         {\cf19 if} (strstr(nomeUtilMinusculas, nomeMinisculas) != NULL) \{   {\cf20 // se existir a sub string "nomeMinusculas" (nome a ser procurado) no nome do utilizador}\par
1928             exist = 1;                                              {\cf20 // existe}\par
1929             printf({\cf22 "Name: %s\\n"}, curr->name);                {\cf20 // escreve na consola}\par
1930             printf({\cf22 "Email: %s\\n"}, curr->email);\par
1931             print_keyHolders(&curr->key_holder_list);\par
1932         \}\par
1933         curr = curr->next;\par
1934     \}\par
1935     {\cf19 if}(exist == 0)\{ {\cf20 // se nao existir}\par
1936         printf({\cf22 "Utilizador Nao Econtrado\\n"});\par
1937     \}\par
1938 \}\par
}
}
{\xe \v searchSingleKey_inKeyHolder\:projeto.h}
{\xe \v projeto.h\:searchSingleKey_inKeyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void searchSingleKey_inKeyHolder ({\b KEY_HOLDER} *  {\i portaChaves}, int  {\i keyHolderPos}, unsigned long long  {\i keyToSeach}, int  {\i type}, char *  {\i filename})}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fun\'E7\'E3o que escreve na consola e num ficheiro se uma dada chave existe num dado porta chaves Complexidade algoritmica Best case: O(1) / Average: O(n) / Worst: O(n^2) {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i portaChaves} \cell }{apontador que aponta para os v\'E1rios porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyHolderPos} \cell }{posi\'E7\'E3o do porta chaves \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i keyToSeach} \cell }{chave a ser procurada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i type} \cell }{tipode chave (1 - chave publica / 2 - chave privada / 3 - chave codificada) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filenamenome} \cell }{do ficheiro a inserir as informa\'E7\'F5es \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1290                                                                                                                                     \{\par
1291 \par
1292     FILE *fp = fopen(filename, {\cf22 "a+"});\par
1293     {\cf18 int} stopPos = 1, exist = 0;\par
1294     {\cf19 if}(type > 3 || type <= 0)\{  {\cf20 // se for inserido um tipo de chave que n\'E3o existe}\par
1295         printf({\cf22 "Tipo de chaves nao existe (1 - Publica / 2 - Privada / 3 - Codificada)\\n"});\par
1296         {\cf19 return};\par
1297     \}\par
1298     {\cf20 // ciclo para percorrer a lista ligada at\'E9 encontrar o porta chaves escolhido}\par
1299     {\cf19 while} (stopPos != keyHolderPos)\{\par
1300         portaChaves = portaChaves->next;\par
1301         stopPos++;\par
1302         {\cf19 if}(portaChaves == NULL)\{        {\cf20 // se o porta chaves n\'E3o existir}\par
1303             printf({\cf22 "Porta Chaves nao existe\\n"});\par
1304             {\cf19 return};\par
1305         \}\par
1306     \}\par
1307 \par
1308         {\cf19 if}(type == 1)\{  {\cf20 // chaves publicas}\par
1309             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khString.matrixPub[i] ; ++i) \{\par
1310                 {\cf19 if}(atoll(portaChaves->khString.matrixPub[i]) == keyToSeach)\{\par
1311                     printf({\cf22 "A chave %llu existe na matrix de chaves publicas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1312                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves publicas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1313                     exist = 1;\par
1314                 \}\par
1315             \}\par
1316             {\cf19 if}(exist == 0)\{\par
1317                 printf({\cf22 "A chave %llu nao existe na matrix de chaves publicas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1318                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves publicas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1319             \}\par
1320             exist = 0;\par
1321             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khInts.matrixPub[i] ; ++i) \{\par
1322                 {\cf19 if}(key_digits_2_long_int(portaChaves->khInts.matrixPub[i]) == keyToSeach)\{\par
1323                     printf({\cf22 "A chave %llu existe na matrix de chaves publicas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1324                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves publicas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1325                     exist = 1;\par
1326                 \}\par
1327             \}\par
1328             {\cf19 if}(exist == 0)\{\par
1329                 printf({\cf22 "A chave %llu nao existe na matrix de chaves publicas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1330                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves publicas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1331             \}\par
1332             exist = 0;\par
1333         \}\par
1334         {\cf19 else} {\cf19 if}(type == 2)\{     {\cf20 // chaves privadas}\par
1335             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khString.matrixPriv[i] ; ++i) \{\par
1336                 {\cf19 if}(atoll(portaChaves->khString.matrixPriv[i]) == keyToSeach)\{\par
1337                     printf({\cf22 "A chave %llu existe na matrix de chaves privadas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1338                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves privadas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1339                     exist = 1;\par
1340                 \}\par
1341             \}\par
1342             {\cf19 if}(exist == 0)\{\par
1343                 printf({\cf22 "A chave %llu nao existe na matrix de chaves privadas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1344                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves privadas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1345             \}\par
1346             exist = 0;\par
1347             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khInts.matrixPriv[i] ; ++i) \{\par
1348                 {\cf19 if}(key_digits_2_long_int(portaChaves->khInts.matrixPriv[i]) == keyToSeach)\{\par
1349                     printf({\cf22 "A chave %llu existe na matrix de chaves privadas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1350                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves privadas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1351                     exist = 1;\par
1352                 \}\par
1353             \}\par
1354             {\cf19 if}(exist == 0)\{\par
1355                 printf({\cf22 "A chave %llu nao existe na matrix de chaves privadas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1356                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves privadas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1357             \}\par
1358             exist = 0;\par
1359         \}\par
1360         {\cf19 else} {\cf19 if}(type == 3)\{     {\cf20 // chaves codificadas}\par
1361             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khString.matrixCod[i] ; ++i) \{\par
1362                 {\cf19 if}(atoll(portaChaves->khString.matrixCod[i]) == keyToSeach)\{\par
1363                     printf({\cf22 "A chave %llu existe na matrix de chaves codificada de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1364                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves codificadas de Strings na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1365                     exist = 1;\par
1366                 \}\par
1367             \}\par
1368             {\cf19 if}(exist == 0)\{\par
1369                 printf({\cf22 "A chave %llu nao existe na matrix de chaves codificadas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1370                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves codificadas de Strings do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1371             \}\par
1372             exist = 0;\par
1373             {\cf19 for} ({\cf18 int} i = 0; portaChaves->khInts.matrixCod[i] ; ++i) \{\par
1374                 {\cf19 if}(key_digits_2_long_int(portaChaves->khInts.matrixCod[i]) == atoll(keyToSeach))\{\par
1375                     printf({\cf22 "A chave %llu existe na matrix de chaves codificada de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1376                     fprintf(fp, {\cf22 "A chave %llu existe na matrix de chaves codificadas de Inteiros na prosicao %d do porta chaves %d\\n"}, keyToSeach, i, keyHolderPos);\par
1377                     exist = 1;\par
1378                 \}\par
1379             \}\par
1380             {\cf19 if}(exist == 0)\{\par
1381                 printf({\cf22 "A chave %llu nao existe na matrix de chaves codificadas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1382                 fprintf(fp, {\cf22 "A chave %llu nao existe na matrix de chaves codificadas de Inteiros do porta chaves %d\\n"}, keyToSeach, keyHolderPos);\par
1383             \}\par
1384             exist = 0;\par
1385         \}\par
1386     fclose(fp);\par
1387 \}\par
}
}
{\xe \v shellSortChar\:projeto.h}
{\xe \v projeto.h\:shellSortChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void shellSortChar (char **  {\i a}, int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmos de ordenacao ShellSort Complexidade algoritmica Best case: Nlog3(N) / Average: ? / Worst: cN^3/2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{mmatriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2297                                               \{\par
2298     {\cf18 int} h = 1;\par
2299     {\cf19 while} (h < N/3)\{\par
2300         h = 3*h + 1;\par
2301     \}\par
2302     {\cf19 while} (h >= 1)\{\par
2303         {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2304             {\cf20 //if(strcmp(a[i], "\\0") == 0) return;}\par
2305             {\cf19 if}(strcmp(a[i], {\cf22 "-1"}) == 0) {\cf19 return};\par
2306             {\cf19 if}(order == 1)\{ {\cf20 // 1 -> ascendente}\par
2307                 {\cf19 for} ({\cf18 int} j = i; j >= h && atoll(a[j]) < atoll(a[j-h]); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2308                     swapChar(a, j, j-h);\par
2309                 \}\par
2310             \} {\cf19 else}\{ {\cf20 // 0 -> descendente}\par
2311                 {\cf19 for} ({\cf18 int} j = i; j >= h && atoll(a[j]) > atoll(a[j-h]); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2312                     swapChar(a, j, j-h);\par
2313                 \}\par
2314             \}\par
2315         \}\par
2316         h /= 3;\par
2317     \}\par
2318 \}\par
}
}
{\xe \v shellSortCharDigits\:projeto.h}
{\xe \v projeto.h\:shellSortCharDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void shellSortCharDigits (char **  {\i a}, char **  {\i priv}, char **  {\i cod}, int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmos de ordenacao ShellSort (ordenar por numero de digitos) Complexidade algoritmica Best case: Nlog3(N) / Average: ? / Worst: cN^3/2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strings com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de strings com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2329                                                                              \{\par
2330     {\cf18 int} h = 1;\par
2331     {\cf19 while} (h < N/3)\{\par
2332         h = 3*h + 1;\par
2333     \}\par
2334     {\cf19 while} (h >= 1)\{\par
2335         {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2336             {\cf20 //if(strcmp(a[i], "\\0") == 0) return;}\par
2337             {\cf19 if}(strcmp(a[i], {\cf22 "-1"}) == 0) {\cf19 return};\par
2338             {\cf19 if}(order == 1)\{ {\cf20 // 1 -> ascendente}\par
2339                 {\cf19 for} ({\cf18 int} j = i; j >= h && numDigitsLong(atoll(a[j])) < numDigitsLong(atoll(a[j-h])); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2340                     swapCharDigits(a, priv, cod, j, j-h);\par
2341                 \}\par
2342             \} {\cf19 else}\{ {\cf20 // 0 -> descendente}\par
2343                 {\cf19 for} ({\cf18 int} j = i; j >= h && numDigitsLong(atoll(a[j])) > numDigitsLong(atoll(a[j-h])); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2344                     swapCharDigits(a, priv, cod, j, j-h);\par
2345                 \}\par
2346             \}\par
2347         \}\par
2348         h /= 3;\par
2349     \}\par
2350 \}\par
}
}
{\xe \v shellSortInt\:projeto.h}
{\xe \v projeto.h\:shellSortInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void shellSortInt (short **  {\i a}, int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmos de ordenacao ShellSort Complexidade algoritmica Best case: Nlog3(N) / Average: ? / Worst: cN^3/2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho da matriz \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2399                                               \{\par
2400     {\cf18 int} h = 1;\par
2401     {\cf19 while} (h < N/3)\{\par
2402         h = 3*h + 1;\par
2403     \}\par
2404     {\cf19 while} (h >= 1)\{\par
2405         {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2406             {\cf20 //if(a[i][0] == 0) return;}\par
2407             {\cf19 if}(a[i][0] == -1) {\cf19 return};\par
2408             {\cf19 if}(order == 1)\{ {\cf20 // 1 -> ascendente}\par
2409                 {\cf19 for} ({\cf18 int} j = i; j >= h && key_digits_2_long_int(a[j]) < key_digits_2_long_int(a[j-h]); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2410                     swapInt(a, j, j-h);\par
2411                 \}\par
2412             \} {\cf19 else}\{ {\cf20 // 0 -> descendente}\par
2413                 {\cf19 for} ({\cf18 int} j = i; j >= h && key_digits_2_long_int(a[j]) > key_digits_2_long_int(a[j-h]); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2414                     swapInt(a, j, j-h);\par
2415                 \}\par
2416             \}\par
2417         \}\par
2418         h /= 3;\par
2419     \}\par
2420 \}\par
}
}
{\xe \v shellSortIntDigits\:projeto.h}
{\xe \v projeto.h\:shellSortIntDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void shellSortIntDigits (short **  {\i a}, short **  {\i priv}, short **  {\i cod}, int  {\i N}, int  {\i order})}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Algoritmos de ordenacao ShellSort (ordenar por numero de digitos) Complexidade algoritmica Best case: Nlog3(N) / Average: ? / Worst: cN^3/2 {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i N} \cell }{tamanho das matrizes \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i order} \cell }{tipo de ordena\'E7\'E3o (1 - ascendente / 0 - descendente) \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2431                                                                                \{\par
2432     {\cf18 int} h = 1;\par
2433     {\cf19 while} (h < N/3)\{\par
2434         h = 3*h + 1;\par
2435     \}\par
2436     {\cf19 while} (h >= 1)\{\par
2437         {\cf19 for} ({\cf18 int} i = 0; i < N; ++i) \{\par
2438             {\cf20 //if(a[i][0] == 0) return;}\par
2439             {\cf19 if}(a[i][0] == -1) {\cf19 return};\par
2440             {\cf19 if}(order == 1)\{ {\cf20 // 1 -> ascendente}\par
2441                 {\cf19 for} ({\cf18 int} j = i; j >= h && numDigitsLong(key_digits_2_long_int(a[j])) < numDigitsLong(key_digits_2_long_int(a[j-h])); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2442                     swapIntDigits(a, priv, cod, j, j-h);\par
2443                 \}\par
2444             \} {\cf19 else}\{ {\cf20 // 0 -> descendente}\par
2445                 {\cf19 for} ({\cf18 int} j = i; j >= h && numDigitsLong(key_digits_2_long_int(a[j])) > numDigitsLong(key_digits_2_long_int(a[j-h])); j -= h) \{  {\cf20 //Para ordenar descendente \'E9 mudar de "<" para ">"}\par
2446                     swapIntDigits(a, priv, cod, j, j-h);\par
2447                 \}\par
2448             \}\par
2449         \}\par
2450         h /= 3;\par
2451     \}\par
2452 \}\par
}
}
{\xe \v swapChar\:projeto.h}
{\xe \v projeto.h\:swapChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swapChar (char **  {\i a}, int  {\i i}, int  {\i min})}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Troca valores de 2 posi\'E7\'F5es diferentes {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{primeira posi\'E7\'E3o do array a ser trocada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min} \cell }{segunda posi\'E7\'E3o do array a ser trocada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2382                                        \{\par
2383 \par
2384     {\cf18 char}* temp = ({\cf18 char} *) calloc(strlen(a[min]) * {\cf17 sizeof} (char), {\cf17 sizeof} ({\cf18 char}));\par
2385     strcpy(temp, a[min]);\par
2386     strcpy(a[min], a[i]);\par
2387     strcpy(a[i], temp);\par
2388     temp = NULL;\par
2389     free(temp);\par
2390 \}\par
}
}
{\xe \v swapCharDigits\:projeto.h}
{\xe \v projeto.h\:swapCharDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swapCharDigits (char **  {\i a}, char **  {\i priv}, char **  {\i cod}, int  {\i i}, int  {\i min})}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Troca valores de 2 posi\'E7\'F5es diferentes {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de strings com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de strings com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de strigns com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{primeira posi\'E7\'E3o do array a ser trocada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min} \cell }{segunda posi\'E7\'E3o do array a ser trocada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2360                                                                       \{\par
2361 \par
2362     {\cf18 char}* temp = ({\cf18 char} *) calloc(strlen(a[min]) * {\cf17 sizeof} (char), {\cf17 sizeof} ({\cf18 char}));\par
2363     strcpy(temp, a[min]);\par
2364     strcpy(a[min], a[i]);\par
2365     strcpy(a[i], temp);\par
2366     strcpy(temp, priv[min]);\par
2367     strcpy(priv[min], priv[i]);\par
2368     strcpy(priv[i], temp);\par
2369     strcpy(temp, cod[min]);\par
2370     strcpy(cod[min], cod[i]);\par
2371     strcpy(cod[i], temp);\par
2372     temp = NULL;\par
2373     free(temp);\par
2374 \}\par
}
}
{\xe \v swapInt\:projeto.h}
{\xe \v projeto.h\:swapInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swapInt (short **  {\i a}, int  {\i i}, int  {\i min})}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Troca valores de 2 posi\'E7\'F5es diferentes {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{primeira posi\'E7\'E3o do array a ser trocada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min} \cell }{segunda posi\'E7\'E3o do array a ser trocada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2484                                        \{\par
2485 \par
2486     {\cf18 short}* temp = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(a[min])), {\cf17 sizeof} (short ));\par
2487     temp = a[min];\par
2488     a[min] = a[i];\par
2489     a[i] = temp;\par
2490     temp = NULL;\par
2491     free(temp);\par
2492 \}\par
}
}
{\xe \v swapIntDigits\:projeto.h}
{\xe \v projeto.h\:swapIntDigits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void swapIntDigits (short **  {\i a}, short **  {\i priv}, short **  {\i cod}, int  {\i i}, int  {\i min})}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Troca valores de 2 posi\'E7\'F5es diferentes {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{matriz de short com chaves publicas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i priv} \cell }{matriz de short com chaves privadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cod} \cell }{matriz de short com chaves codificadas \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i i} \cell }{primeira posi\'E7\'E3o do array a ser trocada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i min} \cell }{segunda posi\'E7\'E3o do array a ser trocada \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2462                                                                         \{\par
2463 \par
2464     {\cf18 short}* temp = ({\cf18 short} *) calloc(numDigitsLong(key_digits_2_long_int(a[min])), {\cf17 sizeof} (short ));\par
2465     temp = a[min];\par
2466     a[min] = a[i];\par
2467     a[i] = temp;\par
2468     temp = priv[min];\par
2469     priv[min] = priv[i];\par
2470     priv[i] = temp;\par
2471     temp = cod[min];\par
2472     cod[min] = cod[i];\par
2473     cod[i] = temp;\par
2474     temp = NULL;\par
2475     free(temp);\par
2476 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
projeto.h\par \pard\plain 
{\tc\tcl2 \v lib_projeto/projeto.h}
{\xe \v lib_projeto/projeto.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Ir para a documenta\'E7\'E3o deste ficheiro.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //}\par
2 {\cf20 // Created by pc on 11/11/2022.}\par
3 {\cf20 //}\par
4 \par
5 {\cf21 #ifndef INC_2UFP_PROJETO_AED_PROJETO_H}\par
6 {\cf21 #define INC_2UFP_PROJETO_AED_PROJETO_H}\par
7 \par
8 {\cf21 #include <stdio.h>}\par
9 {\cf21 #include <string.h>}\par
10 {\cf21 #include <stdlib.h>}\par
11 {\cf21 #include <malloc.h>}\par
12 {\cf21 #include <ctype.h>}\par
13 {\cf21 #include <time.h>}\par
14 \par
15 {\cf21 #define FIRST_NUMBER '0'}\par
16 {\cf21 #define CUTOFF 10}\par
17 \par
18 {\cf17 struct }matrixString\{\par
19     {\cf18 char} **matrixPub;\par
20     {\cf18 char} **matrixPriv;\par
21     {\cf18 char} **matrixCod;\par
22     {\cf18 int} lines;\par
23 \};\par
24 \par
25 {\cf17 struct }matrixInts\{\par
26     {\cf18 short} **matrixPub;\par
27     {\cf18 short} **matrixPriv;\par
28     {\cf18 short} **matrixCod;\par
29     {\cf18 int} lines;\par
30 \};\par
31 \par
32 {\cf17 typedef} {\cf17 struct }KEY_HOLDER\{\par
33     {\cf17 struct }matrixString khString;\par
34     {\cf17 struct }matrixInts khInts;\par
35     {\cf18 char}* data_criacao;\par
36     {\cf18 char}* data_modificacao;\par
37     {\cf18 int} sizeStrings;\par
38     {\cf18 int} sieInts;\par
39     {\cf17 struct }KEY_HOLDER *next;\par
40 \} KEY_HOLDER;\par
41 \par
42 {\cf17 typedef} {\cf17 struct }UTILIZADORES \{\par
43     {\cf18 char}* name;\par
44     {\cf18 char}* email;\par
45     KEY_HOLDER* key_holder_list;\par
46     {\cf17 struct }UTILIZADORES* next;\par
47 \} UTILIZADORES;\par
48 \par
49 {\cf17 typedef} {\cf17 struct }UTILIZADORES_QUEUE \{\par
50     UTILIZADORES* head;\par
51     UTILIZADORES* tail;\par
52     {\cf18 int} size;\par
53 \} UTILIZADORES_QUEUE;\par
54 \par
55 \par
56 {\cf20 // Os comentarios das fun\'E7\'F5es est\'E3o no ficheiro com as fun\'E7\'F5es .c}\par
57 {\cf18 int} bipolar_numberInt({\cf18 short} text[]);\par
58 \par
59 {\cf18 int} numDigits({\cf18 int} num);\par
60 {\cf18 int} numDigitsLong({\cf18 unsigned} {\cf18 long} {\cf18 long} num);\par
61 \par
62 {\cf18 void} allDigits({\cf18 int} num, {\cf18 int} allD[]);\par
63 {\cf18 void} allDigitsLong({\cf18 unsigned} {\cf18 long} {\cf18 long} num, {\cf18 int} allD[]);\par
64 \par
65 {\cf18 void} randomKey(FILE *fileChavesPubWrite, {\cf18 char} *fileName, {\cf18 int} n);\par
66 {\cf18 char}** randomKeyMatrix({\cf18 char}** r, {\cf18 int} n);\par
67 {\cf18 char}* randomKeyValue({\cf18 char}* r);\par
68 {\cf18 int} charPos({\cf18 char} *a, {\cf18 int} d);\par
69 \par
70 {\cf18 void} shellSortChar({\cf18 char}** a, {\cf18 int} N, {\cf18 int} order);\par
71 {\cf18 void} shellSortCharDigits({\cf18 char}** a, {\cf18 char}** priv, {\cf18 char}** cod, {\cf18 int} N, {\cf18 int} order);\par
72 {\cf18 void} swapChar({\cf18 char}** a, {\cf18 int} i, {\cf18 int} min);\par
73 {\cf18 void} swapCharDigits({\cf18 char}** a, {\cf18 char}** priv, {\cf18 char}** cod, {\cf18 int} i, {\cf18 int} min);\par
74 \par
75 {\cf18 void} shellSortInt({\cf18 short}** a, {\cf18 int} N, {\cf18 int} order);\par
76 {\cf18 void} shellSortIntDigits({\cf18 short}** a, {\cf18 short}** priv, {\cf18 short}** cod, {\cf18 int} N, {\cf18 int} order);\par
77 {\cf18 void} swapInt({\cf18 short}** a, {\cf18 int} i, {\cf18 int} min);\par
78 {\cf18 void} swapIntDigits({\cf18 short}** a, {\cf18 short}** priv, {\cf18 short}** cod, {\cf18 int} i, {\cf18 int} min);\par
79 \par
80 {\cf18 void} merge_char_sort_base({\cf18 char}* a[], {\cf18 int} N, {\cf18 int} order);\par
81 {\cf18 void} merge_char_sort_recursive_cutoff({\cf18 char}* a[], {\cf18 char}* aux[], {\cf18 int} lo, {\cf18 int} hi, {\cf18 int} order);\par
82 {\cf18 void} merge_char_sort_recursive_basic({\cf18 char}* a[], {\cf18 char}* aux[], {\cf18 int} lo, {\cf18 int} hi, {\cf18 int} order);\par
83 {\cf18 void} merge_char({\cf18 char}* a[], {\cf18 char}* aux[], {\cf18 int} lo, {\cf18 int} mid, {\cf18 int} hi, {\cf18 int} order);\par
84 {\cf18 void} insertionSort_char({\cf18 char}* a[], {\cf18 int} N, {\cf18 int} order);\par
85 \par
86 {\cf18 void} mergeDigits_char_sort_base({\cf18 char}* a[], {\cf18 char}* priv[], {\cf18 char}* cod[], {\cf18 int} N, {\cf18 int} order);\par
87 {\cf18 void} mergeDigits_char_sort_recursive_cutoff({\cf18 char}* a[], {\cf18 char}* aux[], {\cf18 char}* priv[], {\cf18 char}* cod[], {\cf18 char}* auxPriv[], {\cf18 char}* auxCod[], {\cf18 int} lo, {\cf18 int} hi, {\cf18 int} order);\par
88 {\cf18 void} mergeDigits_char_sort_recursive_basic({\cf18 char}* a[], {\cf18 char}* aux[], {\cf18 char}* priv[], {\cf18 char}* cod[], {\cf18 char}* auxPriv[], {\cf18 char}* auxCod[], {\cf18 int} lo, {\cf18 int} hi, {\cf18 int} order);\par
89 {\cf18 void} mergeDigits_char({\cf18 char}* a[], {\cf18 char}* aux[], {\cf18 char}* priv[], {\cf18 char}* cod[], {\cf18 char}* auxPriv[], {\cf18 char}* auxCod[], {\cf18 int} lo, {\cf18 int} mid, {\cf18 int} hi, {\cf18 int} order);\par
90 {\cf18 void} insertionSortDigits_char({\cf18 char}* a[], {\cf18 char}* priv[], {\cf18 char}* cod[], {\cf18 int} N, {\cf18 int} order);\par
91 \par
92 {\cf18 void} merge_int_sort_base({\cf18 short}* a[], {\cf18 int} N, {\cf18 int} order);\par
93 {\cf18 void} merge_int_sort_recursive_cutoff({\cf18 short}*  a[], {\cf18 short}*  aux[], {\cf18 int} lo, {\cf18 int} hi, {\cf18 int} order);\par
94 {\cf18 void} merge_int_sort_recursive_basic({\cf18 short}*  a[], {\cf18 short}*  aux[], {\cf18 int} lo, {\cf18 int} hi, {\cf18 int} order);\par
95 {\cf18 void} merge_int({\cf18 short}*  a[], {\cf18 short}*  aux[], {\cf18 int} lo, {\cf18 int} mid, {\cf18 int} hi, {\cf18 int} order);\par
96 {\cf18 void} insertionSort_int({\cf18 short}*  a[], {\cf18 int} N, {\cf18 int} order);\par
97 \par
98 {\cf18 void} mergeDigits_int_sort_base({\cf18 short}*  a[], {\cf18 short}*  priv[], {\cf18 short}*  cod[], {\cf18 int} N, {\cf18 int} order);\par
99 {\cf18 void} mergeDigits_int_sort_recursive_cutoff({\cf18 short}*  a[], {\cf18 short}*  aux[], {\cf18 short}*  priv[], {\cf18 short}*  cod[], {\cf18 short}*  auxPriv[], {\cf18 short}*  auxCod[], {\cf18 int} lo, {\cf18 int} hi, {\cf18 int} order);\par
100 {\cf18 void} mergeDigits_int_sort_recursive_basic({\cf18 short}*  a[], {\cf18 short}*  aux[], {\cf18 short}*  priv[], {\cf18 short}*  cod[], {\cf18 short}*  auxPriv[], {\cf18 short}*  auxCod[], {\cf18 int} lo, {\cf18 int} hi, {\cf18 int} order);\par
101 {\cf18 void} mergeDigits_int({\cf18 short}*  a[], {\cf18 short}*  aux[], {\cf18 short}*  priv[], {\cf18 short}*  cod[], {\cf18 short}*  auxPriv[], {\cf18 short}*  auxCod[], {\cf18 int} lo, {\cf18 int} mid, {\cf18 int} hi, {\cf18 int} order);\par
102 {\cf18 void} insertionSortDigits_int({\cf18 short}*  a[], {\cf18 short}*  priv[], {\cf18 short}*  cod[], {\cf18 int} N, {\cf18 int} order);\par
103 \par
104 \par
105 {\cf18 void} insert_keyHolder(KEY_HOLDER** portaChaves, {\cf17 struct} matrixString mString, {\cf17 struct} matrixInts mInts, {\cf18 int} pos);\par
106 {\cf18 void} edit_keyHolder(KEY_HOLDER** portaChaves, {\cf17 struct} matrixString mString, {\cf17 struct} matrixInts mInts, {\cf18 int} keyHolderPos, {\cf18 int} posChange, {\cf18 int} keyPos);\par
107 {\cf18 void} remove_keyHolder(KEY_HOLDER** portaChaves, {\cf18 int} keyHolderPos);\par
108 {\cf20 //Type -> 1 = PubKey / Type -> 2 = PrivKey / Type -> 3 = CodKey}\par
109 {\cf18 void} searchSingleKey_inKeyHolder(KEY_HOLDER* portaChaves, {\cf18 int} keyHolderPos, {\cf18 unsigned} {\cf18 long} {\cf18 long} keyToSeach, {\cf18 int} type, {\cf18 char}* filename);\par
110 {\cf18 void} save_txt_keyHolder(KEY_HOLDER ** portaChaves, {\cf17 struct} matrixString mString, {\cf17 struct} matrixInts mInts, {\cf18 int} keyHolderPos, {\cf18 char} filename[]);\par
111 {\cf18 void} load_txt_keyHolder(KEY_HOLDER ** portaChaves, {\cf17 struct} matrixString mString, {\cf17 struct} matrixInts mInts, {\cf18 int} keyHolderPos, {\cf18 int} newKeysPos, {\cf18 char} filename[]);\par
112 {\cf18 void} print_keyHolders(KEY_HOLDER** portaChaves);\par
113 \par
114 {\cf18 void} create_utilizador_ordenado(UTILIZADORES_QUEUE* queue, UTILIZADORES **utilizadores, {\cf18 char}* name, {\cf18 char}* email, KEY_HOLDER* key_holder_list, {\cf18 int} pos);\par
115 {\cf18 void} create_utilizador_cabeca(UTILIZADORES_QUEUE* queue, UTILIZADORES **utilizadores, {\cf18 char}* name, {\cf18 char}* email, KEY_HOLDER* key_holder_list, {\cf18 int} pos);\par
116 {\cf18 void} create_utilizador_cauda(UTILIZADORES_QUEUE* queue, UTILIZADORES **utilizadores, {\cf18 char}* name, {\cf18 char}* email, KEY_HOLDER* key_holder_list, {\cf18 int} pos);\par
117 {\cf18 void} enqueue(UTILIZADORES_QUEUE* queue, UTILIZADORES* utilizador);\par
118 {\cf18 void} dequeue(UTILIZADORES_QUEUE* queue);\par
119 {\cf18 void} print_utilizadores(UTILIZADORES_QUEUE* queue);\par
120 {\cf18 void} remover_nome_utilizador(UTILIZADORES_QUEUE* queue, {\cf18 char}* name);\par
121 {\cf18 void} remover_cabeca_utilizador(UTILIZADORES_QUEUE* queue);\par
122 {\cf18 void} remover_cauda_utilizador(UTILIZADORES_QUEUE* queue);\par
123 {\cf18 void} search_utilizador_by_name(UTILIZADORES_QUEUE* queue, {\cf18 char}* name);\par
124 {\cf18 void} ordenar_utilizadores(UTILIZADORES_QUEUE* queue);\par
125 \par
126 {\cf18 void} freeMatrixChar({\cf18 char} **matrix, {\cf18 int} N);\par
127 {\cf18 void} freeMatrixShort({\cf18 short} **matrix, {\cf18 int} N);\par
128 \par
129 {\cf21 #endif }{\cf20 //INC_2UFP_PROJETO_AED_PROJETO_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro lib_projeto/testes.c\par \pard\plain 
{\tc\tcl2 \v lib_projeto/testes.c}
{\xe \v lib_projeto/testes.c}
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "projeto.h"}\par
{\f2 #include "testes.h"}\par
{\f2 #include "aed1_lp1_2223_proj_part1_chars.h"}\par
{\f2 #include "aed1_lp1_2223_proj_part1_ints.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b matrixString} {\b clienteString} (struct {\b matrixString} mString)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b matrixInts} {\b clienteInt} (struct {\b matrixInts} mInts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b KEY_HOLDER} * {\b clienteKeyHolder} ({\b KEY_HOLDER} *portaChaves, struct {\b matrixString} mString, struct {\b matrixInts} mInts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clienteUtilizadores} ({\b UTILIZADORES} *utilizador, {\b UTILIZADORES_QUEUE} queue, {\b KEY_HOLDER} *portaChaves)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main_test} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v clienteInt\:testes.c}
{\xe \v testes.c\:clienteInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b matrixInts} clienteInt (struct {\b matrixInts}  {\i mInts})}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 262                                                      \{\par
263 \par
264     {\cf18 char} filename[] = {\cf22 "../data/chaves_publicas_ints.txt"};\par
265     {\cf18 char} filenameBn[] =  {\cf22 "../data/chaves_Ints_Bn.txt"};\par
266     {\cf18 unsigned} {\cf18 long} {\cf18 long} pubKey = 0, privKey = 0, codKey = 0;\par
267     {\cf18 short} *allD = NULL, **privKeySearch = NULL;\par
268     {\cf18 int} lines = 12, columns = 1;\par
269 \par
270     mInts.lines = 0;\par
271 \par
272     printf({\cf22 "Matriz Ints\\n"});\par
273 \par
274     pubKey = new_public_key_int();\par
275     pubKey = 230;\par
276     allD = key_long_2_digits_int(pubKey);\par
277     pubKey = key_digits_2_long_int(allD);\par
278     privKey = calc_private_key_int(pubKey);\par
279     codKey = calc_runlength_int(privKey);\par
280     {\cf20 //printf("PubKey Random - %llu\\n", pubKey);}\par
281     {\cf20 /*}\par
282 {\cf20     for (int i = 0; i < numDigitsLong(pubKey)+1; ++i) \{}\par
283 {\cf20         printf("Digits PubKey - %hi\\n", allD[i]);}\par
284 {\cf20     \}}\par
285 {\cf20      */}\par
286     {\cf20 //printf("PubKey Por Digitos - %llu\\n", pubKey);}\par
287     {\cf20 //printf("PrivKey - %llu\\n", privKey);}\par
288     {\cf20 //printf("CodKey - %llu\\n", codKey);}\par
289 \par
290     mInts.matrixPub = alloc_matrix_int(lines, columns);\par
291     mInts.matrixPriv = alloc_matrix_int(lines, columns);\par
292     mInts.matrixCod = alloc_matrix_int(lines, columns);\par
293 \par
294     store_key_int(mInts.matrixPub, lines, pubKey);\par
295     store_key_int(mInts.matrixPriv, lines, privKey);\par
296     store_key_int(mInts.matrixCod, lines, codKey);\par
297 \par
298 \par
299     pubKey = new_public_key_int();\par
300     pubKey = 2;\par
301     allD = key_long_2_digits_int(pubKey);\par
302     pubKey = key_digits_2_long_int(allD);\par
303     privKey = calc_private_key_int(pubKey);\par
304     codKey = calc_runlength_int(privKey);\par
305 \par
306     store_key_int(mInts.matrixPub, lines, pubKey);\par
307     store_key_int(mInts.matrixPriv, lines, privKey);\par
308     store_key_int(mInts.matrixCod, lines, codKey);\par
309 \par
310 \par
311     printf({\cf22 "PubKey Apagada - %llu\\n"}, delete_key_int(mInts.matrixPub, mInts.matrixPriv, mInts.matrixCod, lines, 2));\par
312     {\cf20 //printf("PubKey Apagada - %llu\\n", delete_key_int(mInts.matrixPub, mInts.matrixPriv, mInts.matrixCod, lines-1, 230));}\par
313 \par
314     bulk_populate_public_keys_int(mInts.matrixPub, lines);\par
315     bulk_compute_private_keys_int(mInts.matrixPub, mInts.matrixPriv, lines);\par
316     bulk_compute_runlengths_int(mInts.matrixPriv, mInts.matrixCod, lines);\par
317 \par
318     {\cf20 /*}\par
319 {\cf20     for (int i = 0; i < lines+1; ++i) \{}\par
320 {\cf20         if(mInts.matrixPub[i][0] == -1) break;}\par
321 {\cf20         if(mInts.matrixPub[i][0] == 0 && mInts.matrixPub[i][1] != -1) printf("Pub - 0\\n");}\par
322 {\cf20         else printf("Pub - %llu\\n", key_digits_2_long_int(mInts.matrixPub[i]));}\par
323 {\cf20         if(mInts.matrixPriv[i][0] == 0 && mInts.matrixPriv[i][1] != -1) printf("Priv - 0\\n");}\par
324 {\cf20         else printf("Priv - %llu\\n", key_digits_2_long_int(mInts.matrixPriv[i]));}\par
325 {\cf20         if(mInts.matrixCod[i][0] == 0 && mInts.matrixCod[i][1] != -1) printf("Cod - 0\\n");}\par
326 {\cf20         else printf("Cod - %llu\\n", key_digits_2_long_int(mInts.matrixCod[i]));}\par
327 {\cf20     \}}\par
328 {\cf20     printf("\\n");}\par
329 {\cf20     */}\par
330 \par
331     printf({\cf22 "Exists - %d\\n"}, exists_key_int(mInts.matrixPub, lines, 200));\par
332     printf({\cf22 "PrivKey da PubKey - %llu\\n"}, get_private_key_int(mInts.matrixPub, mInts.matrixPriv, lines, key_digits_2_long_int(mInts.matrixPub[2])));\par
333     printf({\cf22 "CodKey da PrivKey - %llu\\n"}, get_runlength_int(mInts.matrixPriv, mInts.matrixCod, lines, 2));\par
334 \par
335 \par
336     privKeySearch = search_private_keys_int(mInts.matrixPub, mInts.matrixPriv, lines, 2);\par
337 \par
338     {\cf18 int} p = 0;\par
339     {\cf19 while} (privKeySearch[p][0] != -1)\{\par
340         printf({\cf22 "Priv Encontrada - %llu"}, key_digits_2_long_int(privKeySearch[p]));\par
341         printf({\cf22 "\\n"});\par
342         p++;\par
343     \}\par
344 \par
345 \par
346     {\cf20 //load_txt_keys_int(mInts.matrixPub, mInts.matrixPriv, mInts.matrixCod, lines, filename);}\par
347 \par
348     {\cf20 //sort_matrix_int(mInts.matrixPub, lines, 1);}\par
349     {\cf20 //sort_all_matrices_int(mInts.matrixPub, mInts.matrixPriv, mInts.matrixCod, lines, 1);}\par
350     {\cf20 //list_keys_int(mInts.matrixPub, mInts.matrixPriv, mInts.matrixCod, lines, 1);}\par
351 \par
352 \par
353     {\cf19 for} ({\cf18 int} i = 0; i < lines+1; ++i) \{\par
354         {\cf19 if}(mInts.matrixPub[i][0] == -1) {\cf19 break};\par
355         {\cf19 if}(mInts.matrixPub[i][0] == 0 && mInts.matrixPub[i][1] != -1) printf({\cf22 "Pub - 0\\n"});\par
356         {\cf19 else} printf({\cf22 "Pub - %llu\\n"}, key_digits_2_long_int(mInts.matrixPub[i]));\par
357         {\cf19 if}(mInts.matrixPriv[i][0] == 0 && mInts.matrixPriv[i][1] != -1) printf({\cf22 "Priv - 0\\n"});\par
358         {\cf19 else} printf({\cf22 "Priv - %llu\\n"}, key_digits_2_long_int(mInts.matrixPriv[i]));\par
359         {\cf19 if}(mInts.matrixCod[i][0] == 0 && mInts.matrixCod[i][1] != -1) printf({\cf22 "Cod - 0\\n"});\par
360         {\cf19 else} printf({\cf22 "Cod - %llu\\n"}, key_digits_2_long_int(mInts.matrixCod[i]));\par
361     \}\par
362     printf({\cf22 "\\n"});\par
363 \par
364 \par
365 \par
366     privKey = private_key_from_runlength_int(key_digits_2_long_int(mInts.matrixCod[2]));\par
367 \par
368     printf({\cf22 "Priv: %llu (RunLength: %llu)\\n"}, privKey, key_digits_2_long_int(mInts.matrixCod[2]));\par
369 \par
370     printf({\cf22 "PubKey Apagada - %llu\\n"}, delete_key_int(mInts.matrixPub, mInts.matrixPriv, mInts.matrixCod, lines, key_digits_2_long_int(mInts.matrixPub[1])));\par
371 \par
372     {\cf20 /*}\par
373 {\cf20     for (int i = 0; i < lines+1; ++i) \{}\par
374 {\cf20         if(mInts.matrixPub[i][0] == -1) break;}\par
375 {\cf20         if(mInts.matrixPub[i][0] == 0 && mInts.matrixPub[i][1] != -1) printf("Pub - 0\\n");}\par
376 {\cf20         else printf("Pub - %llu\\n", key_digits_2_long_int(mInts.matrixPub[i]));}\par
377 {\cf20         if(mInts.matrixPriv[i][0] == 0 && mInts.matrixPriv[i][1] != -1) printf("Priv - 0\\n");}\par
378 {\cf20         else printf("Priv - %llu\\n", key_digits_2_long_int(mInts.matrixPriv[i]));}\par
379 {\cf20         if(mInts.matrixCod[i][0] == 0 && mInts.matrixCod[i][1] != -1) printf("Cod - 0\\n");}\par
380 {\cf20         else printf("Cod - %llu\\n", key_digits_2_long_int(mInts.matrixCod[i]));}\par
381 {\cf20     \}}\par
382 {\cf20     printf("\\n");}\par
383 {\cf20     */}\par
384 \par
385     save_txt_keys_int(mInts.matrixPub, mInts.matrixPriv, mInts.matrixCod, lines, filename);\par
386 \par
387     save_bin_keys_int(mInts.matrixPub, mInts.matrixPriv, mInts.matrixCod, lines, filenameBn);\par
388 \par
389     {\cf18 int} y = 0;\par
390     {\cf19 while} (mInts.matrixPub[y][0] != -1)\{\par
391         mInts.lines++;\par
392         y++;\par
393     \}\par
394 \par
395     {\cf19 return} mInts;\par
396 \}\par
}
}
{\xe \v clienteKeyHolder\:testes.c}
{\xe \v testes.c\:clienteKeyHolder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b KEY_HOLDER} * clienteKeyHolder ({\b KEY_HOLDER} *  {\i portaChaves}, struct {\b matrixString}  {\i mString}, struct {\b matrixInts}  {\i mInts})}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 398                                                                                                            \{\par
399 \par
400     printf({\cf22 "Porta Chaves\\n"});\par
401 \par
402     {\cf18 char} filename[] = {\cf22 "../data/portaChaves.txt"};\par
403     {\cf18 char} filenameSearch[] = {\cf22 "../data/portaChavesPesquisa.txt"};\par
404     {\cf18 int} stopPos = 1, keyHolderPos = 1;\par
405     insert_keyHolder(&portaChaves, mString, mInts, 0);\par
406     insert_keyHolder(&portaChaves, mString, mInts, 1);\par
407     insert_keyHolder(&portaChaves, mString, mInts, 2);\par
408     print_keyHolders(&portaChaves);\par
409 \par
410     searchSingleKey_inKeyHolder(portaChaves, 2, 230, 1, filenameSearch);\par
411 \par
412     edit_keyHolder(&portaChaves, mString, mInts, 2, 10, 3);\par
413     edit_keyHolder(&portaChaves, mString, mInts, 1, 0, 2);\par
414     edit_keyHolder(&portaChaves, mString, mInts, 2, 10, 4);\par
415     edit_keyHolder(&portaChaves, mString, mInts, 2, 10, 6);\par
416     {\cf20 //print_keyHolders(&portaChaves);}\par
417 \par
418     save_txt_keyHolder(&portaChaves, mString, mInts, 2, filename);\par
419 \par
420     remove_keyHolder(&portaChaves, 1);\par
421 \par
422     print_keyHolders(&portaChaves);\par
423 \par
424     {\cf20 /*}\par
425 {\cf20     printf("Do ficheiro de texto\\n");}\par
426 {\cf20     insert_keyHolder(&portaChaves, mString, mInts, 0);}\par
427 {\cf20     load_txt_keyHolder(&portaChaves, mString, mInts, 3, 0, filename);}\par
428 {\cf20     print_keyHolders(&portaChaves);}\par
429 {\cf20     */}\par
430 \par
431     {\cf19 return} portaChaves;\par
432 \}\par
}
}
{\xe \v clienteString\:testes.c}
{\xe \v testes.c\:clienteString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b matrixString} clienteString (struct {\b matrixString}  {\i mString})}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 85                                                               \{\par
86     {\cf18 char} filename[] = {\cf22 "../data/chaves_publicas.txt"};\par
87     {\cf18 char} filenameBn[] = {\cf22 "../data/chaves_String_Bn.txt"};\par
88     {\cf18 char} *publicKeyChar, *privKeyChar, *codKeyChar;\par
89     {\cf18 char} **privKeySearch = NULL;\par
90     {\cf18 unsigned} {\cf18 long} {\cf18 long} key = 2014, publicKeyLong = 0, privKeyLong = 0, codKeyLong = 0;\par
91     {\cf18 int} lines = 15, columns = 1;\par
92 \par
93     mString.lines = 0;\par
94 \par
95     printf({\cf22 "Matriz Strings\\n"});\par
96 \par
97     privKeyChar = ({\cf18 char} *) malloc(numDigitsLong(key) * {\cf17 sizeof} (char));\par
98     codKeyChar = ({\cf18 char} *) malloc(numDigitsLong(key) * {\cf17 sizeof} (char));\par
99     publicKeyChar = key_long_2_digits_char(230);\par
100     {\cf20 //printf("PubChar - %s\\n", publicKeyChar);}\par
101     publicKeyLong = key_digits_2_long_char(publicKeyChar);\par
102     {\cf20 //printf("PubLong - %llu\\n", publicKeyLong);}\par
103     privKeyLong = calc_private_key_char(publicKeyLong);\par
104     {\cf20 //printf("PrivLong - %llu\\n", privKeyLong);}\par
105     sprintf(privKeyChar, {\cf22 "%llu"}, privKeyLong);\par
106     {\cf20 //printf("PrivChar - %s\\n", privKeyChar);}\par
107     codKeyLong = calc_runlength_char(privKeyLong);\par
108     {\cf20 //printf("CodLong - %llu\\n", codKeyLong);}\par
109     sprintf(codKeyChar, {\cf22 "%llu"}, codKeyLong);\par
110     {\cf20 //printf("CodChar - %s\\n", codKeyChar);}\par
111 \par
112 \par
113     mString.matrixPub = alloc_matrix_char(lines, columns);\par
114     mString.matrixPriv = alloc_matrix_char(lines, columns);\par
115     mString.matrixCod = alloc_matrix_char(lines, columns);\par
116 \par
117     store_key_char(mString.matrixPub, lines, publicKeyLong);\par
118     store_key_char(mString.matrixPriv, lines, privKeyLong);\par
119     store_key_char(mString.matrixCod, lines, codKeyLong);\par
120 \par
121 \par
122     publicKeyChar = key_long_2_digits_char(2014);\par
123     {\cf20 //printf("PubChar - %s\\n", publicKeyChar);}\par
124     publicKeyLong = key_digits_2_long_char(publicKeyChar);\par
125     {\cf20 //printf("PubLong - %llu\\n", publicKeyLong);}\par
126     privKeyLong = calc_private_key_char(publicKeyLong);\par
127     {\cf20 //printf("PrivLong - %llu\\n", privKeyLong);}\par
128     sprintf(privKeyChar, {\cf22 "%llu"}, privKeyLong);\par
129     {\cf20 //printf("PrivChar - %s\\n", privKeyChar);}\par
130     codKeyLong = calc_runlength_char(privKeyLong);\par
131     {\cf20 //printf("CodLong - %llu\\n", codKeyLong);}\par
132     sprintf(codKeyChar, {\cf22 "%llu"}, codKeyLong);\par
133     {\cf20 //printf("CodChar - %s\\n", codKeyChar);}\par
134 \par
135     store_key_char(mString.matrixPub, lines, publicKeyLong);\par
136     store_key_char(mString.matrixPriv, lines, privKeyLong);\par
137     store_key_char(mString.matrixCod, lines, codKeyLong);\par
138 \par
139 \par
140     {\cf20 /*}\par
141 {\cf20     for (int i = 0; i < lines; ++i) \{}\par
142 {\cf20         if(strcmp(mString.matrixPub[i], "\\0") != 0) printf("Pub - %s\\n", mString.matrixPub[i]);}\par
143 {\cf20         if(strcmp(mString.matrixPriv[i], "\\0") != 0) printf("Priv - %s\\n", mString.matrixPriv[i]);}\par
144 {\cf20         if(strcmp(mString.matrixCod[i], "\\0") != 0) printf("Cod - %s\\n", mString.matrixCod[i]);}\par
145 {\cf20     \}}\par
146 {\cf20     printf("\\n");}\par
147 {\cf20     */}\par
148 \par
149     printf({\cf22 "Chave Publica Apagada %llu\\n"}, delete_key_char(mString.matrixPub, mString.matrixPriv, mString.matrixCod, lines, {\cf22 "230"}));\par
150 \par
151 \par
152     privKeySearch = search_private_keys_char(mString.matrixPub, mString.matrixPriv, lines, 4);\par
153     {\cf18 int} k = 0;\par
154     {\cf19 while} (strcmp(privKeySearch[k], {\cf22 "-1"}) != 0)\{\par
155         printf({\cf22 "As priv encontradas foram %s\\n"}, privKeySearch[k]);\par
156         k++;\par
157     \}\par
158 \par
159 \par
160     {\cf20 /*}\par
161 {\cf20     for (int i = 0; i < lines; ++i) \{}\par
162 {\cf20         if(mString.matrixPub[i] && mString.matrixPub[i][0] != '\\0') printf("Pub - %s\\n", mString.matrixPub[i]);}\par
163 {\cf20         if(mString.matrixPriv[i] && mString.matrixPub[i][0] != '\\0') printf("Priv - %s\\n", mString.matrixPriv[i]);}\par
164 {\cf20         if(mString.matrixCod[i] && mString.matrixPub[i][0] != '\\0') printf("Cod - %s\\n", mString.matrixCod[i]);}\par
165 {\cf20     \}}\par
166 {\cf20     printf("\\n");}\par
167 {\cf20      */}\par
168 \par
169 \par
170     bulk_populate_public_keys_char(mString.matrixPub, lines);\par
171 \par
172     {\cf20 /*}\par
173 {\cf20     for (int i = 0; i < lines; ++i) \{}\par
174 {\cf20         printf("mString PubMatrix de %d - %s\\n", i, mString.matrixPub[i]);}\par
175 {\cf20     \}}\par
176 {\cf20     */}\par
177 \par
178     bulk_compute_private_keys_char(mString.matrixPub, mString.matrixPriv, lines);\par
179 \par
180     {\cf20 /*}\par
181 {\cf20     for (int i = 0; i < lines; ++i) \{}\par
182 {\cf20         printf("mString PrivMatrix de %d - %s\\n", i, mString.matrixPriv[i]);}\par
183 {\cf20     \}}\par
184 {\cf20     */}\par
185 \par
186     bulk_compute_runlengths_char(mString.matrixPriv, mString.matrixCod, lines);\par
187 \par
188     {\cf20 /*}\par
189 {\cf20     for (int i = 0; i < lines; ++i) \{}\par
190 {\cf20         printf("mString CodMatrix de %d - %s\\n", i, mString.matrixCod[i]);}\par
191 {\cf20     \}}\par
192 {\cf20     */}\par
193 \par
194     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
195         printf({\cf22 "Pub - %s\\n"}, mString.matrixPub[i]);\par
196         printf({\cf22 "Priv - %s\\n"}, mString.matrixPriv[i]);\par
197         printf({\cf22 "Cod - %s\\n"}, mString.matrixCod[i]);\par
198     \}\par
199     printf({\cf22 "\\n"});\par
200 \par
201     printf({\cf22 "A Chave Privada e - %llu\\n"}, get_private_key_char(mString.matrixPub, mString.matrixPriv, lines, atoll(mString.matrixPub[3])));\par
202     printf({\cf22 "A Chave Codificada e - %llu\\n"}, get_runlength_char(mString.matrixPriv, mString.matrixCod, lines, atoll(mString.matrixPriv[3])));\par
203 \par
204     printf({\cf22 "Exist - %d\\n"}, exists_key_char(mString.matrixPub, lines, 0));\par
205     printf({\cf22 "Exist - %d\\n"}, exists_key_char(mString.matrixPub, lines, atoll(mString.matrixPub[3])));\par
206 \par
207     {\cf20 //sort_matrix_char(mString.matrixPub, lines, 1);}\par
208     sort_all_matrices_char(mString.matrixPub, mString.matrixPriv, mString.matrixCod, lines, 1);\par
209     list_keys_char(mString.matrixPub, mString.matrixPriv, mString.matrixCod, lines, 1);\par
210 \par
211     save_txt_keys_char(mString.matrixPub, mString.matrixPriv, mString.matrixCod, lines, filename);\par
212 \par
213     {\cf20 //load_txt_keys_char(mString.matrixPub, mString.matrixPriv, mString.matrixCod, lines, filename);}\par
214 \par
215     save_bin_keys_char(mString.matrixPub, mString.matrixPriv, mString.matrixCod, lines, filenameBn);\par
216 \par
217 \par
218     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
219         printf({\cf22 "Pub - %s\\n"}, mString.matrixPub[i]);\par
220         printf({\cf22 "Priv - %s\\n"}, mString.matrixPriv[i]);\par
221         printf({\cf22 "Cod - %s\\n"}, mString.matrixCod[i]);\par
222     \}\par
223     printf({\cf22 "\\n"});\par
224 \par
225 \par
226 \par
227     privKeyLong = private_key_from_runlength_char(atoll(mString.matrixCod[1]));\par
228 \par
229     printf({\cf22 "Priv: %llu (RunLength: %llu)\\n"}, privKeyLong, atoll(mString.matrixCod[1]));\par
230 \par
231 \par
232 \par
233     privKeySearch = search_private_keys_char(mString.matrixPub, mString.matrixPriv, lines, 0);\par
234     {\cf18 int} p = 0;\par
235     {\cf19 while} (strcmp(privKeySearch[p], {\cf22 "-1"}) != 0)\{\par
236         printf({\cf22 "Privs Encontradas - %s\\n"}, privKeySearch[p]);\par
237         p++;\par
238     \}\par
239 \par
240 \par
241 \par
242     printf({\cf22 "Delete a - %llu\\n"}, delete_key_char(mString.matrixPub, mString.matrixPriv, mString.matrixCod, lines, {\cf22 "2014"}));\par
243 \par
244 \par
245     {\cf19 for} ({\cf18 int} i = 0; i < lines; ++i) \{\par
246         printf({\cf22 "Pub - %s\\n"}, mString.matrixPub[i]);\par
247         printf({\cf22 "Priv - %s\\n"}, mString.matrixPriv[i]);\par
248         printf({\cf22 "Cod - %s\\n"}, mString.matrixCod[i]);\par
249     \}\par
250     printf({\cf22 "\\n"});\par
251 \par
252 \par
253     {\cf18 int} y = 0;\par
254     {\cf19 while} (strcmp(mString.matrixPub[y], {\cf22 "-1"}) != 0)\{\par
255         mString.lines++;\par
256         y++;\par
257     \}\par
258 \par
259     {\cf19 return} mString;\par
260 \}\par
}
}
{\xe \v clienteUtilizadores\:testes.c}
{\xe \v testes.c\:clienteUtilizadores}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void clienteUtilizadores ({\b UTILIZADORES} *  {\i utilizador}, {\b UTILIZADORES_QUEUE}  {\i queue}, {\b KEY_HOLDER} *  {\i portaChaves})}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 434                                                                                                      \{\par
435 \par
436     printf({\cf22 "UTILIZADORES\\n"});\par
437 \par
438     {\cf20 /*}\par
439 {\cf20     create_utilizador_ordenado(&queue, &utilizador, "Manuel", "m@gmail.com", portaChaves, 0);}\par
440 {\cf20     create_utilizador_ordenado(&queue, &utilizador, "Z", "m@gmail.com", portaChaves, 2);}\par
441 {\cf20     create_utilizador_ordenado(&queue, &utilizador, "Ricardo", "m@gmail.com", portaChaves, 1);}\par
442 {\cf20     create_utilizador_ordenado(&queue, &utilizador, "Mario", "m@gmail.com", portaChaves, 2);}\par
443 {\cf20     create_utilizador_ordenado(&queue, &utilizador, "A", "m@gmail.com", portaChaves, 1);}\par
444 {\cf20      */}\par
445 \par
446     {\cf20 /*}\par
447 {\cf20     create_utilizador_cauda(&queue, &utilizador, "Manuel", "m@gmail.com", portaChaves, 0);}\par
448 {\cf20     create_utilizador_cauda(&queue, &utilizador, "Jose", "m@gmail.com", portaChaves, 0);}\par
449 {\cf20     create_utilizador_ordenado(&queue, &utilizador, "A", "m@gmail.com", portaChaves, 1);}\par
450 {\cf20      */}\par
451 \par
452     create_utilizador_cabeca(&queue, &utilizador, {\cf22 "Manuel"}, {\cf22 "m@gmail.com"}, portaChaves, 0);\par
453     create_utilizador_cabeca(&queue, &utilizador, {\cf22 "Josa"}, {\cf22 "m@gmail.com"}, portaChaves, 0);\par
454     create_utilizador_cabeca(&queue, &utilizador, {\cf22 "Z"}, {\cf22 "m@gmail.com"}, portaChaves, 0);\par
455     create_utilizador_ordenado(&queue, &utilizador, {\cf22 "A"}, {\cf22 "m@gmail.com"}, portaChaves, 1);\par
456     create_utilizador_cauda(&queue, &utilizador, {\cf22 "Cauda"}, {\cf22 "m@gmail.com"}, portaChaves, 0);\par
457     create_utilizador_cabeca(&queue, &utilizador, {\cf22 "Jose"}, {\cf22 "m@gmail.com"}, portaChaves, 0);\par
458 \par
459     print_utilizadores(&queue);\par
460 \par
461     remover_nome_utilizador(&queue, {\cf22 "Manuel"});\par
462     {\cf20 //remover_cabeca_utilizador(&queue);}\par
463     {\cf20 //remover_cauda_utilizador(&queue);}\par
464 \par
465     {\cf20 //print_utilizadores(&queue);}\par
466 \par
467     {\cf20 //printf("Ordenado\\n");}\par
468     ordenar_utilizadores(&queue);\par
469 \par
470     print_utilizadores(&queue);\par
471 \par
472     search_utilizador_by_name(&queue, {\cf22 "Manuel"});\par
473     {\cf20 //search_utilizador_by_name(&queue, "Ricardo");}\par
474 \par
475     {\cf20 //print_utilizadores(&queue);}\par
476 \par
477     dequeue(&queue);\par
478 \}\par
}
}
{\xe \v main_test\:testes.c}
{\xe \v testes.c\:main_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main_test ()}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 15                \{\par
16 \par
17     {\cf17 struct }matrixString mString;\par
18     {\cf17 struct }matrixInts mInts;\par
19     KEY_HOLDER *portaChaves = NULL;\par
20     UTILIZADORES *utilizador = NULL;\par
21     UTILIZADORES_QUEUE queue;\par
22     queue.head = NULL;\par
23     queue.tail = NULL;\par
24     queue.size = 0;\par
25 \par
26     time_t t1;\par
27     srand(({\cf18 unsigned} ) time(&t1));\par
28 \par
29     clock_t start, end;\par
30     {\cf18 double} execution_time;\par
31     start = clock();\par
32 \par
33     mString = clienteString(mString);\par
34     mInts = clienteInt(mInts);\par
35 \par
36     end = clock();\par
37     execution_time = ((double)(end - start))/CLOCKS_PER_SEC;\par
38     printf({\cf22 "Numero de Matrix Strings %d\\n"}, mString.lines);\par
39     printf({\cf22 "Numero de Matrix Ints %d\\n"}, mInts.lines);\par
40     printf({\cf22 "Time = %f\\n"}, execution_time);\par
41 \par
42 \par
43     {\cf20 /*}\par
44 {\cf20     for (int i = 0; i < 6; ++i) \{}\par
45 {\cf20         printf("Pub String - %s\\n", mString.matrixPub[i]);}\par
46 {\cf20         int j = 0;}\par
47 {\cf20         while (mInts.matrixPub[i][j] != -1)\{}\par
48 {\cf20             printf("Pub Ints - %hi\\n", mInts.matrixPub[i][j]);}\par
49 {\cf20             j++;}\par
50 {\cf20         \}}\par
51 {\cf20         printf("\\n");}\par
52 {\cf20     \}}\par
53 {\cf20     */}\par
54 \par
55     portaChaves = clienteKeyHolder(portaChaves, mString, mInts);\par
56 \par
57     clienteUtilizadores(utilizador, queue, portaChaves);\par
58 \par
59     freeMatrixChar(mString.matrixPub, mString.lines);\par
60     freeMatrixChar(mString.matrixPriv, mString.lines);\par
61     freeMatrixChar(mString.matrixCod, mString.lines);\par
62     freeMatrixShort(mInts.matrixPub, mInts.lines);\par
63     freeMatrixShort(mInts.matrixPriv, mInts.lines);\par
64     freeMatrixShort(mInts.matrixCod, mInts.lines);\par
65     free(mString.matrixPub);\par
66     free(mString.matrixPriv);\par
67     free(mString.matrixCod);\par
68     free(mInts.matrixPub);\par
69     free(mInts.matrixPriv);\par
70     free(mInts.matrixCod);\par
71 \par
72 \par
73     end = clock();\par
74     execution_time = ((double)(end - start))/CLOCKS_PER_SEC;\par
75     printf({\cf22 "Numero de Matrix Strings %d\\n"}, mString.lines);\par
76     printf({\cf22 "Numero de Matrix Ints %d\\n"}, mString.lines);\par
77     printf({\cf22 "Porta Chaves\\n"});\par
78     printf({\cf22 "Utilizadores\\n"});\par
79     printf({\cf22 "Time = %f\\n"}, execution_time);\par
80 \par
81 \par
82     {\cf19 return} 0;\par
83 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro lib_projeto/testes.h\par \pard\plain 
{\tc\tcl2 \v lib_projeto/testes.h}
{\xe \v lib_projeto/testes.h}
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main_test} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b matrixDinamicaInt} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b matrixDinamicaString} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v main_test\:testes.h}
{\xe \v testes.h\:main_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main_test ()}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 15                \{\par
16 \par
17     {\cf17 struct }matrixString mString;\par
18     {\cf17 struct }matrixInts mInts;\par
19     KEY_HOLDER *portaChaves = NULL;\par
20     UTILIZADORES *utilizador = NULL;\par
21     UTILIZADORES_QUEUE queue;\par
22     queue.head = NULL;\par
23     queue.tail = NULL;\par
24     queue.size = 0;\par
25 \par
26     time_t t1;\par
27     srand(({\cf18 unsigned} ) time(&t1));\par
28 \par
29     clock_t start, end;\par
30     {\cf18 double} execution_time;\par
31     start = clock();\par
32 \par
33     mString = clienteString(mString);\par
34     mInts = clienteInt(mInts);\par
35 \par
36     end = clock();\par
37     execution_time = ((double)(end - start))/CLOCKS_PER_SEC;\par
38     printf({\cf22 "Numero de Matrix Strings %d\\n"}, mString.lines);\par
39     printf({\cf22 "Numero de Matrix Ints %d\\n"}, mInts.lines);\par
40     printf({\cf22 "Time = %f\\n"}, execution_time);\par
41 \par
42 \par
43     {\cf20 /*}\par
44 {\cf20     for (int i = 0; i < 6; ++i) \{}\par
45 {\cf20         printf("Pub String - %s\\n", mString.matrixPub[i]);}\par
46 {\cf20         int j = 0;}\par
47 {\cf20         while (mInts.matrixPub[i][j] != -1)\{}\par
48 {\cf20             printf("Pub Ints - %hi\\n", mInts.matrixPub[i][j]);}\par
49 {\cf20             j++;}\par
50 {\cf20         \}}\par
51 {\cf20         printf("\\n");}\par
52 {\cf20     \}}\par
53 {\cf20     */}\par
54 \par
55     portaChaves = clienteKeyHolder(portaChaves, mString, mInts);\par
56 \par
57     clienteUtilizadores(utilizador, queue, portaChaves);\par
58 \par
59     freeMatrixChar(mString.matrixPub, mString.lines);\par
60     freeMatrixChar(mString.matrixPriv, mString.lines);\par
61     freeMatrixChar(mString.matrixCod, mString.lines);\par
62     freeMatrixShort(mInts.matrixPub, mInts.lines);\par
63     freeMatrixShort(mInts.matrixPriv, mInts.lines);\par
64     freeMatrixShort(mInts.matrixCod, mInts.lines);\par
65     free(mString.matrixPub);\par
66     free(mString.matrixPriv);\par
67     free(mString.matrixCod);\par
68     free(mInts.matrixPub);\par
69     free(mInts.matrixPriv);\par
70     free(mInts.matrixCod);\par
71 \par
72 \par
73     end = clock();\par
74     execution_time = ((double)(end - start))/CLOCKS_PER_SEC;\par
75     printf({\cf22 "Numero de Matrix Strings %d\\n"}, mString.lines);\par
76     printf({\cf22 "Numero de Matrix Ints %d\\n"}, mString.lines);\par
77     printf({\cf22 "Porta Chaves\\n"});\par
78     printf({\cf22 "Utilizadores\\n"});\par
79     printf({\cf22 "Time = %f\\n"}, execution_time);\par
80 \par
81 \par
82     {\cf19 return} 0;\par
83 \}\par
}
}
{\xe \v matrixDinamicaInt\:testes.h}
{\xe \v testes.h\:matrixDinamicaInt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void matrixDinamicaInt ()}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v matrixDinamicaString\:testes.h}
{\xe \v testes.h\:matrixDinamicaString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void matrixDinamicaString ()}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testes.h\par \pard\plain 
{\tc\tcl2 \v lib_projeto/testes.h}
{\xe \v lib_projeto/testes.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Ir para a documenta\'E7\'E3o deste ficheiro.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //}\par
2 {\cf20 // Created by pc on 12/11/2022.}\par
3 {\cf20 //}\par
4 \par
5 {\cf21 #ifndef INC_2UFP_PROJETO_AED_TESTES_H}\par
6 {\cf21 #define INC_2UFP_PROJETO_AED_TESTES_H}\par
7 \par
8 {\cf18 int} main_test();\par
9 \par
10 {\cf18 void} matrixDinamicaInt();\par
11 \par
12 {\cf18 void} matrixDinamicaString();\par
13 \par
14 {\cf21 #endif }{\cf20 //INC_2UFP_PROJETO_AED_TESTES_H}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par 
\pard\plain 
{\tc \v \'CDndice}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
